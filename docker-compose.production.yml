version: '3.8'

services:
  # Documentation Portal Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: centuryproptax-docs
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - WA_ACCESS_TOKEN=${WA_ACCESS_TOKEN}
      - WA_PHONE_NUMBER_ID=${WA_PHONE_NUMBER_ID}
      - WA_VERIFY_TOKEN=${WA_VERIFY_TOKEN}
      - RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID}
      - RAZORPAY_KEY_SECRET=${RAZORPAY_KEY_SECRET}
      - BASE_URL=${BASE_URL:-https://docs.centuryproptax.com}
      - DOCS_BASE_URL=${DOCS_BASE_URL:-https://docs.centuryproptax.com}
      - CDN_URL=${CDN_URL}
      - MONITORING_ENABLED=true
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
      - ./docs/static:/app/docs/static:ro
    networks:
      - centuryproptax-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.docs.rule=Host(`docs.centuryproptax.com`)"
      - "traefik.http.routers.docs.tls=true"
      - "traefik.http.routers.docs.tls.certresolver=letsencrypt"
      - "traefik.http.services.docs.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.docs-compress.compress=true"
      - "traefik.http.middlewares.docs-secure-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.docs-secure-headers.headers.forcestsheader=true"
      - "traefik.http.middlewares.docs-secure-headers.headers.referrerpolicy=strict-origin-when-cross-origin"
      - "traefik.http.middlewares.docs-secure-headers.headers.contentsecuritypolicy=default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'"
      - "traefik.http.routers.docs.middlewares=docs-compress,docs-secure-headers"

  # Reverse Proxy with SSL Termination
  traefik:
    image: traefik:v3.0
    container_name: centuryproptax-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --global.checknewversion=false
      - --global.sendanonymoususage=false
      - --log.level=INFO
      - --accesslog=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./acme.json:/acme.json
    networks:
      - centuryproptax-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.centuryproptax.com`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"

  # Redis for Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: centuryproptax-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - centuryproptax-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: centuryproptax-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-centuryproptax}
      - POSTGRES_USER=${POSTGRES_USER:-centuryproptax}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - centuryproptax-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-centuryproptax}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: centuryproptax-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - centuryproptax-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Log Aggregation with Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: centuryproptax-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - centuryproptax-network

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  centuryproptax-network:
    driver: bridge