{
  "import_analysis": {
    "import_graph": {
      "setup.py": [
        "setuptools"
      ],
      "scripts/validate-workflow.py": [
        "agents.simplified.database_booking_tools",
        "agents.simplified.booking_tools",
        "services.persistence.database",
        "os",
        "sys",
        "agents.simplified.enhanced_workflow_tools"
      ],
      "scripts/test-workflow.py": [
        "asyncio",
        "traceback",
        "os",
        "sys",
        "agents.simplified.enhanced_workflow_tools"
      ],
      "scripts/test_date_intelligence.py": [
        "asyncio",
        "traceback",
        "os",
        "sys",
        "services.date_intelligence",
        "datetime"
      ],
      "scripts/dependency_analyzer.py": [
        "json",
        "pathlib",
        "typing",
        "os",
        "sys",
        "re",
        "collections",
        "ast"
      ],
      "scripts/test-mock-payment.py": [
        "asyncio",
        "traceback",
        "os",
        "sys",
        "services.payments.razorpay_integration",
        "services.payments.mock_razorpay"
      ],
      "scripts/test_intelligent_booking.py": [
        "asyncio",
        "os",
        "sys",
        "datetime",
        "agents.simplified.enhanced_workflow_tools"
      ],
      "tests/run_tests.py": [
        "subprocess",
        "pathlib",
        "os",
        "sys",
        "argparse"
      ],
      "tests/conftest.py": [
        "asyncio",
        "typing",
        "json",
        "engine.api.app",
        "engine.security.auth",
        "tempfile",
        "os",
        "yaml",
        "engine.generator.config_generator",
        "pytest",
        "engine.monitoring.analytics",
        "engine.monitoring.metrics",
        "engine.core.message_handler",
        "engine.core.state_manager"
      ],
      "config/response_templates.py": [
        "typing",
        "enum",
        "logging"
      ],
      "config/ai_configuration.py": [
        "typing",
        "logging",
        "os",
        "enum",
        "dataclasses"
      ],
      "config/compliance_settings.py": [
        "typing",
        "os",
        "enum",
        "datetime",
        "dotenv"
      ],
      "config/settings.py": [
        "os",
        "typing",
        "dotenv"
      ],
      "config/performance_thresholds.py": [
        "typing",
        "os",
        "enum",
        "dataclasses",
        "dotenv"
      ],
      "config/security_policies.py": [
        "typing",
        "os",
        "enum",
        "dataclasses",
        "dotenv"
      ],
      "src/main.py": [
        "src.api.report_management",
        "services.persistence.database",
        "logging",
        "os",
        "structlog",
        "src.api.integrated_webhooks",
        "fastapi.responses",
        "fastapi",
        "app.webhooks.razorpay_webhook",
        "app.routes.mock_payment_routes",
        "app.routes.ticket_routes",
        "src.api.whatsapp_webhooks",
        "uvicorn",
        "services.messaging.whatsapp_client",
        "fastapi.middleware.cors",
        "dotenv"
      ],
      "services/date_intelligence.py": [
        "datetime",
        "re",
        "structlog",
        "typing"
      ],
      "mock_data/consultant_schedules.py": [
        "datetime",
        "typing",
        "dataclasses",
        "random"
      ],
      "mock_data/tax_rates.py": [
        "datetime",
        "typing",
        "decimal"
      ],
      "mock_data/demo_customer_personas.py": [
        "typing",
        "enum",
        "datetime",
        "dataclasses",
        "random"
      ],
      "mock_data/tax_calendars.py": [
        "datetime",
        "typing",
        "calendar"
      ],
      "mock_data/property_records.py": [
        "datetime",
        "typing",
        "random"
      ],
      "mock_data/document_templates.py": [
        "datetime",
        "typing",
        "re",
        "random"
      ],
      "mock_data/assessment_patterns.py": [
        "datetime",
        "typing",
        "decimal",
        "random"
      ],
      "compliance/tdlr/audit_trail_generator.py": [
        "json",
        "typing",
        "logging",
        "asyncio",
        "csv",
        "enum",
        "io",
        "hashlib",
        "uuid",
        "datetime",
        "dataclasses",
        "config.compliance_settings"
      ],
      "compliance/tdlr/privacy_compliance_validator.py": [
        "typing",
        "json",
        "logging",
        "enum",
        "hashlib",
        "datetime",
        "re",
        "dataclasses",
        "config.compliance_settings"
      ],
      "compliance/tdlr/public_records_handler.py": [
        "typing",
        "logging",
        "enum",
        "datetime",
        "re",
        "dataclasses",
        "config.compliance_settings"
      ],
      "compliance/tdlr/record_retention_manager.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "os",
        "enum",
        "datetime",
        "dataclasses",
        "config.compliance_settings"
      ],
      "approval/workflows/stakeholder_approval_manager.py": [
        "json",
        "typing",
        "logging",
        "enum",
        "uuid",
        "datetime",
        "dataclasses"
      ],
      "security/audit/vulnerability_scanner.py": [
        "subprocess",
        "asyncio",
        "typing",
        "logging",
        "json",
        "urllib.parse",
        "os",
        "aiohttp",
        "enum",
        "hashlib",
        "config.security_policies",
        "datetime",
        "re",
        "dataclasses",
        "ssl",
        "glob",
        "socket"
      ],
      "agents/simplified/property_document_tools.py": [
        "services.image_analysis.property_document_parser",
        "asyncio",
        "typing",
        "json",
        "langchain_core.tools",
        "base64",
        "structlog",
        "threading",
        "concurrent.futures"
      ],
      "agents/simplified/__init__.py": [
        "agents.simplified.ticket_tools",
        "agents.simplified.enhanced_workflow_tools",
        "agents.simplified.property_tax_rag_tool"
      ],
      "agents/simplified/property_tax_rag_tool.py": [
        "asyncio",
        "typing",
        "langchain_core.tools",
        "structlog",
        "services.vector_store.semantic_search",
        "threading",
        "concurrent.futures",
        "services.knowledge_base.content_processor"
      ],
      "agents/simplified/ticket_tools.py": [
        "typing",
        "asyncio",
        "services.ticket_management.models",
        "services.persistence.database",
        "services.ticket_management.ticket_service",
        "structlog",
        "datetime",
        "pydantic",
        "langchain.tools"
      ],
      "agents/simplified/simplified_agent_v2.py": [
        "agents.core.property_tax_assistant_v3"
      ],
      "agents/simplified/enhanced_workflow_tools.py": [
        "services.utils.date_parser",
        "asyncio",
        "json",
        "services.persistence.database",
        "langchain_core.tools",
        "datetime",
        "services.persistence.repositories",
        "traceback",
        "structlog",
        "services.payments.razorpay_integration",
        "decimal",
        "integrations.google_sheets.lead_tracker",
        "services.date_intelligence",
        "services.persistence.order_storage",
        "services.payments.mock_razorpay",
        "random",
        "typing",
        "string",
        "os",
        "uuid",
        "pydantic",
        "services.utils.retry_handler"
      ],
      "agents/core/guardrails.py": [
        "typing",
        "logging",
        "enum",
        "config.ai_configuration",
        "re",
        "dataclasses"
      ],
      "agents/core/conversation_flows.py": [
        "typing",
        "logging",
        "enum",
        "datetime",
        "config.response_templates",
        "dataclasses",
        "re"
      ],
      "agents/core/property_tax_assistant_v3.py": [
        "services.persistence.database",
        "services.persistence.redis_conversation_store",
        "langchain_google_genai",
        "langgraph.prebuilt",
        "langchain_core.tools",
        "agents.simplified.property_tax_rag_tool",
        "datetime",
        "services.persistence.repositories",
        "langchain_core.prompts",
        "sqlalchemy",
        "langchain_core.messages",
        "structlog",
        "agents.core.guardrails",
        "langchain_core.runnables",
        "langgraph.graph",
        "agents.simplified.ticket_tools",
        "typing_extensions",
        "config.response_templates",
        "typing",
        "os",
        "langgraph.checkpoint.memory",
        "config.ai_configuration",
        "agents.simplified.property_document_tools",
        "agents.simplified.enhanced_workflow_tools",
        "services.persistence.analytics_repository"
      ],
      "agents/tools/document_processing_tool.py": [
        "asyncio",
        "typing",
        "langchain_core.tools",
        "base64",
        "hashlib",
        "structlog",
        "datetime",
        "re",
        "pydantic",
        "mock_data.document_templates",
        "decimal"
      ],
      "agents/tools/savings_calculator_tool.py": [
        "asyncio",
        "typing",
        "mock_data.tax_rates",
        "langchain_core.tools",
        "structlog",
        "datetime",
        "pydantic",
        "decimal"
      ],
      "agents/tools/lead_qualification_tool.py": [
        "asyncio",
        "typing",
        "mock_data.tax_rates",
        "langchain_core.tools",
        "structlog",
        "datetime",
        "pydantic",
        "mock_data.assessment_patterns",
        "decimal"
      ],
      "agents/tools/property_validation_tool.py": [
        "asyncio",
        "typing",
        "mock_data.property_records",
        "langchain_core.tools",
        "structlog",
        "datetime",
        "re",
        "pydantic",
        "decimal"
      ],
      "agents/tools/consultation_scheduling_tool.py": [
        "pytz",
        "asyncio",
        "typing",
        "mock_data.consultant_schedules",
        "langchain_core.tools",
        "structlog",
        "datetime",
        "agents.tools.property_validation_tool",
        "pydantic",
        "decimal"
      ],
      "agents/tools/deadline_tracking_tool.py": [
        "asyncio",
        "typing",
        "langchain_core.tools",
        "structlog",
        "mock_data.tax_calendars",
        "datetime",
        "pydantic",
        "decimal"
      ],
      "services/ticket_management/webhook_interceptor.py": [
        "json",
        "typing",
        "services.persistence.database",
        "redis.asyncio",
        "services.ticket_management.ticket_service",
        "structlog",
        "config.settings",
        "datetime",
        "services.messaging.whatsapp_client"
      ],
      "services/ticket_management/ticket_service.py": [
        "sqlalchemy.ext.asyncio",
        "json",
        "typing",
        "models",
        "string",
        "redis.asyncio",
        "structlog",
        "config.settings",
        "datetime",
        "sqlalchemy",
        "random"
      ],
      "services/ticket_management/__init__.py": [
        "models",
        "ticket_service",
        "webhook_interceptor"
      ],
      "services/ticket_management/models.py": [
        "services.persistence.database",
        "enum",
        "datetime",
        "sqlalchemy.orm",
        "sqlalchemy"
      ],
      "services/messaging/modern_integrated_webhook_handler.py": [
        "json",
        "typing",
        "services.messaging.message_batching",
        "agents.core.property_tax_assistant_v3",
        "services.ticket_management.webhook_interceptor",
        "structlog",
        "datetime",
        "services.messaging.whatsapp_client",
        "services.messaging.property_tax_templates"
      ],
      "services/messaging/whatsapp_client.py": [
        "asyncio",
        "typing",
        "json",
        "os",
        "aiohttp",
        "structlog",
        "hashlib",
        "datetime",
        "hmac"
      ],
      "services/messaging/whatsapp_image_handler.py": [
        "asyncio",
        "typing",
        "os",
        "aiohttp",
        "structlog",
        "base64"
      ],
      "services/messaging/property_tax_templates.py": [
        "datetime",
        "services.messaging.whatsapp_client",
        "typing",
        "structlog"
      ],
      "services/messaging/integrated_webhook_handler.py": [
        "services.messaging.modern_integrated_webhook_handler"
      ],
      "services/messaging/message_batching.py": [
        "asyncio",
        "typing",
        "structlog",
        "time",
        "datetime",
        "services.messaging.instagram_types",
        "dataclasses"
      ],
      "services/data_acquisition/scheduler.py": [
        "asyncio",
        "typing",
        "pathlib",
        "json",
        "schedule",
        "structlog",
        "document_processor",
        "texas_comptroller_scraper",
        "datetime",
        "dataclasses",
        "county_appraisal_scraper"
      ],
      "services/data_acquisition/county_appraisal_scraper.py": [
        "asyncio",
        "typing",
        "urllib.parse",
        "aiohttp",
        "structlog",
        "texas_comptroller_scraper",
        "datetime",
        "bs4",
        "dataclasses",
        "re"
      ],
      "services/data_acquisition/texas_comptroller_scraper.py": [
        "asyncio",
        "pathlib",
        "typing",
        "urllib.parse",
        "aiohttp",
        "structlog",
        "hashlib",
        "datetime",
        "bs4",
        "dataclasses",
        "re"
      ],
      "services/data_acquisition/document_processor.py": [
        "asyncio",
        "aiofiles",
        "typing",
        "pathlib",
        "structlog",
        "hashlib",
        "html",
        "texas_comptroller_scraper",
        "datetime",
        "re",
        "dataclasses",
        "bs4",
        "PyPDF2",
        "mimetypes"
      ],
      "services/knowledge_base/legal_text_cleaner.py": [
        "asyncio",
        "typing",
        "structlog",
        "datetime",
        "re",
        "dataclasses"
      ],
      "services/knowledge_base/quality_validator.py": [
        "asyncio",
        "typing",
        "json",
        "content_processor",
        "enum",
        "structlog",
        "datetime",
        "re",
        "dataclasses",
        "services.vector_store.citation_tracker"
      ],
      "services/knowledge_base/content_processor.py": [
        "asyncio",
        "typing",
        "json",
        "pathlib",
        "legal_text_cleaner",
        "services.data_acquisition.document_processor",
        "taxonomy_builder",
        "structlog",
        "datetime",
        "re",
        "dataclasses",
        "services.vector_store.citation_tracker"
      ],
      "services/knowledge_base/taxonomy_builder.py": [
        "asyncio",
        "typing",
        "json",
        "pathlib",
        "structlog",
        "datetime",
        "re",
        "dataclasses",
        "collections"
      ],
      "services/communication/message_handler.py": [
        "json",
        "typing",
        "services.messaging.message_batching",
        "agents.core.property_tax_assistant_v3",
        "services.ticket_management.webhook_interceptor",
        "langchain_core.messages",
        "os",
        "aiohttp",
        "langchain_google_genai",
        "structlog",
        "hashlib",
        "config.settings",
        "datetime",
        "services.messaging.whatsapp_client",
        "hmac"
      ],
      "services/vector_store/semantic_search.py": [
        "asyncio",
        "typing",
        "json",
        "enum",
        "structlog",
        "langchain_core.documents",
        "datetime",
        "dataclasses",
        "property_tax_embeddings",
        "legal_document_indexer"
      ],
      "services/vector_store/citation_tracker.py": [
        "asyncio",
        "typing",
        "json",
        "pathlib",
        "structlog",
        "datetime",
        "re",
        "dataclasses",
        "collections"
      ],
      "services/vector_store/property_tax_embeddings.py": [
        "asyncio",
        "typing",
        "json",
        "pathlib",
        "os",
        "numpy",
        "structlog",
        "langchain_google_genai",
        "langchain_core.embeddings",
        "re",
        "dataclasses"
      ],
      "services/vector_store/legal_document_indexer.py": [
        "asyncio",
        "pathlib",
        "typing",
        "langchain_chroma",
        "services.data_acquisition.document_processor",
        "langchain.text_splitter",
        "os",
        "langchain_google_genai",
        "structlog",
        "langchain_core.embeddings",
        "langchain_core.documents",
        "datetime"
      ],
      "services/persistence/redis_conversation_store.py": [
        "json",
        "typing",
        "os",
        "structlog",
        "datetime",
        "redis"
      ],
      "services/persistence/repositories.py": [
        "sqlalchemy.ext.asyncio",
        "typing",
        "structlog",
        "database",
        "datetime",
        "sqlalchemy.orm",
        "sqlalchemy",
        "decimal"
      ],
      "services/persistence/analytics_repository.py": [
        "sqlalchemy.ext.asyncio",
        "typing",
        "repositories",
        "structlog",
        "database",
        "datetime",
        "sqlalchemy.orm",
        "sqlalchemy",
        "decimal"
      ],
      "services/persistence/database.py": [
        "sqlalchemy.ext.asyncio",
        "asyncio",
        "typing",
        "contextlib",
        "enum",
        "structlog",
        "config.settings",
        "sqlalchemy.sql",
        "datetime",
        "sqlalchemy.orm",
        "sqlalchemy",
        "decimal"
      ],
      "services/persistence/order_storage.py": [
        "json",
        "typing",
        "asyncio",
        "services.persistence.database",
        "structlog",
        "config.settings",
        "datetime",
        "services.persistence.repositories",
        "functools",
        "redis"
      ],
      "services/voice/voice_setup.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "os",
        "livekit",
        "datetime",
        "voice_config",
        "google.generativeai",
        "livekit.protocol.room",
        "argparse"
      ],
      "services/voice/livekit_data_bridge.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "os",
        "livekit",
        "datetime",
        "dataclasses",
        "livekit.protocol.models",
        "dotenv"
      ],
      "services/voice/voice_chat_state.py": [
        "asyncio",
        "typing",
        "json",
        "redis.asyncio",
        "structlog",
        "datetime",
        "redis",
        "services.messaging.whatsapp_client"
      ],
      "services/voice/property_tax_voice_agent.py": [
        "asyncio",
        "json",
        "logging",
        "typing",
        "os",
        "livekit.agents",
        "livekit",
        "sys",
        "agents.simplified.property_tax_rag_tool",
        "services.voice.livekit_data_bridge",
        "datetime",
        "services.messaging.whatsapp_client",
        "livekit.plugins.google.beta.realtime",
        "re",
        "agents.simplified.enhanced_workflow_tools",
        "services.voice.voice_chat_state",
        "dotenv"
      ],
      "services/voice/voice_config.py": [
        "typing",
        "langchain_core.messages",
        "os",
        "langchain_google_genai",
        "datetime",
        "dataclasses"
      ],
      "services/utils/date_parser.py": [
        "datetime",
        "re",
        "typing"
      ],
      "services/utils/__init__.py": [
        "retry_handler"
      ],
      "services/utils/retry_handler.py": [
        "asyncio",
        "typing",
        "structlog",
        "datetime",
        "time",
        "functools",
        "random"
      ],
      "services/payments/mock_razorpay.py": [
        "json",
        "typing",
        "os",
        "langchain_core.tools",
        "structlog",
        "hashlib",
        "uuid",
        "datetime",
        "hmac"
      ],
      "services/payments/razorpay_integration.py": [
        "razorpay",
        "json",
        "typing",
        "services.persistence.database",
        "os",
        "langchain_core.tools",
        "structlog",
        "hashlib",
        "datetime",
        "services.persistence.repositories",
        "services.payments.mock_razorpay",
        "hmac"
      ],
      "src/api/integrated_webhooks.py": [
        "asyncio",
        "services.persistence.database",
        "logging",
        "json",
        "services.persistence.redis_conversation_store",
        "services.messaging.message_batching",
        "os",
        "fastapi.responses",
        "fastapi",
        "datetime",
        "services.persistence.repositories",
        "services.utils.retry_handler",
        "services.messaging.modern_integrated_webhook_handler"
      ],
      "src/api/whatsapp_webhooks.py": [
        "agents.simplified.prescription_tools",
        "typing",
        "asyncio",
        "services.persistence.redis_conversation_store",
        "services.messaging.modern_integrated_webhook_handler",
        "services.messaging.whatsapp_image_handler",
        "structlog",
        "base64",
        "services.voice.livekit_data_bridge",
        "fastapi",
        "datetime",
        "fastapi.responses",
        "services.messaging.whatsapp_client",
        "services.voice.voice_chat_state",
        "services.messaging.property_tax_templates"
      ],
      "src/api/business_webhooks.py": [
        "services.communication.message_handler",
        "services.persistence.database",
        "logging",
        "services.messaging.message_batching",
        "os",
        "redis.asyncio",
        "fastapi.responses",
        "fastapi",
        "datetime",
        "services.persistence.repositories",
        "services.utils.retry_handler"
      ],
      "src/api/report_management.py": [
        "typing",
        "json",
        "services.persistence.database",
        "datetime",
        "fastapi",
        "fastapi.responses",
        "services.persistence.repositories",
        "pydantic"
      ],
      "testing/performance/stress_testing_framework.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "aiohttp",
        "enum",
        "time",
        "datetime",
        "dataclasses",
        "config.performance_thresholds",
        "psutil",
        "random"
      ],
      "testing/performance/load_testing_suite.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "aiohttp",
        "statistics",
        "time",
        "datetime",
        "dataclasses",
        "config.performance_thresholds",
        "concurrent.futures",
        "random"
      ],
      "tests/tools/test_lead_qualification_tool.py": [
        "asyncio",
        "agents.tools.lead_qualification_tool",
        "pytest",
        "unittest.mock"
      ],
      "tests/tools/test_runner.py": [
        "asyncio",
        "pathlib",
        "mock_data.property_records",
        "mock_data.tax_rates",
        "mock_data.consultant_schedules",
        "agents.tools.savings_calculator_tool",
        "sys",
        "pytest",
        "mock_data.tax_calendars",
        "time",
        "agents.tools.property_validation_tool",
        "agents.tools.deadline_tracking_tool",
        "mock_data.document_templates",
        "agents.tools.consultation_scheduling_tool",
        "mock_data.assessment_patterns",
        "agents.tools.document_processing_tool",
        "agents.tools.lead_qualification_tool"
      ],
      "tests/tools/test_property_validation_tool.py": [
        "asyncio",
        "pytest",
        "datetime",
        "agents.tools.property_validation_tool",
        "time",
        "unittest.mock"
      ],
      "tests/tools/test_savings_calculator_tool.py": [
        "asyncio",
        "agents.tools.savings_calculator_tool",
        "pytest",
        "datetime",
        "time",
        "unittest.mock"
      ],
      "demo/monitoring/demo_performance_tracker.py": [
        "asyncio",
        "typing",
        "json",
        "logging",
        "time",
        "datetime",
        "dataclasses",
        "collections"
      ],
      "demo/scenarios/escalation_scenarios.py": [
        "typing",
        "enum",
        "agents.core.conversation_flows",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/scenarios/__init__.py": [
        "exemption_application_scenarios",
        "typing",
        "payment_processing_scenarios",
        "enum",
        "assessment_appeal_scenarios",
        "basic_inquiry_scenarios",
        "escalation_scenarios",
        "multi_property_scenarios",
        "random"
      ],
      "demo/scenarios/assessment_appeal_scenarios.py": [
        "typing",
        "mock_data.property_records",
        "enum",
        "agents.core.conversation_flows",
        "datetime",
        "dataclasses",
        "mock_data.assessment_patterns",
        "random"
      ],
      "demo/scenarios/payment_processing_scenarios.py": [
        "typing",
        "mock_data.tax_rates",
        "mock_data.property_records",
        "enum",
        "agents.core.conversation_flows",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/scenarios/exemption_application_scenarios.py": [
        "typing",
        "mock_data.property_records",
        "enum",
        "agents.core.conversation_flows",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/scenarios/multi_property_scenarios.py": [
        "typing",
        "mock_data.property_records",
        "enum",
        "agents.core.conversation_flows",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/scenarios/basic_inquiry_scenarios.py": [
        "typing",
        "mock_data.tax_rates",
        "mock_data.property_records",
        "enum",
        "agents.core.conversation_flows",
        "mock_data.tax_calendars",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/presentations/executive_summary_generator.py": [
        "json",
        "typing",
        "logging",
        "seaborn",
        "enum",
        "io",
        "base64",
        "config.security_policies",
        "datetime",
        "dataclasses",
        "config.compliance_settings",
        "config.performance_thresholds",
        "matplotlib.pyplot"
      ],
      "demo/environment/demo_configuration.py": [
        "json",
        "typing",
        "pathlib",
        "logging",
        "os",
        "config.settings",
        "datetime",
        "dataclasses"
      ],
      "demo/environment/demo_reset_manager.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "pathlib",
        "services.persistence.database",
        "services.persistence.redis_conversation_store",
        "mock_data.property_records",
        "datetime",
        "psycopg2",
        "dataclasses",
        "demo.environment.demo_configuration",
        "mock_data.demo_customer_personas",
        "redis"
      ],
      "scripts/cleanup/clear-user-redis.py": [
        "sys",
        "argparse",
        "redis"
      ],
      "scripts/cleanup/clear-all-sessions.py": [
        "argparse",
        "redis"
      ],
      "scripts/cleanup/clear-all-data.py": [
        "asyncio",
        "pathlib",
        "services.persistence.database",
        "os",
        "redis.asyncio",
        "sys",
        "structlog",
        "config.settings",
        "sqlalchemy"
      ],
      "scripts/cleanup/clear-sessions-only.py": [
        "asyncio",
        "pathlib",
        "os",
        "redis.asyncio",
        "sys",
        "structlog",
        "config.settings"
      ]
    },
    "file_imports": {
      "setup.py": [
        "setuptools"
      ],
      "scripts/validate-workflow.py": [
        "agents.simplified.database_booking_tools",
        "agents.simplified.booking_tools",
        "services.persistence.database",
        "os",
        "sys",
        "agents.simplified.enhanced_workflow_tools"
      ],
      "scripts/test-workflow.py": [
        "asyncio",
        "traceback",
        "os",
        "sys",
        "agents.simplified.enhanced_workflow_tools"
      ],
      "scripts/test_date_intelligence.py": [
        "asyncio",
        "traceback",
        "os",
        "sys",
        "services.date_intelligence",
        "datetime"
      ],
      "scripts/dependency_analyzer.py": [
        "json",
        "pathlib",
        "typing",
        "os",
        "sys",
        "re",
        "collections",
        "ast"
      ],
      "scripts/test-mock-payment.py": [
        "asyncio",
        "traceback",
        "os",
        "sys",
        "services.payments.razorpay_integration",
        "services.payments.mock_razorpay"
      ],
      "scripts/test_intelligent_booking.py": [
        "asyncio",
        "os",
        "sys",
        "datetime",
        "agents.simplified.enhanced_workflow_tools"
      ],
      "tests/run_tests.py": [
        "subprocess",
        "pathlib",
        "os",
        "sys",
        "argparse"
      ],
      "tests/conftest.py": [
        "asyncio",
        "typing",
        "json",
        "engine.api.app",
        "engine.security.auth",
        "tempfile",
        "os",
        "yaml",
        "engine.generator.config_generator",
        "pytest",
        "engine.monitoring.analytics",
        "engine.monitoring.metrics",
        "engine.core.message_handler",
        "engine.core.state_manager"
      ],
      "config/response_templates.py": [
        "typing",
        "enum",
        "logging"
      ],
      "config/ai_configuration.py": [
        "typing",
        "logging",
        "os",
        "enum",
        "dataclasses"
      ],
      "config/compliance_settings.py": [
        "typing",
        "os",
        "enum",
        "datetime",
        "dotenv"
      ],
      "config/settings.py": [
        "os",
        "typing",
        "dotenv"
      ],
      "config/performance_thresholds.py": [
        "typing",
        "os",
        "enum",
        "dataclasses",
        "dotenv"
      ],
      "config/security_policies.py": [
        "typing",
        "os",
        "enum",
        "dataclasses",
        "dotenv"
      ],
      "src/main.py": [
        "src.api.report_management",
        "services.persistence.database",
        "logging",
        "os",
        "structlog",
        "src.api.integrated_webhooks",
        "fastapi.responses",
        "fastapi",
        "app.webhooks.razorpay_webhook",
        "app.routes.mock_payment_routes",
        "app.routes.ticket_routes",
        "src.api.whatsapp_webhooks",
        "uvicorn",
        "services.messaging.whatsapp_client",
        "fastapi.middleware.cors",
        "dotenv"
      ],
      "services/date_intelligence.py": [
        "datetime",
        "re",
        "structlog",
        "typing"
      ],
      "mock_data/consultant_schedules.py": [
        "datetime",
        "typing",
        "dataclasses",
        "random"
      ],
      "mock_data/tax_rates.py": [
        "datetime",
        "typing",
        "decimal"
      ],
      "mock_data/demo_customer_personas.py": [
        "typing",
        "enum",
        "datetime",
        "dataclasses",
        "random"
      ],
      "mock_data/tax_calendars.py": [
        "datetime",
        "typing",
        "calendar"
      ],
      "mock_data/property_records.py": [
        "datetime",
        "typing",
        "random"
      ],
      "mock_data/document_templates.py": [
        "datetime",
        "typing",
        "re",
        "random"
      ],
      "mock_data/assessment_patterns.py": [
        "datetime",
        "typing",
        "decimal",
        "random"
      ],
      "compliance/tdlr/audit_trail_generator.py": [
        "json",
        "typing",
        "logging",
        "asyncio",
        "csv",
        "enum",
        "io",
        "hashlib",
        "uuid",
        "datetime",
        "dataclasses",
        "config.compliance_settings"
      ],
      "compliance/tdlr/privacy_compliance_validator.py": [
        "typing",
        "json",
        "logging",
        "enum",
        "hashlib",
        "datetime",
        "re",
        "dataclasses",
        "config.compliance_settings"
      ],
      "compliance/tdlr/public_records_handler.py": [
        "typing",
        "logging",
        "enum",
        "datetime",
        "re",
        "dataclasses",
        "config.compliance_settings"
      ],
      "compliance/tdlr/record_retention_manager.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "os",
        "enum",
        "datetime",
        "dataclasses",
        "config.compliance_settings"
      ],
      "approval/workflows/stakeholder_approval_manager.py": [
        "json",
        "typing",
        "logging",
        "enum",
        "uuid",
        "datetime",
        "dataclasses"
      ],
      "security/audit/vulnerability_scanner.py": [
        "subprocess",
        "asyncio",
        "typing",
        "logging",
        "json",
        "urllib.parse",
        "os",
        "aiohttp",
        "enum",
        "hashlib",
        "config.security_policies",
        "datetime",
        "re",
        "dataclasses",
        "ssl",
        "glob",
        "socket"
      ],
      "agents/simplified/property_document_tools.py": [
        "services.image_analysis.property_document_parser",
        "asyncio",
        "typing",
        "json",
        "langchain_core.tools",
        "base64",
        "structlog",
        "threading",
        "concurrent.futures"
      ],
      "agents/simplified/__init__.py": [
        "agents.simplified.ticket_tools",
        "agents.simplified.enhanced_workflow_tools",
        "agents.simplified.property_tax_rag_tool"
      ],
      "agents/simplified/property_tax_rag_tool.py": [
        "asyncio",
        "typing",
        "langchain_core.tools",
        "structlog",
        "services.vector_store.semantic_search",
        "threading",
        "concurrent.futures",
        "services.knowledge_base.content_processor"
      ],
      "agents/simplified/ticket_tools.py": [
        "typing",
        "asyncio",
        "services.ticket_management.models",
        "services.persistence.database",
        "services.ticket_management.ticket_service",
        "structlog",
        "datetime",
        "pydantic",
        "langchain.tools"
      ],
      "agents/simplified/simplified_agent_v2.py": [
        "agents.core.property_tax_assistant_v3"
      ],
      "agents/simplified/enhanced_workflow_tools.py": [
        "services.utils.date_parser",
        "asyncio",
        "json",
        "services.persistence.database",
        "langchain_core.tools",
        "datetime",
        "services.persistence.repositories",
        "traceback",
        "structlog",
        "services.payments.razorpay_integration",
        "decimal",
        "integrations.google_sheets.lead_tracker",
        "services.date_intelligence",
        "services.persistence.order_storage",
        "services.payments.mock_razorpay",
        "random",
        "typing",
        "string",
        "os",
        "uuid",
        "pydantic",
        "services.utils.retry_handler"
      ],
      "agents/core/guardrails.py": [
        "typing",
        "logging",
        "enum",
        "config.ai_configuration",
        "re",
        "dataclasses"
      ],
      "agents/core/conversation_flows.py": [
        "typing",
        "logging",
        "enum",
        "datetime",
        "config.response_templates",
        "dataclasses",
        "re"
      ],
      "agents/core/property_tax_assistant_v3.py": [
        "services.persistence.database",
        "services.persistence.redis_conversation_store",
        "langchain_google_genai",
        "langgraph.prebuilt",
        "langchain_core.tools",
        "agents.simplified.property_tax_rag_tool",
        "datetime",
        "services.persistence.repositories",
        "langchain_core.prompts",
        "sqlalchemy",
        "langchain_core.messages",
        "structlog",
        "agents.core.guardrails",
        "langchain_core.runnables",
        "langgraph.graph",
        "agents.simplified.ticket_tools",
        "typing_extensions",
        "config.response_templates",
        "typing",
        "os",
        "langgraph.checkpoint.memory",
        "config.ai_configuration",
        "agents.simplified.property_document_tools",
        "agents.simplified.enhanced_workflow_tools",
        "services.persistence.analytics_repository"
      ],
      "agents/tools/document_processing_tool.py": [
        "asyncio",
        "typing",
        "langchain_core.tools",
        "base64",
        "hashlib",
        "structlog",
        "datetime",
        "re",
        "pydantic",
        "mock_data.document_templates",
        "decimal"
      ],
      "agents/tools/savings_calculator_tool.py": [
        "asyncio",
        "typing",
        "mock_data.tax_rates",
        "langchain_core.tools",
        "structlog",
        "datetime",
        "pydantic",
        "decimal"
      ],
      "agents/tools/lead_qualification_tool.py": [
        "asyncio",
        "typing",
        "mock_data.tax_rates",
        "langchain_core.tools",
        "structlog",
        "datetime",
        "pydantic",
        "mock_data.assessment_patterns",
        "decimal"
      ],
      "agents/tools/property_validation_tool.py": [
        "asyncio",
        "typing",
        "mock_data.property_records",
        "langchain_core.tools",
        "structlog",
        "datetime",
        "re",
        "pydantic",
        "decimal"
      ],
      "agents/tools/consultation_scheduling_tool.py": [
        "pytz",
        "asyncio",
        "typing",
        "mock_data.consultant_schedules",
        "langchain_core.tools",
        "structlog",
        "datetime",
        "agents.tools.property_validation_tool",
        "pydantic",
        "decimal"
      ],
      "agents/tools/deadline_tracking_tool.py": [
        "asyncio",
        "typing",
        "langchain_core.tools",
        "structlog",
        "mock_data.tax_calendars",
        "datetime",
        "pydantic",
        "decimal"
      ],
      "services/ticket_management/webhook_interceptor.py": [
        "json",
        "typing",
        "services.persistence.database",
        "redis.asyncio",
        "services.ticket_management.ticket_service",
        "structlog",
        "config.settings",
        "datetime",
        "services.messaging.whatsapp_client"
      ],
      "services/ticket_management/ticket_service.py": [
        "sqlalchemy.ext.asyncio",
        "json",
        "typing",
        "models",
        "string",
        "redis.asyncio",
        "structlog",
        "config.settings",
        "datetime",
        "sqlalchemy",
        "random"
      ],
      "services/ticket_management/__init__.py": [
        "models",
        "ticket_service",
        "webhook_interceptor"
      ],
      "services/ticket_management/models.py": [
        "services.persistence.database",
        "enum",
        "datetime",
        "sqlalchemy.orm",
        "sqlalchemy"
      ],
      "services/messaging/modern_integrated_webhook_handler.py": [
        "json",
        "typing",
        "services.messaging.message_batching",
        "agents.core.property_tax_assistant_v3",
        "services.ticket_management.webhook_interceptor",
        "structlog",
        "datetime",
        "services.messaging.whatsapp_client",
        "services.messaging.property_tax_templates"
      ],
      "services/messaging/whatsapp_client.py": [
        "asyncio",
        "typing",
        "json",
        "os",
        "aiohttp",
        "structlog",
        "hashlib",
        "datetime",
        "hmac"
      ],
      "services/messaging/whatsapp_image_handler.py": [
        "asyncio",
        "typing",
        "os",
        "aiohttp",
        "structlog",
        "base64"
      ],
      "services/messaging/property_tax_templates.py": [
        "datetime",
        "services.messaging.whatsapp_client",
        "typing",
        "structlog"
      ],
      "services/messaging/integrated_webhook_handler.py": [
        "services.messaging.modern_integrated_webhook_handler"
      ],
      "services/messaging/message_batching.py": [
        "asyncio",
        "typing",
        "structlog",
        "time",
        "datetime",
        "services.messaging.instagram_types",
        "dataclasses"
      ],
      "services/data_acquisition/scheduler.py": [
        "asyncio",
        "typing",
        "pathlib",
        "json",
        "schedule",
        "structlog",
        "document_processor",
        "texas_comptroller_scraper",
        "datetime",
        "dataclasses",
        "county_appraisal_scraper"
      ],
      "services/data_acquisition/county_appraisal_scraper.py": [
        "asyncio",
        "typing",
        "urllib.parse",
        "aiohttp",
        "structlog",
        "texas_comptroller_scraper",
        "datetime",
        "bs4",
        "dataclasses",
        "re"
      ],
      "services/data_acquisition/texas_comptroller_scraper.py": [
        "asyncio",
        "pathlib",
        "typing",
        "urllib.parse",
        "aiohttp",
        "structlog",
        "hashlib",
        "datetime",
        "bs4",
        "dataclasses",
        "re"
      ],
      "services/data_acquisition/document_processor.py": [
        "asyncio",
        "aiofiles",
        "typing",
        "pathlib",
        "structlog",
        "hashlib",
        "html",
        "texas_comptroller_scraper",
        "datetime",
        "re",
        "dataclasses",
        "bs4",
        "PyPDF2",
        "mimetypes"
      ],
      "services/knowledge_base/legal_text_cleaner.py": [
        "asyncio",
        "typing",
        "structlog",
        "datetime",
        "re",
        "dataclasses"
      ],
      "services/knowledge_base/quality_validator.py": [
        "asyncio",
        "typing",
        "json",
        "content_processor",
        "enum",
        "structlog",
        "datetime",
        "re",
        "dataclasses",
        "services.vector_store.citation_tracker"
      ],
      "services/knowledge_base/content_processor.py": [
        "asyncio",
        "typing",
        "json",
        "pathlib",
        "legal_text_cleaner",
        "services.data_acquisition.document_processor",
        "taxonomy_builder",
        "structlog",
        "datetime",
        "re",
        "dataclasses",
        "services.vector_store.citation_tracker"
      ],
      "services/knowledge_base/taxonomy_builder.py": [
        "asyncio",
        "typing",
        "json",
        "pathlib",
        "structlog",
        "datetime",
        "re",
        "dataclasses",
        "collections"
      ],
      "services/communication/message_handler.py": [
        "json",
        "typing",
        "services.messaging.message_batching",
        "agents.core.property_tax_assistant_v3",
        "services.ticket_management.webhook_interceptor",
        "langchain_core.messages",
        "os",
        "aiohttp",
        "langchain_google_genai",
        "structlog",
        "hashlib",
        "config.settings",
        "datetime",
        "services.messaging.whatsapp_client",
        "hmac"
      ],
      "services/vector_store/semantic_search.py": [
        "asyncio",
        "typing",
        "json",
        "enum",
        "structlog",
        "langchain_core.documents",
        "datetime",
        "dataclasses",
        "property_tax_embeddings",
        "legal_document_indexer"
      ],
      "services/vector_store/citation_tracker.py": [
        "asyncio",
        "typing",
        "json",
        "pathlib",
        "structlog",
        "datetime",
        "re",
        "dataclasses",
        "collections"
      ],
      "services/vector_store/property_tax_embeddings.py": [
        "asyncio",
        "typing",
        "json",
        "pathlib",
        "os",
        "numpy",
        "structlog",
        "langchain_google_genai",
        "langchain_core.embeddings",
        "re",
        "dataclasses"
      ],
      "services/vector_store/legal_document_indexer.py": [
        "asyncio",
        "pathlib",
        "typing",
        "langchain_chroma",
        "services.data_acquisition.document_processor",
        "langchain.text_splitter",
        "os",
        "langchain_google_genai",
        "structlog",
        "langchain_core.embeddings",
        "langchain_core.documents",
        "datetime"
      ],
      "services/persistence/redis_conversation_store.py": [
        "json",
        "typing",
        "os",
        "structlog",
        "datetime",
        "redis"
      ],
      "services/persistence/repositories.py": [
        "sqlalchemy.ext.asyncio",
        "typing",
        "structlog",
        "database",
        "datetime",
        "sqlalchemy.orm",
        "sqlalchemy",
        "decimal"
      ],
      "services/persistence/analytics_repository.py": [
        "sqlalchemy.ext.asyncio",
        "typing",
        "repositories",
        "structlog",
        "database",
        "datetime",
        "sqlalchemy.orm",
        "sqlalchemy",
        "decimal"
      ],
      "services/persistence/database.py": [
        "sqlalchemy.ext.asyncio",
        "asyncio",
        "typing",
        "contextlib",
        "enum",
        "structlog",
        "config.settings",
        "sqlalchemy.sql",
        "datetime",
        "sqlalchemy.orm",
        "sqlalchemy",
        "decimal"
      ],
      "services/persistence/order_storage.py": [
        "json",
        "typing",
        "asyncio",
        "services.persistence.database",
        "structlog",
        "config.settings",
        "datetime",
        "services.persistence.repositories",
        "functools",
        "redis"
      ],
      "services/voice/voice_setup.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "os",
        "livekit",
        "datetime",
        "voice_config",
        "google.generativeai",
        "livekit.protocol.room",
        "argparse"
      ],
      "services/voice/livekit_data_bridge.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "os",
        "livekit",
        "datetime",
        "dataclasses",
        "livekit.protocol.models",
        "dotenv"
      ],
      "services/voice/voice_chat_state.py": [
        "asyncio",
        "typing",
        "json",
        "redis.asyncio",
        "structlog",
        "datetime",
        "redis",
        "services.messaging.whatsapp_client"
      ],
      "services/voice/property_tax_voice_agent.py": [
        "asyncio",
        "json",
        "logging",
        "typing",
        "os",
        "livekit.agents",
        "livekit",
        "sys",
        "agents.simplified.property_tax_rag_tool",
        "services.voice.livekit_data_bridge",
        "datetime",
        "services.messaging.whatsapp_client",
        "livekit.plugins.google.beta.realtime",
        "re",
        "agents.simplified.enhanced_workflow_tools",
        "services.voice.voice_chat_state",
        "dotenv"
      ],
      "services/voice/voice_config.py": [
        "typing",
        "langchain_core.messages",
        "os",
        "langchain_google_genai",
        "datetime",
        "dataclasses"
      ],
      "services/utils/date_parser.py": [
        "datetime",
        "re",
        "typing"
      ],
      "services/utils/__init__.py": [
        "retry_handler"
      ],
      "services/utils/retry_handler.py": [
        "asyncio",
        "typing",
        "structlog",
        "datetime",
        "time",
        "functools",
        "random"
      ],
      "services/payments/mock_razorpay.py": [
        "json",
        "typing",
        "os",
        "langchain_core.tools",
        "structlog",
        "hashlib",
        "uuid",
        "datetime",
        "hmac"
      ],
      "services/payments/razorpay_integration.py": [
        "razorpay",
        "json",
        "typing",
        "services.persistence.database",
        "os",
        "langchain_core.tools",
        "structlog",
        "hashlib",
        "datetime",
        "services.persistence.repositories",
        "services.payments.mock_razorpay",
        "hmac"
      ],
      "src/api/integrated_webhooks.py": [
        "asyncio",
        "services.persistence.database",
        "logging",
        "json",
        "services.persistence.redis_conversation_store",
        "services.messaging.message_batching",
        "os",
        "fastapi.responses",
        "fastapi",
        "datetime",
        "services.persistence.repositories",
        "services.utils.retry_handler",
        "services.messaging.modern_integrated_webhook_handler"
      ],
      "src/api/whatsapp_webhooks.py": [
        "agents.simplified.prescription_tools",
        "typing",
        "asyncio",
        "services.persistence.redis_conversation_store",
        "services.messaging.modern_integrated_webhook_handler",
        "services.messaging.whatsapp_image_handler",
        "structlog",
        "base64",
        "services.voice.livekit_data_bridge",
        "fastapi",
        "datetime",
        "fastapi.responses",
        "services.messaging.whatsapp_client",
        "services.voice.voice_chat_state",
        "services.messaging.property_tax_templates"
      ],
      "src/api/business_webhooks.py": [
        "services.communication.message_handler",
        "services.persistence.database",
        "logging",
        "services.messaging.message_batching",
        "os",
        "redis.asyncio",
        "fastapi.responses",
        "fastapi",
        "datetime",
        "services.persistence.repositories",
        "services.utils.retry_handler"
      ],
      "src/api/report_management.py": [
        "typing",
        "json",
        "services.persistence.database",
        "datetime",
        "fastapi",
        "fastapi.responses",
        "services.persistence.repositories",
        "pydantic"
      ],
      "testing/performance/stress_testing_framework.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "aiohttp",
        "enum",
        "time",
        "datetime",
        "dataclasses",
        "config.performance_thresholds",
        "psutil",
        "random"
      ],
      "testing/performance/load_testing_suite.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "aiohttp",
        "statistics",
        "time",
        "datetime",
        "dataclasses",
        "config.performance_thresholds",
        "concurrent.futures",
        "random"
      ],
      "tests/tools/test_lead_qualification_tool.py": [
        "asyncio",
        "agents.tools.lead_qualification_tool",
        "pytest",
        "unittest.mock"
      ],
      "tests/tools/test_runner.py": [
        "asyncio",
        "pathlib",
        "mock_data.property_records",
        "mock_data.tax_rates",
        "mock_data.consultant_schedules",
        "agents.tools.savings_calculator_tool",
        "sys",
        "pytest",
        "mock_data.tax_calendars",
        "time",
        "agents.tools.property_validation_tool",
        "agents.tools.deadline_tracking_tool",
        "mock_data.document_templates",
        "agents.tools.consultation_scheduling_tool",
        "mock_data.assessment_patterns",
        "agents.tools.document_processing_tool",
        "agents.tools.lead_qualification_tool"
      ],
      "tests/tools/test_property_validation_tool.py": [
        "asyncio",
        "pytest",
        "datetime",
        "agents.tools.property_validation_tool",
        "time",
        "unittest.mock"
      ],
      "tests/tools/test_savings_calculator_tool.py": [
        "asyncio",
        "agents.tools.savings_calculator_tool",
        "pytest",
        "datetime",
        "time",
        "unittest.mock"
      ],
      "demo/monitoring/demo_performance_tracker.py": [
        "asyncio",
        "typing",
        "json",
        "logging",
        "time",
        "datetime",
        "dataclasses",
        "collections"
      ],
      "demo/scenarios/escalation_scenarios.py": [
        "typing",
        "enum",
        "agents.core.conversation_flows",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/scenarios/__init__.py": [
        "exemption_application_scenarios",
        "typing",
        "payment_processing_scenarios",
        "enum",
        "assessment_appeal_scenarios",
        "basic_inquiry_scenarios",
        "escalation_scenarios",
        "multi_property_scenarios",
        "random"
      ],
      "demo/scenarios/assessment_appeal_scenarios.py": [
        "typing",
        "mock_data.property_records",
        "enum",
        "agents.core.conversation_flows",
        "datetime",
        "dataclasses",
        "mock_data.assessment_patterns",
        "random"
      ],
      "demo/scenarios/payment_processing_scenarios.py": [
        "typing",
        "mock_data.tax_rates",
        "mock_data.property_records",
        "enum",
        "agents.core.conversation_flows",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/scenarios/exemption_application_scenarios.py": [
        "typing",
        "mock_data.property_records",
        "enum",
        "agents.core.conversation_flows",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/scenarios/multi_property_scenarios.py": [
        "typing",
        "mock_data.property_records",
        "enum",
        "agents.core.conversation_flows",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/scenarios/basic_inquiry_scenarios.py": [
        "typing",
        "mock_data.tax_rates",
        "mock_data.property_records",
        "enum",
        "agents.core.conversation_flows",
        "mock_data.tax_calendars",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/presentations/executive_summary_generator.py": [
        "json",
        "typing",
        "logging",
        "seaborn",
        "enum",
        "io",
        "base64",
        "config.security_policies",
        "datetime",
        "dataclasses",
        "config.compliance_settings",
        "config.performance_thresholds",
        "matplotlib.pyplot"
      ],
      "demo/environment/demo_configuration.py": [
        "json",
        "typing",
        "pathlib",
        "logging",
        "os",
        "config.settings",
        "datetime",
        "dataclasses"
      ],
      "demo/environment/demo_reset_manager.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "pathlib",
        "services.persistence.database",
        "services.persistence.redis_conversation_store",
        "mock_data.property_records",
        "datetime",
        "psycopg2",
        "dataclasses",
        "demo.environment.demo_configuration",
        "mock_data.demo_customer_personas",
        "redis"
      ],
      "scripts/cleanup/clear-user-redis.py": [
        "sys",
        "argparse",
        "redis"
      ],
      "scripts/cleanup/clear-all-sessions.py": [
        "argparse",
        "redis"
      ],
      "scripts/cleanup/clear-all-data.py": [
        "asyncio",
        "pathlib",
        "services.persistence.database",
        "os",
        "redis.asyncio",
        "sys",
        "structlog",
        "config.settings",
        "sqlalchemy"
      ],
      "scripts/cleanup/clear-sessions-only.py": [
        "asyncio",
        "pathlib",
        "os",
        "redis.asyncio",
        "sys",
        "structlog",
        "config.settings"
      ]
    },
    "circular_dependencies": [],
    "import_statistics": {
      "total_files": 108,
      "total_imports": 889,
      "files_with_no_imports": 0,
      "max_imports_per_file": 25
    }
  },
  "usage_analysis": {
    "function_definitions": {
      "scripts/validate-workflow.py": [
        "main",
        "validate_workflow_paths",
        "validate_tool_implementation",
        "validate_data_structures",
        "validate_compliance_features"
      ],
      "scripts/test-workflow.py": [
        "test_payment_options",
        "test_advanced_panels",
        "test_sample_collection_scheduling",
        "test_report_status",
        "main",
        "test_order_creation",
        "test_cash_payment_confirmation",
        "test_workflow_state_transitions",
        "test_pin_validation"
      ],
      "scripts/test_date_intelligence.py": [
        "test_booking_scenarios",
        "test_natural_language_dates",
        "test_multiple_concurrent_bookings"
      ],
      "scripts/dependency_analyzer.py": [
        "DependencyAnalyzer._detect_circular_dependencies",
        "DependencyAnalyzer._generate_risk_assessment",
        "DependencyAnalyzer._calculate_import_statistics",
        "main",
        "ImportUsageVisitor.visit_Call",
        "ImportUsageVisitor.visit_Import",
        "ImportUsageVisitor.visit_FunctionDef",
        "ImportUsageVisitor.visit_ClassDef",
        "DependencyAnalyzer._analyze_package_usage",
        "DependencyAnalyzer._generate_usage_analysis",
        "ImportUsageVisitor.visit_ImportFrom",
        "DependencyAnalyzer.__init__",
        "DependencyAnalyzer._calculate_usage_frequency",
        "DependencyAnalyzer._analyze_file",
        "DependencyAnalyzer._identify_zero_usage",
        "ImportUsageVisitor.__init__",
        "ImportUsageVisitor.visit_AsyncFunctionDef",
        "DependencyAnalyzer.dfs",
        "DependencyAnalyzer._generate_statistics",
        "DependencyAnalyzer._generate_import_analysis",
        "DependencyAnalyzer.analyze_codebase"
      ],
      "scripts/test-mock-payment.py": [
        "test_mock_payment_link_creation",
        "main",
        "test_integration_with_razorpay_service",
        "test_mock_security_features",
        "test_mock_payment_verification",
        "test_mock_payment_url_format"
      ],
      "scripts/test_intelligent_booking.py": [
        "test_intelligent_booking"
      ],
      "tests/run_tests.py": [
        "run_tests",
        "check_dependencies",
        "main",
        "run_command"
      ],
      "tests/conftest.py": [
        "temp_db",
        "sample_messages",
        "config_json",
        "engine_api",
        "create_test_message",
        "memory_state_manager",
        "message_registry",
        "metrics_collector",
        "config_generator",
        "admin_user",
        "config_yaml",
        "wait_for_async",
        "test_requirements",
        "test_user",
        "analytics_engine",
        "event_loop",
        "webhook_data",
        "invalid_configs",
        "sqlite_state_manager",
        "auth_manager",
        "sample_config"
      ],
      "config/response_templates.py": [
        "get_error_message",
        "get_scenario_from_message",
        "format_response_with_context",
        "get_template",
        "get_greeting_template",
        "detect_language_from_message",
        "get_legal_disclaimer"
      ],
      "config/ai_configuration.py": [
        "get_model_for_use_case",
        "PropertyTaxAIConfig.get_model_config",
        "validate_legal_boundaries",
        "add_legal_disclaimer",
        "PropertyTaxAIConfig.get_confidence_level",
        "PropertyTaxAIConfig.format_response_with_disclaimers",
        "PropertyTaxAIConfig.get_legal_disclaimer",
        "get_ai_config",
        "PropertyTaxAIConfig.is_within_legal_boundaries",
        "should_escalate_conversation",
        "PropertyTaxAIConfig.get_domain_config",
        "PropertyTaxAIConfig.should_escalate",
        "PropertyTaxAIConfig.validate_response_length",
        "PropertyTaxAIConfig.__init__",
        "PropertyTaxAIConfig.get_texas_property_tax_info"
      ],
      "config/compliance_settings.py": [
        "TDLRComplianceSettings.validate_compliance_configuration",
        "TDLRComplianceSettings.get_compliance_summary",
        "TDLRComplianceSettings.is_restricted_information",
        "TDLRComplianceSettings.get_retention_period_for_classification",
        "TDLRComplianceSettings.is_public_record_category"
      ],
      "config/settings.py": [
        "Settings.print_config",
        "Settings.validate"
      ],
      "config/performance_thresholds.py": [
        "PerformanceThresholds.validate_performance_result",
        "PerformanceThresholds.get_scenario_configuration_summary",
        "PerformanceThresholds.get_load_test_config",
        "PerformanceThresholds.get_threshold"
      ],
      "config/security_policies.py": [
        "SecurityPolicies.get_policies_by_framework",
        "SecurityPolicies.get_mandatory_policies",
        "SecurityPolicies.validate_security_configuration",
        "SecurityPolicies.get_security_configuration",
        "SecurityPolicies.get_policy_by_id",
        "SecurityPolicies.get_policies_by_category",
        "SecurityPolicies.get_policies_by_severity"
      ],
      "src/main.py": [
        "test_whatsapp_api",
        "startup_event",
        "global_exception_handler",
        "root"
      ],
      "services/date_intelligence.py": [
        "DateIntelligenceService._get_next_business_day",
        "DateIntelligenceService._parse_relative_weeks",
        "DateIntelligenceService.get_current_time_info",
        "parse_date_intelligently",
        "DateIntelligenceService.__init__",
        "DateIntelligenceService._is_business_hours",
        "get_current_time_info",
        "DateIntelligenceService.parse_date_intelligently",
        "DateIntelligenceService._validate_booking_date",
        "DateIntelligenceService._create_error_response",
        "DateIntelligenceService._parse_specific_dates",
        "DateIntelligenceService._parse_named_days",
        "DateIntelligenceService._is_business_day",
        "DateIntelligenceService._parse_relative_dates",
        "DateIntelligenceService._get_available_time_slots",
        "validate_booking_constraints"
      ],
      "mock_data/consultant_schedules.py": [
        "find_available_time_slots",
        "generate_consultant_schedule",
        "get_consultant_recommendations",
        "calculate_optimal_meeting_times"
      ],
      "mock_data/tax_rates.py": [
        "calculate_exemption_value",
        "get_county_tax_info",
        "calculate_total_tax_rate",
        "get_exemption_info",
        "get_available_exemptions",
        "estimate_appeal_outcome"
      ],
      "mock_data/demo_customer_personas.py": [
        "DemoCustomerPersonas.get_personas_by_tech_comfort",
        "DemoCustomerPersonas._create_first_time_homeowner_personas",
        "DemoCustomerPersonas.get_personas_summary",
        "DemoCustomerPersonas._create_dispute_personas",
        "DemoCustomerPersonas.get_persona_by_id",
        "DemoCustomerPersonas._create_multi_property_personas",
        "DemoCustomerPersonas._create_agricultural_personas",
        "DemoCustomerPersonas.get_all_personas",
        "DemoCustomerPersonas.get_persona_conversation_starter",
        "DemoCustomerPersonas.get_personas_by_type",
        "DemoCustomerPersonas.get_random_persona",
        "DemoCustomerPersonas._create_commercial_personas",
        "DemoCustomerPersonas._create_personas",
        "DemoCustomerPersonas._create_senior_citizen_personas",
        "DemoCustomerPersonas.__init__"
      ],
      "mock_data/tax_calendars.py": [
        "categorize_deadline",
        "get_notification_preferences",
        "calculate_payment_amount",
        "get_county_calendar",
        "get_current_deadlines",
        "get_deadline_description"
      ],
      "mock_data/property_records.py": [
        "generate_property_characteristics",
        "find_property_by_address",
        "find_property_by_parcel_id",
        "generate_property_records",
        "search_properties_by_criteria",
        "generate_address",
        "get_property_statistics",
        "generate_assessment_history",
        "generate_parcel_id"
      ],
      "mock_data/document_templates.py": [
        "validate_extracted_data",
        "get_document_type_from_content",
        "generate_mock_ocr_response",
        "generate_sample_document_data"
      ],
      "mock_data/assessment_patterns.py": [
        "calculate_assessment_increase_percentage",
        "get_value_range_category",
        "calculate_estimated_savings",
        "get_historical_trends",
        "get_increase_category",
        "determine_market_segment",
        "estimate_appeal_success_probability"
      ],
      "compliance/tdlr/audit_trail_generator.py": [
        "AuditTrailGenerator.__init__",
        "AuditTrailGenerator.log_data_access",
        "AuditTrailGenerator.log_privacy_request",
        "AuditTrailGenerator.generate_compliance_audit_report",
        "AuditTrailGenerator.log_property_tax_operation",
        "AuditTrailGenerator.verify_audit_integrity",
        "AuditTrailGenerator._export_to_csv",
        "AuditTrailGenerator.export_audit_trail",
        "AuditTrailGenerator.log_audit_event",
        "AuditTrailGenerator._calculate_event_checksum",
        "AuditTrailGenerator.log_data_modification",
        "AuditTrailGenerator.log_user_authentication",
        "AuditTrailGenerator.log_security_event",
        "AuditTrailGenerator.log_compliance_violation",
        "AuditTrailGenerator.search_audit_events",
        "AuditTrailGenerator._update_audit_chain"
      ],
      "compliance/tdlr/privacy_compliance_validator.py": [
        "PrivacyComplianceValidator._handle_data_erasure_request",
        "PrivacyComplianceValidator._check_encryption_compliance",
        "PrivacyComplianceValidator._get_required_fields_for_context",
        "PrivacyComplianceValidator.generate_compliance_report",
        "PrivacyComplianceValidator._is_data_encrypted",
        "PrivacyComplianceValidator.process_data_subject_request",
        "PrivacyComplianceValidator._check_pii_exposure",
        "PrivacyComplianceValidator.__init__",
        "PrivacyComplianceValidator._handle_data_portability_request",
        "PrivacyComplianceValidator._check_retention_compliance",
        "PrivacyComplianceValidator._handle_data_rectification_request",
        "PrivacyComplianceValidator._check_access_control_compliance",
        "PrivacyComplianceValidator._check_data_minimization",
        "PrivacyComplianceValidator._classify_data",
        "PrivacyComplianceValidator._extract_data_subject_id",
        "PrivacyComplianceValidator.validate_data_handling",
        "PrivacyComplianceValidator._handle_data_access_request"
      ],
      "compliance/tdlr/public_records_handler.py": [
        "PublicRecordsHandler.process_public_record_request",
        "PublicRecordsHandler._calculate_average_response_time",
        "PublicRecordsHandler.generate_public_records_report",
        "PublicRecordsHandler.__init__",
        "PublicRecordsHandler._extract_keywords_from_description",
        "PublicRecordsHandler._initialize_default_redaction_rules",
        "PublicRecordsHandler._identify_responsive_records",
        "PublicRecordsHandler._initiate_request_review",
        "PublicRecordsHandler.submit_public_record_request",
        "PublicRecordsHandler.validate_compliance_with_texas_gov_code_552",
        "PublicRecordsHandler._apply_redactions",
        "PublicRecordsHandler.handle_request_appeal",
        "PublicRecordsHandler._classify_record_for_public_access"
      ],
      "compliance/tdlr/record_retention_manager.py": [
        "RecordRetentionManager._get_default_policy",
        "RecordRetentionManager.remove_legal_hold",
        "RecordRetentionManager.get_retention_status",
        "RecordRetentionManager._archive_record",
        "RecordRetentionManager._anonymize_record",
        "RecordRetentionManager.__init__",
        "RecordRetentionManager._log_retention_event",
        "RecordRetentionManager.generate_retention_report",
        "RecordRetentionManager.update_record_access",
        "RecordRetentionManager.apply_legal_hold",
        "RecordRetentionManager._apply_retention_action",
        "RecordRetentionManager.register_record",
        "RecordRetentionManager._initialize_default_policies",
        "RecordRetentionManager._delete_record",
        "RecordRetentionManager._find_applicable_policy",
        "RecordRetentionManager._calculate_retention_deadline",
        "RecordRetentionManager.enforce_retention_policies",
        "test_retention_manager"
      ],
      "approval/workflows/stakeholder_approval_manager.py": [
        "StakeholderApprovalManager._initialize_approval_requirements",
        "StakeholderApprovalManager._send_approval_notification",
        "StakeholderApprovalManager.submit_stakeholder_approval",
        "StakeholderApprovalManager.escalate_approval",
        "StakeholderApprovalManager.__init__",
        "StakeholderApprovalManager.generate_approval_dashboard",
        "StakeholderApprovalManager.request_approval_review",
        "StakeholderApprovalManager._update_workflow_status",
        "StakeholderApprovalManager._get_risk_indicators",
        "StakeholderApprovalManager.get_workflow_status",
        "StakeholderApprovalManager.export_approval_report",
        "StakeholderApprovalManager.create_approval_workflow",
        "StakeholderApprovalManager.check_approval_deadlines",
        "StakeholderApprovalManager._get_next_actions",
        "StakeholderApprovalManager._find_stakeholder_by_role",
        "StakeholderApprovalManager._initialize_stakeholder_profiles"
      ],
      "security/audit/vulnerability_scanner.py": [
        "VulnerabilityScanner.run_comprehensive_scan",
        "DynamicAnalysisScanner._test_session_management",
        "StaticAnalysisScanner._check_insecure_configurations",
        "run_vulnerability_scan",
        "StaticAnalysisScanner._check_dom_vulnerabilities",
        "DynamicAnalysisScanner._test_authentication_vulnerabilities",
        "StaticAnalysisScanner.__init__",
        "StaticAnalysisScanner._scan_config_file",
        "StaticAnalysisScanner._scan_python_file",
        "StaticAnalysisScanner._check_hardcoded_secrets",
        "DynamicAnalysisScanner.scan_web_application",
        "StaticAnalysisScanner._check_sql_injection_patterns",
        "StaticAnalysisScanner._check_insecure_settings",
        "DynamicAnalysisScanner._test_input_validation",
        "VulnerabilityScanner.export_scan_results",
        "VulnerabilityScanner.__init__",
        "StaticAnalysisScanner._find_files",
        "StaticAnalysisScanner._scan_javascript_file",
        "VulnerabilityScanner._generate_vulnerability_summary",
        "StaticAnalysisScanner._check_command_injection_patterns",
        "StaticAnalysisScanner._check_exposed_secrets_in_config",
        "DynamicAnalysisScanner.__init__",
        "DynamicAnalysisScanner._test_security_headers",
        "StaticAnalysisScanner.scan_code_directory",
        "VulnerabilityScanner._generate_security_recommendations",
        "StaticAnalysisScanner._check_xss_patterns",
        "VulnerabilityScanner._check_compliance_status"
      ],
      "agents/simplified/property_document_tools.py": [
        "analyze_prescription_image_tool_sync",
        "create_prescription_workflow_tools",
        "confirm_prescription_booking",
        "analyze_property_document_tool_async",
        "run_in_thread"
      ],
      "agents/simplified/property_tax_rag_tool.py": [
        "property_tax_assessment_recommendation_sync",
        "property_tax_assessment_recommendation_async",
        "run_in_thread"
      ],
      "agents/simplified/ticket_tools.py": [
        "check_ticket_status",
        "check_ticket_status_async",
        "create_support_ticket",
        "create_support_ticket_async"
      ],
      "agents/simplified/simplified_agent_v2.py": [
        "process_customer_message"
      ],
      "agents/simplified/enhanced_workflow_tools.py": [
        "validate_zip_code",
        "_create_order_async",
        "_suggest_services_async",
        "create_order",
        "confirm_order_cash_payment",
        "_check_panel_pricing",
        "suggest_assessment_services",
        "schedule_sample_collection",
        "create_payment_link",
        "check_report_status",
        "verify_customer_payment"
      ],
      "agents/core/guardrails.py": [
        "PropertyTaxGuardrails.check_escalation_needed",
        "validate_user_input",
        "PropertyTaxGuardrails.__init__",
        "PropertyTaxGuardrails._has_disclaimer",
        "PropertyTaxGuardrails.analyze_ai_response",
        "PropertyTaxGuardrails._add_limitation_clarifications",
        "GuardrailResult.__post_init__",
        "PropertyTaxGuardrails.analyze_user_input",
        "PropertyTaxGuardrails._get_safe_response",
        "PropertyTaxGuardrails._remove_guarantee_language",
        "PropertyTaxGuardrails.apply_response_modifications",
        "get_guardrails",
        "apply_guardrails",
        "should_escalate_to_human",
        "validate_ai_response"
      ],
      "agents/core/conversation_flows.py": [
        "PropertyTaxConversationFlow._identify_concern_type",
        "PropertyTaxConversationFlow._extract_booking_information",
        "start_property_tax_conversation",
        "PropertyTaxConversationFlow._get_missing_information",
        "PropertyTaxConversationFlow._request_missing_information",
        "PropertyTaxConversationFlow._generate_recommendations",
        "PropertyTaxConversationFlow.start_conversation",
        "PropertyTaxConversationFlow._get_missing_booking_information",
        "PropertyTaxConversationFlow.end_conversation",
        "PropertyTaxConversationFlow._handle_booking_details",
        "PropertyTaxConversationFlow._handle_problem_identification",
        "ConversationContext.__post_init__",
        "process_property_tax_message",
        "PropertyTaxConversationFlow._handle_recommendation",
        "PropertyTaxConversationFlow._generate_greeting_response",
        "PropertyTaxConversationFlow._extract_information_from_message",
        "PropertyTaxConversationFlow.process_message",
        "PropertyTaxConversationFlow._get_information_request",
        "PropertyTaxConversationFlow.__init__",
        "get_conversation_flow_manager",
        "PropertyTaxConversationFlow._handle_information_gathering",
        "PropertyTaxConversationFlow.get_conversation_context",
        "PropertyTaxConversationFlow._process_by_stage",
        "PropertyTaxConversationFlow._start_booking_process",
        "PropertyTaxConversationFlow._get_concern_acknowledgment",
        "PropertyTaxConversationFlow._handle_payment_processing"
      ],
      "agents/core/property_tax_assistant_v3.py": [
        "_store_conversation_history",
        "reset_property_tax_assistant",
        "process_property_tax_message",
        "create_property_tax_assistant",
        "WorkflowAssistant.__init__",
        "PropertyTaxToolNode.__call__",
        "_store_property_document_conversation",
        "WorkflowAssistant.__call__",
        "get_property_tax_assistant",
        "_detect_conversation_stage",
        "PropertyTaxToolNode.__init__",
        "escalate_to_human_agent",
        "_handle_property_document_confirmation",
        "_detect_language"
      ],
      "agents/tools/document_processing_tool.py": [
        "process_multiple_documents",
        "extract_property_summary",
        "calculate_days_until_date",
        "generate_action_suggestions",
        "get_supported_document_types",
        "enrich_extracted_data",
        "extract_from_plain_text",
        "document_processing_tool",
        "compare_document_values",
        "clean_extracted_value",
        "simulate_ocr_processing",
        "get_document_type_info"
      ],
      "agents/tools/savings_calculator_tool.py": [
        "generate_appeal_scenarios",
        "calculate_multi_year_projections",
        "analyze_exemption_opportunities",
        "savings_calculator_tool",
        "calculate_annual_tax",
        "compare_county_rates"
      ],
      "agents/tools/lead_qualification_tool.py": [
        "filter_leads_by_criteria",
        "lead_qualification_tool",
        "determine_quality_tier",
        "qualify_multiple_leads",
        "get_lead_recommendations_summary",
        "generate_lead_report",
        "generate_sales_recommendations",
        "calculate_qualification_score"
      ],
      "agents/tools/property_validation_tool.py": [
        "property_validation_tool",
        "get_supported_counties",
        "detect_search_type",
        "normalize_address",
        "get_property_type_info",
        "format_property_response",
        "validate_multiple_properties"
      ],
      "agents/tools/consultation_scheduling_tool.py": [
        "validate_appointment_inputs",
        "cancel_appointment",
        "consultation_scheduling_tool",
        "get_consultant_availability_summary",
        "find_group_consultation_times",
        "generate_appointment_confirmation_details",
        "reschedule_appointment",
        "get_appointment_preparation_checklist",
        "calculate_appointment_pricing",
        "find_best_consultant_match"
      ],
      "agents/tools/deadline_tracking_tool.py": [
        "deadline_tracking_tool",
        "generate_quick_actions",
        "parse_date_safely",
        "get_county_comparison",
        "schedule_notifications",
        "get_deadline_calendar_view",
        "calculate_urgency_score",
        "calculate_penalty_savings",
        "generate_notification_message"
      ],
      "services/ticket_management/webhook_interceptor.py": [
        "get_webhook_interceptor",
        "WebhookInterceptor.handle_customer_message",
        "WebhookInterceptor.should_intercept",
        "WebhookInterceptor.initialize",
        "WebhookInterceptor.get_agent_response",
        "WebhookInterceptor.__init__",
        "WebhookInterceptor.send_agent_response"
      ],
      "services/ticket_management/ticket_service.py": [
        "TicketService.create_ticket",
        "TicketService.update_ticket_status",
        "TicketService.__init__",
        "get_ticket_service",
        "TicketService.get_ticket",
        "TicketService.generate_ticket_id",
        "TicketService._determine_priority",
        "TicketService.get_customer_tickets",
        "TicketService.add_message",
        "TicketService.assign_agent",
        "TicketService._determine_category",
        "TicketService.check_active_ticket",
        "TicketService.initialize",
        "TicketService.get_ticket_messages"
      ],
      "services/ticket_management/models.py": [
        "SupportTicket.to_dict",
        "AgentSession.to_dict",
        "TicketMessage.to_dict"
      ],
      "services/messaging/modern_integrated_webhook_handler.py": [
        "ModernIntegratedWebhookHandler._handle_payment_initiation",
        "ModernIntegratedWebhookHandler._handle_interactive_message",
        "ModernIntegratedWebhookHandler._handle_consultation_scheduling",
        "ModernIntegratedWebhookHandler._send_whatsapp_response",
        "ModernIntegratedWebhookHandler._handle_expert_consultation",
        "ModernIntegratedWebhookHandler._get_session_id",
        "ModernIntegratedWebhookHandler.handle_webhook",
        "ModernIntegratedWebhookHandler.get_handler_stats",
        "ModernIntegratedWebhookHandler._process_converted_interactive",
        "ModernIntegratedWebhookHandler._handle_status_update",
        "ModernIntegratedWebhookHandler.__init__",
        "ModernIntegratedWebhookHandler.handle_message",
        "ModernIntegratedWebhookHandler._handle_media_message",
        "ModernIntegratedWebhookHandler._try_send_interactive_response",
        "ModernIntegratedWebhookHandler._handle_whatsapp_message",
        "ModernIntegratedWebhookHandler.verify_webhook"
      ],
      "services/messaging/whatsapp_client.py": [
        "WhatsAppClient.get_business_profile",
        "WhatsAppClient.close",
        "WhatsAppClient.__init__",
        "WhatsAppClient.verify_webhook",
        "WhatsAppClient.is_configured",
        "WhatsAppClient.parse_status_update",
        "WhatsAppClient.get_message_templates",
        "WhatsAppClient.parse_webhook_message",
        "WhatsAppClient.verify_webhook_signature",
        "WhatsAppClient.get_business_configuration",
        "get_whatsapp_client",
        "cleanup_whatsapp_client",
        "WhatsAppClient.send_text_message",
        "WhatsAppClient._get_messaging_limit",
        "WhatsAppClient.send_interactive_message",
        "WhatsAppClient._get_session",
        "WhatsAppClient.update_business_profile",
        "WhatsAppClient.send_template_message"
      ],
      "services/messaging/whatsapp_image_handler.py": [
        "WhatsAppImageHandler._download_media_file",
        "WhatsAppImageHandler.process_whatsapp_image_message",
        "WhatsAppImageHandler._determine_image_format_from_data",
        "WhatsAppImageHandler._get_media_url",
        "WhatsAppImageHandler.is_likely_prescription",
        "WhatsAppImageHandler.__init__",
        "WhatsAppImageHandler.download_image_from_whatsapp_message",
        "get_whatsapp_image_handler"
      ],
      "services/messaging/property_tax_templates.py": [
        "PropertyTaxTemplates.send_property_lookup_result",
        "get_property_tax_templates",
        "PropertyTaxTemplates.send_payment_reminder",
        "PropertyTaxTemplates.send_consultation_confirmation",
        "PropertyTaxTemplates.__init__",
        "PropertyTaxTemplates.send_assessment_notification",
        "PropertyTaxTemplates.get_template_list",
        "PropertyTaxTemplates.send_appeal_document_checklist",
        "PropertyTaxTemplates.send_payment_options",
        "PropertyTaxTemplates.send_quick_actions_buttons",
        "PropertyTaxTemplates.send_service_options_menu",
        "PropertyTaxTemplates.send_appeal_guidance"
      ],
      "services/messaging/message_batching.py": [
        "MessageBatcher._schedule_batch_processing",
        "MessageBatcher._process_single_message",
        "MessageBatcher._should_process_immediately",
        "MessageBatcher.process_message",
        "MessageBatch.add_message",
        "MessageBatcher._ensure_cleanup_task",
        "MessageBatcher.add_message_handler",
        "MessageBatcher.force_process_user_batch",
        "MessageBatcher.__init__",
        "MessageBatcher._cleanup_expired_batches",
        "MessageBatcher.get_batch_stats",
        "MessageBatcher._process_batch",
        "MessageBatch.is_expired",
        "MessageBatch.get_combined_text",
        "MessageBatcher._handle_message_internal",
        "MessageBatcher.shutdown",
        "MessageBatch.get_latest_message"
      ],
      "services/data_acquisition/scheduler.py": [
        "DataCollectionScheduler.get_job_status",
        "DataCollectionScheduler._setup_default_jobs",
        "DataCollectionScheduler._schedule_retry",
        "stop_data_collection_scheduler",
        "DataCollectionScheduler.add_job",
        "start_data_collection_scheduler",
        "get_scheduler",
        "DataCollectionScheduler._run_job_async",
        "DataCollectionScheduler._check_monthly_job",
        "DataCollectionScheduler._schedule_job",
        "DataCollectionScheduler.get_collection_history",
        "DataCollectionScheduler._save_documents",
        "DataCollectionScheduler._run_comptroller_collection",
        "DataCollectionScheduler.stop_scheduler",
        "test_scheduler",
        "DataCollectionScheduler._run_daily_comptroller_check",
        "DataCollectionScheduler._save_collection_stats",
        "DataCollectionScheduler._run_county_collection",
        "DataCollectionScheduler.start_scheduler",
        "DataCollectionScheduler._run_job_wrapper",
        "DataCollectionScheduler.__init__"
      ],
      "services/data_acquisition/county_appraisal_scraper.py": [
        "CountyAppraisalScraper.scrape_county",
        "CountyAppraisalScraper.scrape_county_page",
        "CountyAppraisalScraper._extract_county_citations",
        "CountyAppraisalScraper.scrape_all_counties",
        "CountyAppraisalScraper._classify_county_document_type",
        "CountyAppraisalScraper.__aexit__",
        "CountyAppraisalScraper.scrape_with_semaphore",
        "CountyAppraisalScraper.find_property_tax_sections",
        "CountyAppraisalScraper._extract_content",
        "CountyAppraisalScraper._is_county_property_tax_link",
        "scrape_county_appraisal_data",
        "CountyAppraisalScraper.__init__",
        "CountyAppraisalScraper._extract_title",
        "CountyAppraisalScraper.__aenter__",
        "test_county_scraper"
      ],
      "services/data_acquisition/texas_comptroller_scraper.py": [
        "TexasComptrollerScraper.scrape_page",
        "TexasComptrollerScraper.__init__",
        "TexasComptrollerScraper.scrape_with_semaphore",
        "ScrapedDocument.__post_init__",
        "TexasComptrollerScraper._extract_effective_date",
        "TexasComptrollerScraper.__aenter__",
        "TexasComptrollerScraper.scrape_linked_pages",
        "TexasComptrollerScraper._classify_document_type",
        "test_scraper",
        "TexasComptrollerScraper._extract_title",
        "TexasComptrollerScraper._extract_content",
        "scrape_texas_comptroller_data",
        "TexasComptrollerScraper._is_property_tax_related",
        "TexasComptrollerScraper._extract_section_number",
        "TexasComptrollerScraper.scrape_all_property_tax_content",
        "TexasComptrollerScraper.__aexit__",
        "TexasComptrollerScraper._extract_citations"
      ],
      "services/data_acquisition/document_processor.py": [
        "DocumentProcessor._clean_faq_text",
        "DocumentProcessor._extract_deadlines",
        "DocumentProcessor.generate_processing_notes",
        "DocumentProcessor._chunk_form_text",
        "DocumentProcessor._extract_property_types",
        "DocumentProcessor._extract_tax_concepts",
        "DocumentProcessor.chunk_content",
        "DocumentProcessor.clean_content",
        "DocumentProcessor._clean_form_text",
        "DocumentProcessor._chunk_legal_text",
        "test_processor",
        "DocumentProcessor._chunk_faq_text",
        "DocumentProcessor._extract_legal_concepts",
        "DocumentProcessor._clean_legal_text",
        "DocumentProcessor.calculate_quality_score",
        "DocumentProcessor._remove_common_artifacts",
        "DocumentProcessor.process_document",
        "DocumentProcessor.process_documents_batch",
        "process_scraped_documents",
        "DocumentProcessor._chunk_generic_text",
        "DocumentProcessor._extract_fee_amounts",
        "DocumentProcessor.extract_metadata",
        "DocumentProcessor.__init__",
        "DocumentProcessor.process_with_semaphore"
      ],
      "services/knowledge_base/legal_text_cleaner.py": [
        "LegalTextCleaner.__init__",
        "LegalTextCleaner._build_terminology_mappings",
        "LegalTextCleaner._standardize_terminology",
        "LegalTextCleaner._build_formatting_patterns",
        "LegalTextCleaner.clean_form_text",
        "test_cleaner",
        "LegalTextCleaner._normalize_citations",
        "LegalTextCleaner.clean_procedural_text",
        "LegalTextCleaner._build_cleaning_rules",
        "LegalTextCleaner.clean_legal_text",
        "LegalTextCleaner._format_form_text",
        "LegalTextCleaner._apply_document_specific_formatting",
        "LegalTextCleaner._assess_text_structure_quality",
        "LegalTextCleaner._build_citation_patterns",
        "LegalTextCleaner._format_procedure_text",
        "LegalTextCleaner.get_cleaning_suggestions",
        "LegalTextCleaner._format_statute_text",
        "LegalTextCleaner.clean_faq_text",
        "LegalTextCleaner.clean_general_text",
        "LegalTextCleaner._apply_cleaning_pipeline",
        "LegalTextCleaner._format_faq_text",
        "LegalTextCleaner._calculate_cleaning_quality_score"
      ],
      "services/knowledge_base/quality_validator.py": [
        "get_quality_validator",
        "PropertyTaxQualityValidator.validate_required_elements",
        "PropertyTaxQualityValidator._generate_recommendations",
        "PropertyTaxQualityValidator.validate_definitions",
        "PropertyTaxQualityValidator.validate_structure",
        "PropertyTaxQualityValidator.get_validation_summary",
        "PropertyTaxQualityValidator.validate_readability",
        "PropertyTaxQualityValidator.validate_content_length",
        "PropertyTaxQualityValidator._calculate_quality_metrics",
        "PropertyTaxQualityValidator.validate_knowledge_batch",
        "PropertyTaxQualityValidator.validate_terminology",
        "PropertyTaxQualityValidator._build_validation_rules",
        "PropertyTaxQualityValidator._build_quality_thresholds",
        "PropertyTaxQualityValidator.__init__",
        "PropertyTaxQualityValidator.validate_currency",
        "test_validator",
        "PropertyTaxQualityValidator._build_accuracy_patterns",
        "PropertyTaxQualityValidator.validate_citations",
        "PropertyTaxQualityValidator._run_validation_rule",
        "PropertyTaxQualityValidator.validate_factual_accuracy",
        "PropertyTaxQualityValidator.initialize",
        "PropertyTaxQualityValidator._calculate_overall_score",
        "PropertyTaxQualityValidator.validate_legal_consistency",
        "PropertyTaxQualityValidator.validate_knowledge_entry",
        "PropertyTaxQualityValidator.validate_authority",
        "PropertyTaxQualityValidator.validate_cross_references"
      ],
      "services/knowledge_base/content_processor.py": [
        "PropertyTaxContentProcessor._enhance_knowledge_entry",
        "PropertyTaxContentProcessor.initialize",
        "PropertyTaxContentProcessor._extract_form_sections",
        "PropertyTaxContentProcessor._process_form_document",
        "get_content_processor",
        "PropertyTaxContentProcessor._build_authority_chains",
        "PropertyTaxContentProcessor._extract_procedure_steps",
        "PropertyTaxContentProcessor._process_procedure_document",
        "PropertyTaxContentProcessor._analyze_statute_structure",
        "PropertyTaxContentProcessor.process_documents_to_knowledge_base",
        "PropertyTaxContentProcessor._process_statute_document",
        "test_processor",
        "PropertyTaxContentProcessor._assess_difficulty_level",
        "PropertyTaxContentProcessor._process_general_document",
        "PropertyTaxContentProcessor._determine_relationship_type",
        "PropertyTaxContentProcessor.get_knowledge_base_stats",
        "PropertyTaxContentProcessor._find_related_entries",
        "PropertyTaxContentProcessor._extract_qa_pairs",
        "KnowledgeEntry.__post_init__",
        "PropertyTaxContentProcessor._build_quality_criteria",
        "PropertyTaxContentProcessor._generate_title_from_content",
        "PropertyTaxContentProcessor.__init__",
        "PropertyTaxContentProcessor._process_single_document",
        "PropertyTaxContentProcessor._build_knowledge_graph",
        "PropertyTaxContentProcessor._build_content_templates",
        "PropertyTaxContentProcessor.save_knowledge_base",
        "PropertyTaxContentProcessor._process_faq_document"
      ],
      "services/knowledge_base/taxonomy_builder.py": [
        "PropertyTaxTaxonomyBuilder._add_taxonomy_node",
        "PropertyTaxTaxonomyBuilder.__init__",
        "PropertyTaxTaxonomyBuilder._build_legal_framework_taxonomy",
        "PropertyTaxTaxonomyBuilder._build_exemptions_taxonomy",
        "PropertyTaxTaxonomyBuilder.load_taxonomy",
        "PropertyTaxTaxonomyBuilder._build_appraisal_taxonomy",
        "PropertyTaxTaxonomyBuilder.get_depth",
        "PropertyTaxTaxonomyBuilder._identify_subtopics",
        "PropertyTaxTaxonomyBuilder.build_topic_hierarchy",
        "PropertyTaxTaxonomyBuilder._generate_classification_reasoning",
        "PropertyTaxTaxonomyBuilder._build_property_types_taxonomy",
        "PropertyTaxTaxonomyBuilder._build_appeals_taxonomy",
        "test_taxonomy",
        "PropertyTaxTaxonomyBuilder.get_category_suggestions",
        "PropertyTaxTaxonomyBuilder._build_procedures_taxonomy",
        "PropertyTaxTaxonomyBuilder.save_taxonomy",
        "PropertyTaxTaxonomyBuilder.initialize",
        "PropertyTaxTaxonomyBuilder._load_classification_patterns",
        "PropertyTaxTaxonomyBuilder._build_authorities_taxonomy",
        "PropertyTaxTaxonomyBuilder.categorize_content",
        "PropertyTaxTaxonomyBuilder._build_collection_taxonomy",
        "PropertyTaxTaxonomyBuilder._build_property_taxation_taxonomy",
        "PropertyTaxTaxonomyBuilder._calculate_max_depth",
        "PropertyTaxTaxonomyBuilder.get_taxonomy_stats",
        "PropertyTaxTaxonomyBuilder._build_base_taxonomy"
      ],
      "services/communication/message_handler.py": [
        "UniversalMessageHandler._get_session_id",
        "UniversalMessageHandler.verify_webhook_signature",
        "UniversalMessageHandler._intelligent_message_preparation",
        "UniversalMessageHandler.handle_incoming_message",
        "UniversalMessageHandler._prepare_message_text",
        "UniversalMessageHandler._parse_messaging_event",
        "UniversalMessageHandler._send_response",
        "UniversalMessageHandler.__init__",
        "UniversalMessageHandler._interpret_quick_reply",
        "UniversalMessageHandler._handle_batched_message",
        "fetch_instagram_user_info",
        "UniversalMessageHandler.get_handler_statistics"
      ],
      "services/vector_store/semantic_search.py": [
        "PropertyTaxSemanticSearch._document_matches_scope",
        "create_property_tax_search",
        "PropertyTaxSemanticSearch._rank_semantic_results",
        "PropertyTaxSemanticSearch._rank_keyword_results",
        "PropertyTaxSemanticSearch._expand_query_with_property_tax_terms",
        "PropertyTaxSemanticSearch._generate_legal_context",
        "PropertyTaxSemanticSearch._apply_filters",
        "PropertyTaxSemanticSearch._rank_legal_reasoning_results",
        "PropertyTaxSemanticSearch._extract_citation_references",
        "PropertyTaxSemanticSearch._legal_reasoning_search",
        "PropertyTaxSemanticSearch._keyword_search",
        "PropertyTaxSemanticSearch._build_concept_hierarchies",
        "PropertyTaxSemanticSearch._calculate_keyword_relevance_score",
        "test_semantic_search",
        "PropertyTaxSemanticSearch._semantic_search",
        "PropertyTaxSemanticSearch._execute_search_by_type",
        "PropertyTaxSemanticSearch.__init__",
        "PropertyTaxSemanticSearch._generate_relevance_explanation",
        "PropertyTaxSemanticSearch.search",
        "PropertyTaxSemanticSearch._apply_final_filtering",
        "PropertyTaxSemanticSearch._scope_to_document_type",
        "PropertyTaxSemanticSearch._rank_and_score_results",
        "PropertyTaxSemanticSearch._apply_legal_reasoning_analysis",
        "PropertyTaxSemanticSearch._calculate_semantic_relevance_score",
        "PropertyTaxSemanticSearch._hybrid_search",
        "PropertyTaxSemanticSearch.initialize",
        "PropertyTaxSemanticSearch._is_document_in_date_range",
        "PropertyTaxSemanticSearch._enhance_results_with_legal_context",
        "PropertyTaxSemanticSearch._rank_hybrid_results",
        "PropertyTaxSemanticSearch._calculate_legal_reasoning_boost",
        "PropertyTaxSemanticSearch._enhance_query_for_semantic_search"
      ],
      "services/vector_store/citation_tracker.py": [
        "PropertyTaxCitationTracker.load_citations_from_storage",
        "PropertyTaxCitationTracker.extract_citations_from_document",
        "PropertyTaxCitationTracker.get_citation_stats",
        "PropertyTaxCitationTracker.build_citation_networks",
        "PropertyTaxCitationTracker.__init__",
        "PropertyTaxCitationTracker.find_citations_by_topic",
        "PropertyTaxCitationTracker._build_topic_networks",
        "PropertyTaxCitationTracker._build_authority_networks",
        "PropertyTaxCitationTracker._extract_topics_from_context",
        "PropertyTaxCitationTracker.get_related_citations",
        "PropertyTaxCitationTracker._parse_citation_details",
        "PropertyTaxCitationTracker.save_citations_to_storage",
        "PropertyTaxCitationTracker.build_citation_relationships",
        "PropertyTaxCitationTracker._build_hierarchical_networks",
        "PropertyTaxCitationTracker._build_hierarchical_relationships",
        "test_citation_tracker",
        "PropertyTaxCitationTracker._build_authority_hierarchy",
        "PropertyTaxCitationTracker._build_amendment_relationships",
        "PropertyTaxCitationTracker._build_topical_relationships",
        "PropertyTaxCitationTracker._build_citation_patterns",
        "PropertyTaxCitationTracker.get_citation_authority_score",
        "get_citation_tracker"
      ],
      "services/vector_store/property_tax_embeddings.py": [
        "PropertyTaxEmbeddings.find_similar_property_tax_terms",
        "test_embeddings",
        "PropertyTaxEmbeddings._calculate_term_similarity",
        "PropertyTaxEmbeddings._load_property_tax_terminology",
        "PropertyTaxEmbeddings.get_property_tax_context_vector",
        "PropertyTaxEmbeddings.__init__",
        "PropertyTaxEmbeddings._calculate_concept_boost",
        "PropertyTaxEmbeddings.embed_query",
        "PropertyTaxEmbeddings._load_concept_weights",
        "PropertyTaxEmbeddings._calculate_property_tax_relevance",
        "get_property_tax_embeddings",
        "PropertyTaxEmbeddings._optimize_text_for_property_tax",
        "PropertyTaxEmbeddings._get_base_embeddings",
        "PropertyTaxEmbeddings.embed_documents",
        "PropertyTaxEmbeddings._enhance_embedding_for_property_tax"
      ],
      "services/vector_store/legal_document_indexer.py": [
        "test_legal_indexer",
        "LegalDocumentVectorStore._build_search_filter",
        "LegalDocumentVectorStore.index_processed_documents",
        "LegalDocumentVectorStore._classify_legal_query",
        "LegalDocumentVectorStore.get_vector_store_stats",
        "LegalDocumentVectorStore._initialize_vectorstore",
        "get_legal_vector_store",
        "LegalDocumentVectorStore.search_with_legal_reasoning",
        "LegalDocumentVectorStore.__init__",
        "LegalDocumentVectorStore.search_legal_documents",
        "LegalDocumentVectorStore._organize_documents_by_type",
        "LegalDocumentVectorStore._analyze_legal_context",
        "LegalDocumentVectorStore._enhance_search_query",
        "LegalDocumentVectorStore._add_documents_to_store",
        "LegalDocumentVectorStore._create_documents_from_processed",
        "LegalDocumentVectorStore._enhance_chunk_content"
      ],
      "services/persistence/redis_conversation_store.py": [
        "get_conversation_store",
        "reset_conversation_store",
        "RedisConversationStore.save_context",
        "RedisConversationStore._get_context_key",
        "RedisConversationStore.clear_conversation",
        "RedisConversationStore.save_message",
        "RedisConversationStore._get_conversation_key",
        "RedisConversationStore.get_context",
        "RedisConversationStore.get_session_stats",
        "RedisConversationStore.health_check",
        "RedisConversationStore.__init__",
        "RedisConversationStore.get_conversation_history"
      ],
      "services/persistence/repositories.py": [
        "PropertyAssessmentRequestRepository.update_status",
        "PropertyAssessmentRequestRepository.get_all_requests",
        "PropertyAssessmentRequestRepository.__init__",
        "PropertyAssessmentRequestRepository.get_by_request_id",
        "PropertyAssessmentServiceRepository.get_by_code",
        "PropertyAssessmentRequestRepository.get_customer_requests",
        "PropertyAssessmentRequestRepository.get_requests_by_property",
        "CustomerRepository.create_or_update",
        "CustomerRepository.get_by_instagram_id",
        "PropertyAssessmentServiceRepository.search_services",
        "PropertyAssessmentServiceRepository.get_applicable_for_property_type",
        "CustomerRepository.get_by_phone",
        "CustomerRepository.get_recent_customers",
        "MessageHistoryRepository.__init__",
        "PropertyAssessmentServiceRepository.get_by_category",
        "MessageHistoryRepository.get_conversation_history",
        "CustomerRepository.update_property_info",
        "MessageHistoryRepository.save_message",
        "CustomerRepository.__init__",
        "CustomerRepository.get_by_id",
        "PropertyAssessmentServiceRepository.__init__",
        "PropertyAssessmentRequestRepository.create_request"
      ],
      "services/persistence/analytics_repository.py": [
        "AnalyticsRepository.start_user_journey",
        "AnalyticsRepository.__init__",
        "AnalyticsRepository.get_business_intelligence_summary",
        "AnalyticsRepository.record_drop_off",
        "AnalyticsRepository.update_journey_stage",
        "AnalyticsRepository.get_conversion_metrics",
        "AnalyticsRepository.update_customer_analytics"
      ],
      "services/persistence/database.py": [
        "get_database_manager",
        "DatabaseManager.close",
        "DatabaseManager.get_session",
        "DatabaseManager.health_check",
        "get_db_session",
        "DatabaseManager.create_tables",
        "DatabaseManager.__init__"
      ],
      "services/persistence/order_storage.py": [
        "OrderStorageService.store_order",
        "OrderStorageService.__init__",
        "get_order_storage",
        "OrderStorageService.get_customer_orders",
        "OrderStorageService.persist_to_database",
        "OrderStorageService.get_order",
        "async_to_sync",
        "wrapper",
        "OrderStorageService.update_order_status"
      ],
      "services/voice/voice_setup.py": [
        "KrishnaVoiceSetup.list_active_healthcare_rooms",
        "KrishnaVoiceSetup.cleanup_expired_rooms",
        "KrishnaVoiceSetup.deploy_voice_agent",
        "main",
        "KrishnaVoiceSetup.create_healthcare_room",
        "KrishnaVoiceSetup.test_voice_agent_connection",
        "KrishnaVoiceSetup.setup_telephony_integration",
        "KrishnaVoiceSetup.__init__"
      ],
      "services/voice/livekit_data_bridge.py": [
        "get_livekit_data_bridge",
        "LiveKitDataBridge.get_active_voice_rooms",
        "LiveKitDataBridge.send_prescription_data",
        "notify_prescription_failed",
        "LiveKitDataBridge.send_status_update",
        "LiveKitDataBridge.is_voice_call_active",
        "LiveKitDataBridge.unregister_voice_room",
        "LiveKitDataBridge._send_data_to_room",
        "LiveKitDataBridge.__init__",
        "LiveKitDataBridge.send_prescription_failure",
        "LiveKitDataBridge.register_voice_room",
        "LiveKitDataBridge._get_room_name",
        "notify_prescription_ready"
      ],
      "services/voice/voice_chat_state.py": [
        "VoiceChatStateManager.get_prescription_context",
        "VoiceChatStateManager.update_activity",
        "VoiceChatStateManager.end_voice_call",
        "VoiceChatStateManager.is_voice_call_active",
        "VoiceChatStateManager.save_prescription_context",
        "VoiceChatStateManager.get_prescription_processing_status",
        "VoiceChatStateManager._get_redis_client",
        "VoiceChatStateManager.get_voice_call_state",
        "VoiceChatStateManager.__init__",
        "VoiceChatStateManager.start_voice_call",
        "VoiceChatStateManager.set_prescription_processing_status",
        "get_voice_chat_state_manager",
        "VoiceChatStateManager.request_prescription_via_whatsapp"
      ],
      "services/voice/property_tax_voice_agent.py": [
        "CenturyPropertyTaxAssistant.check_property_document_status",
        "_on_participant_disconnected",
        "on_data_received",
        "CenturyPropertyTaxAssistant.create_property_assessment_order",
        "CenturyPropertyTaxAssistant.end_call",
        "_cleanup",
        "CenturyPropertyTaxAssistant.property_tax_rag_tool",
        "CenturyPropertyTaxAssistant.__init__",
        "CenturyPropertyTaxAssistant.validate_pin_code",
        "entrypoint",
        "_end_call_impl",
        "CenturyPropertyTaxAssistant.request_property_document_image",
        "CenturyPropertyTaxAssistant.get_current_property_document_details"
      ],
      "services/voice/voice_config.py": [
        "VoiceConfig.is_business_hours",
        "VoiceConfig.get_language_code",
        "VoiceConfig.assess_urgency_with_llm",
        "VoiceConfig.__post_init__",
        "VoiceConfig.get_turn_detection_config"
      ],
      "services/utils/date_parser.py": [
        "format_date_user_friendly",
        "parse_natural_date"
      ],
      "services/utils/retry_handler.py": [
        "CircuitBreaker._should_attempt_reset",
        "async_retry",
        "CircuitBreaker._on_failure",
        "CircuitBreaker.acall",
        "sync_retry",
        "wrapper",
        "decorator",
        "CircuitBreaker.call",
        "is_retryable_exception",
        "CircuitBreaker.__init__",
        "CircuitBreaker._on_success"
      ],
      "services/payments/mock_razorpay.py": [
        "verify_mock_payment_completion",
        "MockRazorpayService.create_payment_link",
        "MockRazorpayService.simulate_payment_success",
        "create_mock_razorpay_payment_link",
        "get_mock_payment_data",
        "MockRazorpayService.get_payment_link_details",
        "MockRazorpayService.verify_webhook_signature",
        "MockRazorpayService.get_payment_details",
        "complete_mock_payment",
        "MockRazorpayService.__init__"
      ],
      "services/payments/razorpay_integration.py": [
        "RazorpayService.create_order",
        "RazorpayService.__init__",
        "RazorpayService.create_payment_link",
        "RazorpayService.verify_payment_signature",
        "verify_payment_completion",
        "create_razorpay_payment_link",
        "RazorpayService.get_payment_link_details",
        "RazorpayService.verify_payment_link_signature",
        "RazorpayService.verify_webhook_signature",
        "RazorpayService.get_payment_details",
        "handle_payment_webhook_data"
      ],
      "src/api/integrated_webhooks.py": [
        "verify_webhook",
        "get_stats",
        "force_process_batch",
        "handle_webhook",
        "health_check"
      ],
      "src/api/whatsapp_webhooks.py": [
        "whatsapp_webhook_handler",
        "whatsapp_webhook_verify",
        "_handle_voice_call_prescription_image",
        "test_template_message",
        "_handle_whatsapp_status",
        "_handle_whatsapp_message",
        "_handle_whatsapp_message_safe",
        "_handle_whatsapp_image_message",
        "whatsapp_health"
      ],
      "src/api/business_webhooks.py": [
        "handle_business_webhook",
        "get_business_statistics",
        "force_process_customer_batch",
        "verify_business_webhook",
        "business_health_check"
      ],
      "src/api/report_management.py": [
        "assessment_report_management_page",
        "update_assessment_report_status",
        "search_assessment_reports"
      ],
      "testing/performance/stress_testing_framework.py": [
        "StressTestingFramework._detect_failure_modes",
        "StressTestingFramework._calculate_resilience_score",
        "StressPatternGenerator.exponential_growth",
        "SystemMonitor.start_monitoring",
        "StressTestingFramework._generate_stress_test_recommendations",
        "SystemMonitor.stop_monitoring",
        "StressTestingFramework._generate_load_pattern",
        "SystemMonitor.get_peak_usage",
        "StressTestingFramework.__init__",
        "SystemMonitor.__init__",
        "run_stress_test_example",
        "StressTestingFramework.run_chaos_engineering_test",
        "StressPatternGenerator.sawtooth_pattern",
        "StressPatternGenerator.spike_pattern",
        "StressTestingFramework._analyze_performance_degradation",
        "StressPatternGenerator.linear_ramp",
        "StressTestingFramework.run_stress_test",
        "StressTestingFramework._run_stress_user_session",
        "StressTestingFramework._run_chaos_scenario",
        "StressTestingFramework._execute_stress_pattern",
        "StressTestingFramework._collect_real_time_metrics",
        "StressTestingFramework._check_system_breaking_point"
      ],
      "testing/performance/load_testing_suite.py": [
        "VirtualUser._prepare_request",
        "LoadTestingSuite._calculate_performance_metrics",
        "run_load_test_example",
        "VirtualUser._make_request",
        "LoadTestingSuite._percentile",
        "LoadTestingSuite._generate_comprehensive_report",
        "VirtualUser.run_session",
        "LoadTestingSuite.__init__",
        "LoadTestingSuite.run_comprehensive_load_test_suite",
        "LoadTestingSuite._generate_performance_recommendations",
        "LoadTestingSuite.run_load_test",
        "LoadTestingSuite._select_user_scenario",
        "LoadTestingSuite._analyze_threshold_compliance",
        "VirtualUser.__init__",
        "LoadTestingSuite.export_results"
      ],
      "tests/tools/test_lead_qualification_tool.py": [
        "TestLeadQualificationIntegration.test_end_to_end_lead_qualification_workflow",
        "TestLeadQualificationTool.test_lead_qualification_high_value_property",
        "TestLeadQualificationTool.test_generate_lead_report",
        "TestLeadQualificationTool.test_lead_qualification_with_assessment_increase",
        "TestLeadQualificationTool.test_lead_qualification_commercial_property",
        "TestLeadQualificationTool.test_lead_qualification_invalid_inputs",
        "TestLeadQualificationIntegration.test_lead_qualification_market_segments",
        "TestLeadQualificationTool.test_lead_qualification_low_value_property",
        "TestLeadQualificationTool.test_qualify_multiple_leads",
        "TestLeadQualificationTool.test_get_lead_recommendations_summary",
        "TestLeadQualificationTool.test_filter_leads_by_criteria"
      ],
      "tests/tools/test_runner.py": [
        "test_ai_framework_integration",
        "run_individual_tool_tests",
        "main",
        "test_mock_data_availability",
        "test_tool_integration"
      ],
      "tests/tools/test_property_validation_tool.py": [
        "TestPropertyValidationTool.test_get_supported_counties",
        "TestPropertyValidationTool.test_property_validation_success_parcel_id",
        "TestPropertyValidationTool.test_property_validation_error_handling",
        "TestPropertyValidationTool.test_property_validation_criteria_search",
        "TestPropertyValidationTool.test_detect_search_type",
        "TestPropertyValidationTool.test_property_validation_not_found",
        "TestPropertyValidationTool.test_normalize_address",
        "TestPropertyValidationTool.test_get_property_type_info",
        "TestPropertyValidationIntegration.test_end_to_end_property_lookup",
        "TestPropertyValidationTool.test_property_validation_auto_detect",
        "TestPropertyValidationIntegration.test_performance_multiple_searches",
        "TestPropertyValidationTool.test_format_property_response",
        "TestPropertyValidationTool.test_property_validation_success_address",
        "TestPropertyValidationTool.test_validate_multiple_properties"
      ],
      "tests/tools/test_savings_calculator_tool.py": [
        "TestSavingsCalculatorTool.test_savings_calculation_appeal_scenarios",
        "TestSavingsCalculatorIntegration.test_multiple_property_types_comparison",
        "TestSavingsCalculatorTool.test_savings_calculation_basic_residential",
        "TestSavingsCalculatorTool.test_savings_calculation_exemption_optimization",
        "TestSavingsCalculatorTool.test_savings_calculation_commercial_property",
        "TestSavingsCalculatorTool.test_multi_year_projections",
        "TestSavingsCalculatorIntegration.test_end_to_end_savings_analysis",
        "TestSavingsCalculatorIntegration.test_performance_bulk_calculations",
        "TestSavingsCalculatorTool.test_savings_calculation_comprehensive_analysis",
        "TestSavingsCalculatorTool.test_savings_calculation_invalid_inputs",
        "TestSavingsCalculatorTool.test_compare_county_rates"
      ],
      "demo/monitoring/demo_performance_tracker.py": [
        "DemoPerformanceTracker._analyze_escalations",
        "DemoPerformanceTracker.record_user_satisfaction",
        "DemoPerformanceTracker._update_real_time_metrics",
        "DemoPerformanceTracker.record_response_time",
        "DemoPerformanceTracker._count_by_attribute",
        "DemoPerformanceTracker._calculate_resolution_rate",
        "DemoPerformanceTracker._get_recent_metrics",
        "DemoPerformanceTracker.__init__",
        "DemoPerformanceTracker.record_escalation",
        "DemoPerformanceTracker.get_real_time_metrics",
        "DemoPerformanceTracker.record_accuracy_score",
        "DemoPerformanceTracker.get_performance_analytics",
        "DemoPerformanceTracker._analyze_response_times",
        "DemoPerformanceTracker._analyze_accuracy",
        "DemoPerformanceTracker._analyze_by_scenario",
        "DemoPerformanceTracker._analyze_by_persona",
        "DemoPerformanceTracker.end_conversation_session",
        "DemoPerformanceTracker.reset_metrics",
        "DemoPerformanceTracker.export_metrics",
        "DemoPerformanceTracker._get_performance_status",
        "DemoPerformanceTracker.start_conversation_session"
      ],
      "demo/scenarios/escalation_scenarios.py": [
        "EscalationDemoScenarios.__init__",
        "EscalationDemoScenarios.get_random_scenario",
        "EscalationDemoScenarios._create_urgent_deadline_scenarios",
        "EscalationDemoScenarios._create_technical_escalation_scenarios",
        "EscalationDemoScenarios.get_scenarios_by_escalation_type",
        "EscalationDemoScenarios.get_scenarios_by_trigger",
        "EscalationDemoScenarios._generate_scenarios",
        "EscalationDemoScenarios._create_language_barrier_scenarios",
        "EscalationDemoScenarios._create_legal_escalation_scenarios",
        "EscalationDemoScenarios._create_emotional_escalation_scenarios",
        "EscalationDemoScenarios.get_all_scenarios",
        "EscalationDemoScenarios.get_scenarios_by_urgency",
        "EscalationDemoScenarios.get_scenario_by_id",
        "EscalationDemoScenarios._create_multi_jurisdiction_scenarios",
        "EscalationDemoScenarios.get_escalation_summary"
      ],
      "demo/scenarios/__init__.py": [
        "validate_demo_scenarios",
        "DemoScenarioManager.validate_scenarios",
        "DemoScenarioManager.get_scenarios_by_persona",
        "DemoScenarioManager.get_scenario_for_demo",
        "DemoScenarioManager.get_random_scenario",
        "DemoScenarioManager.get_scenarios_by_difficulty",
        "DemoScenarioManager._get_all_personas",
        "get_random_demo_scenario",
        "DemoScenarioManager.get_all_scenarios",
        "DemoScenarioManager.__init__",
        "get_demo_categories",
        "DemoScenarioManager.get_scenario_by_id",
        "DemoScenarioManager.get_scenario_categories",
        "get_demo_summary",
        "get_all_demo_scenarios",
        "DemoScenarioManager.get_demo_summary",
        "DemoScenarioManager._get_category_description",
        "DemoScenarioManager.get_scenarios_by_category",
        "get_demo_scenario"
      ],
      "demo/scenarios/assessment_appeal_scenarios.py": [
        "AssessmentAppealDemoScenarios._create_deadline_scenarios",
        "AssessmentAppealDemoScenarios._create_status_scenarios",
        "AssessmentAppealDemoScenarios.get_random_scenario",
        "AssessmentAppealDemoScenarios.get_scenarios_by_persona",
        "AssessmentAppealDemoScenarios.get_scenarios_by_type",
        "AssessmentAppealDemoScenarios._create_commercial_appeal_scenarios",
        "AssessmentAppealDemoScenarios._create_residential_appeal_scenarios",
        "AssessmentAppealDemoScenarios.__init__",
        "AssessmentAppealDemoScenarios.get_scenarios_by_complexity",
        "AssessmentAppealDemoScenarios.get_all_scenarios",
        "AssessmentAppealDemoScenarios._create_evidence_scenarios",
        "AssessmentAppealDemoScenarios.get_scenario_by_id",
        "AssessmentAppealDemoScenarios._generate_scenarios"
      ],
      "demo/scenarios/payment_processing_scenarios.py": [
        "PaymentProcessingDemoScenarios._create_installment_scenarios",
        "PaymentProcessingDemoScenarios._create_hardship_scenarios",
        "PaymentProcessingDemoScenarios._create_payment_history_scenarios",
        "PaymentProcessingDemoScenarios.get_random_scenario",
        "PaymentProcessingDemoScenarios.__init__",
        "PaymentProcessingDemoScenarios._create_online_payment_scenarios",
        "PaymentProcessingDemoScenarios.get_scenarios_by_persona",
        "PaymentProcessingDemoScenarios.get_all_scenarios",
        "PaymentProcessingDemoScenarios.get_scenario_by_id",
        "PaymentProcessingDemoScenarios._create_late_payment_scenarios",
        "PaymentProcessingDemoScenarios.get_scenarios_by_type",
        "PaymentProcessingDemoScenarios._create_refund_scenarios",
        "PaymentProcessingDemoScenarios._generate_scenarios"
      ],
      "demo/scenarios/exemption_application_scenarios.py": [
        "ExemptionApplicationDemoScenarios._generate_scenarios",
        "ExemptionApplicationDemoScenarios.get_scenarios_by_persona",
        "ExemptionApplicationDemoScenarios.get_scenarios_by_exemption_type",
        "ExemptionApplicationDemoScenarios._create_senior_scenarios",
        "ExemptionApplicationDemoScenarios._create_solar_scenarios",
        "ExemptionApplicationDemoScenarios.__init__",
        "ExemptionApplicationDemoScenarios.get_random_scenario",
        "ExemptionApplicationDemoScenarios.get_all_scenarios",
        "ExemptionApplicationDemoScenarios._create_veteran_scenarios",
        "ExemptionApplicationDemoScenarios._create_agricultural_scenarios",
        "ExemptionApplicationDemoScenarios._create_disability_scenarios",
        "ExemptionApplicationDemoScenarios.get_scenarios_by_stage",
        "ExemptionApplicationDemoScenarios._create_homestead_scenarios",
        "ExemptionApplicationDemoScenarios.get_scenario_by_id"
      ],
      "demo/scenarios/multi_property_scenarios.py": [
        "MultiPropertyDemoScenarios.get_scenario_by_id",
        "MultiPropertyDemoScenarios.get_portfolio_summary",
        "MultiPropertyDemoScenarios.get_all_scenarios",
        "MultiPropertyDemoScenarios._create_complex_portfolio_scenarios",
        "MultiPropertyDemoScenarios.__init__",
        "MultiPropertyDemoScenarios.get_random_scenario",
        "MultiPropertyDemoScenarios._create_moderate_portfolio_scenarios",
        "MultiPropertyDemoScenarios.get_scenarios_by_persona",
        "MultiPropertyDemoScenarios._generate_scenarios",
        "MultiPropertyDemoScenarios._create_simple_portfolio_scenarios",
        "MultiPropertyDemoScenarios.get_scenarios_by_portfolio_type",
        "MultiPropertyDemoScenarios.get_scenarios_by_complexity"
      ],
      "demo/scenarios/basic_inquiry_scenarios.py": [
        "BasicInquiryDemoScenarios.get_scenarios_by_persona",
        "BasicInquiryDemoScenarios._create_tax_rate_scenarios",
        "BasicInquiryDemoScenarios.get_random_scenario",
        "BasicInquiryDemoScenarios.__init__",
        "BasicInquiryDemoScenarios._generate_scenarios",
        "BasicInquiryDemoScenarios._create_payment_due_scenarios",
        "BasicInquiryDemoScenarios.get_scenario_by_id",
        "BasicInquiryDemoScenarios.get_scenarios_by_type",
        "BasicInquiryDemoScenarios.get_all_scenarios",
        "BasicInquiryDemoScenarios._create_exemption_scenarios",
        "BasicInquiryDemoScenarios._create_property_value_scenarios",
        "BasicInquiryDemoScenarios._create_payment_options_scenarios",
        "BasicInquiryDemoScenarios._create_tax_amount_scenarios"
      ],
      "demo/presentations/executive_summary_generator.py": [
        "ExecutiveSummaryGenerator._generate_compliance_status",
        "ExecutiveSummaryGenerator._calculate_roi_analysis",
        "ExecutiveSummaryGenerator._create_metrics_chart",
        "ExecutiveSummaryGenerator._create_compliance_chart",
        "ExecutiveSummaryGenerator.__init__",
        "ExecutiveSummaryGenerator._generate_business_metrics",
        "ExecutiveSummaryGenerator.export_presentation_to_json",
        "ExecutiveSummaryGenerator.generate_presentation_charts",
        "ExecutiveSummaryGenerator._generate_key_benefits",
        "ExecutiveSummaryGenerator._create_roi_chart",
        "ExecutiveSummaryGenerator._generate_presentation_title",
        "ExecutiveSummaryGenerator.generate_executive_presentation",
        "ExecutiveSummaryGenerator._generate_executive_summary",
        "ExecutiveSummaryGenerator._generate_technical_capabilities",
        "ExecutiveSummaryGenerator._generate_implementation_timeline",
        "ExecutiveSummaryGenerator._generate_strategic_recommendations",
        "ExecutiveSummaryGenerator._generate_appendices",
        "ExecutiveSummaryGenerator._generate_risk_assessment"
      ],
      "demo/environment/demo_configuration.py": [
        "DemoConfigurationManager.__init__",
        "DemoConfigurationManager.get_scenario_config",
        "DemoConfigurationManager.disable_scenario",
        "DemoConfigurationManager.import_demo_config",
        "DemoConfigurationManager.get_demo_database_config",
        "DemoConfigurationManager.validate_demo_environment",
        "DemoConfigurationManager.get_demo_redis_config",
        "DemoConfigurationManager.get_enabled_scenarios",
        "DemoConfigurationManager.export_demo_config",
        "DemoConfigurationManager.enable_scenario",
        "DemoConfigurationManager.get_demo_ai_config",
        "DemoConfigurationManager.get_demo_environment_info",
        "DemoConfigurationManager._load_scenario_configs",
        "DemoConfigurationManager._save_scenario_configs",
        "DemoConfigurationManager._load_demo_settings"
      ],
      "demo/environment/demo_reset_manager.py": [
        "DemoResetManager._clear_active_conversations",
        "DemoResetManager.perform_full_reset",
        "DemoResetManager._load_fresh_demo_data",
        "DemoResetManager._clear_temporary_session_data",
        "DemoResetManager.schedule_automatic_reset",
        "DemoResetManager.initialize_connections",
        "DemoResetManager.perform_quick_reset",
        "DemoResetManager.__init__",
        "DemoResetManager.get_last_reset_time",
        "DemoResetManager._reset_conversation_data",
        "DemoResetManager._reset_analytics_data",
        "DemoResetManager.validate_demo_environment",
        "DemoResetManager.get_demo_environment_status",
        "DemoResetManager._clear_ai_response_cache",
        "DemoResetManager._reset_demo_user_states",
        "DemoResetManager._reset_payment_simulation_data",
        "DemoResetManager._reset_demo_property_data",
        "DemoResetManager._reset_demo_sessions",
        "DemoResetManager.get_reset_history"
      ],
      "scripts/cleanup/clear-user-redis.py": [
        "clear_user_data",
        "main"
      ],
      "scripts/cleanup/clear-all-sessions.py": [
        "clear_all_sessions",
        "main"
      ],
      "scripts/cleanup/clear-all-data.py": [
        "verify_cleanup",
        "clear_sqlite_data",
        "main",
        "clear_redis_data"
      ],
      "scripts/cleanup/clear-sessions-only.py": [
        "main",
        "clear_session_data"
      ]
    },
    "class_definitions": {
      "scripts/dependency_analyzer.py": [
        "ImportUsageVisitor",
        "DependencyAnalyzer"
      ],
      "config/response_templates.py": [
        "Language",
        "PropertyTaxScenario"
      ],
      "config/ai_configuration.py": [
        "AIModelConfig",
        "PropertyTaxDomain",
        "PropertyTaxAIConfig",
        "AIModel",
        "ConfidenceLevel",
        "DomainConfig"
      ],
      "config/compliance_settings.py": [
        "RetentionPeriod",
        "DataClassification",
        "ComplianceLevel",
        "TDLRComplianceSettings"
      ],
      "config/settings.py": [
        "Settings"
      ],
      "config/performance_thresholds.py": [
        "LoadTestScenario",
        "PerformanceMetric",
        "LoadTestConfiguration",
        "PerformanceThresholds",
        "PerformanceThreshold"
      ],
      "config/security_policies.py": [
        "VulnerabilityCategory",
        "SecurityConfiguration",
        "SecurityPolicies",
        "ComplianceFramework",
        "SecurityPolicy",
        "SecurityLevel"
      ],
      "services/date_intelligence.py": [
        "DateIntelligenceService"
      ],
      "mock_data/demo_customer_personas.py": [
        "CommunicationStyle",
        "TechComfortLevel",
        "PersonaType",
        "CustomerPersona",
        "DemoCustomerPersonas"
      ],
      "compliance/tdlr/audit_trail_generator.py": [
        "AuditEvent",
        "AuditEventType",
        "ComplianceAuditSummary",
        "AuditChain",
        "AuditLevel",
        "RiskLevel",
        "AuditTrailGenerator"
      ],
      "compliance/tdlr/privacy_compliance_validator.py": [
        "PrivacyComplianceValidator",
        "DataSubjectRequest",
        "PrivacyViolationType",
        "PrivacyViolation"
      ],
      "compliance/tdlr/public_records_handler.py": [
        "PublicRecordRequest",
        "ExemptionType",
        "RedactionRule",
        "RecordClassification",
        "PublicRecordStatus",
        "PublicRecordsHandler"
      ],
      "compliance/tdlr/record_retention_manager.py": [
        "RetentionStatus",
        "RetentionRecord",
        "RetentionPolicy",
        "RetentionAction",
        "RecordRetentionManager",
        "RetentionEvent"
      ],
      "approval/workflows/stakeholder_approval_manager.py": [
        "ApprovalStatus",
        "ApprovalType",
        "StakeholderApprovalManager",
        "ApprovalWorkflow",
        "StakeholderProfile",
        "ApprovalRequirement",
        "StakeholderApproval",
        "StakeholderRole"
      ],
      "security/audit/vulnerability_scanner.py": [
        "ScanType",
        "VulnerabilityScanner",
        "DynamicAnalysisScanner",
        "ScanResult",
        "VulnerabilitySeverity",
        "Vulnerability",
        "VulnerabilityPatterns",
        "StaticAnalysisScanner"
      ],
      "agents/simplified/ticket_tools.py": [
        "CheckTicketStatusInput",
        "CreateTicketInput"
      ],
      "agents/simplified/enhanced_workflow_tools.py": [
        "SuggestAssessmentServicesSchema",
        "CreateAssessmentSchema",
        "SchedulePropertyAssessmentSchema"
      ],
      "agents/core/guardrails.py": [
        "ResponseAction",
        "GuardrailViolationType",
        "GuardrailResult",
        "PropertyTaxGuardrails"
      ],
      "agents/core/conversation_flows.py": [
        "ConversationContext",
        "PropertyTaxConcern",
        "ConversationStage",
        "PropertyTaxConversationFlow"
      ],
      "agents/core/property_tax_assistant_v3.py": [
        "PropertyTaxState",
        "PropertyTaxToolNode",
        "WorkflowAssistant"
      ],
      "agents/tools/document_processing_tool.py": [
        "DocumentProcessingInput",
        "DocumentProcessingResponse"
      ],
      "agents/tools/savings_calculator_tool.py": [
        "SavingsCalculationResponse",
        "SavingsCalculationInput"
      ],
      "agents/tools/lead_qualification_tool.py": [
        "LeadQualificationInput",
        "LeadQualificationResponse"
      ],
      "agents/tools/property_validation_tool.py": [
        "PropertyValidationResponse",
        "PropertyValidationInput"
      ],
      "agents/tools/consultation_scheduling_tool.py": [
        "ConsultationSchedulingInput",
        "ConsultationSchedulingResponse"
      ],
      "agents/tools/deadline_tracking_tool.py": [
        "DeadlineTrackingResponse",
        "DeadlineTrackingInput"
      ],
      "services/ticket_management/webhook_interceptor.py": [
        "WebhookInterceptor"
      ],
      "services/ticket_management/ticket_service.py": [
        "TicketService"
      ],
      "services/ticket_management/models.py": [
        "TicketMessage",
        "TicketStatus",
        "TicketPriority",
        "SupportTicket",
        "TicketCategory",
        "AgentSession"
      ],
      "services/messaging/modern_integrated_webhook_handler.py": [
        "ModernIntegratedWebhookHandler"
      ],
      "services/messaging/whatsapp_client.py": [
        "WhatsAppClient"
      ],
      "services/messaging/whatsapp_image_handler.py": [
        "WhatsAppImageHandler"
      ],
      "services/messaging/property_tax_templates.py": [
        "PropertyTaxTemplates"
      ],
      "services/messaging/message_batching.py": [
        "MessageBatcher",
        "MessageBatch"
      ],
      "services/data_acquisition/scheduler.py": [
        "ScheduledJob",
        "DataCollectionScheduler",
        "CollectionStats"
      ],
      "services/data_acquisition/county_appraisal_scraper.py": [
        "CountyAppraisalScraper",
        "CountyInfo"
      ],
      "services/data_acquisition/texas_comptroller_scraper.py": [
        "TexasComptrollerScraper",
        "ScrapedDocument"
      ],
      "services/data_acquisition/document_processor.py": [
        "DocumentProcessor",
        "ProcessedDocument"
      ],
      "services/knowledge_base/legal_text_cleaner.py": [
        "LegalTextCleaner",
        "CleaningRule",
        "CleaningResult"
      ],
      "services/knowledge_base/quality_validator.py": [
        "ValidationSeverity",
        "ValidationRule",
        "PropertyTaxQualityValidator",
        "ValidationIssue",
        "ValidationResult"
      ],
      "services/knowledge_base/content_processor.py": [
        "KnowledgeEntry",
        "KnowledgeGraph",
        "PropertyTaxContentProcessor"
      ],
      "services/knowledge_base/taxonomy_builder.py": [
        "ContentCategory",
        "PropertyTaxTaxonomyBuilder",
        "TaxonomyNode"
      ],
      "services/communication/message_handler.py": [
        "UniversalMessageHandler"
      ],
      "services/vector_store/semantic_search.py": [
        "SearchResult",
        "SearchRequest",
        "PropertyTaxSemanticSearch",
        "SearchType",
        "SearchScope"
      ],
      "services/vector_store/citation_tracker.py": [
        "CitationNetwork",
        "CitationRelationship",
        "PropertyTaxCitationTracker",
        "LegalCitation"
      ],
      "services/vector_store/property_tax_embeddings.py": [
        "PropertyTaxEmbeddings",
        "PropertyTaxTermMapping"
      ],
      "services/vector_store/legal_document_indexer.py": [
        "LegalDocumentVectorStore"
      ],
      "services/persistence/redis_conversation_store.py": [
        "RedisConversationStore"
      ],
      "services/persistence/repositories.py": [
        "MessageHistoryRepository",
        "CustomerRepository",
        "PropertyAssessmentRequestRepository",
        "PropertyAssessmentServiceRepository"
      ],
      "services/persistence/analytics_repository.py": [
        "AnalyticsRepository"
      ],
      "services/persistence/database.py": [
        "OwnershipType",
        "AppealDocument",
        "PropertyAssessmentService",
        "PaymentStatus",
        "ZoningType",
        "PaymentMethod",
        "PropertyOwner",
        "TaxBill",
        "Base",
        "Property",
        "CustomerProfile",
        "PropertyType",
        "AppealReason",
        "Payment",
        "PropertyAssessmentRequest",
        "AppealStatus",
        "MessageHistory",
        "DatabaseManager",
        "TaxAssessment",
        "Appeal",
        "UserAnalytics"
      ],
      "services/persistence/order_storage.py": [
        "OrderStorageService"
      ],
      "services/voice/voice_setup.py": [
        "KrishnaVoiceSetup"
      ],
      "services/voice/livekit_data_bridge.py": [
        "PrescriptionMessage",
        "LiveKitDataBridge"
      ],
      "services/voice/voice_chat_state.py": [
        "VoiceChatStateManager"
      ],
      "services/voice/property_tax_voice_agent.py": [
        "CenturyPropertyTaxAssistant"
      ],
      "services/voice/voice_config.py": [
        "VoiceConfig"
      ],
      "services/utils/retry_handler.py": [
        "DatabaseRetryableError",
        "RetryableError",
        "RetryExhaustedError",
        "CircuitBreaker",
        "APIRetryableError"
      ],
      "services/payments/mock_razorpay.py": [
        "MockRazorpayService"
      ],
      "services/payments/razorpay_integration.py": [
        "RazorpayService"
      ],
      "src/api/report_management.py": [
        "ReportSearchRequest",
        "ReportUpdateRequest"
      ],
      "testing/performance/stress_testing_framework.py": [
        "StressTestType",
        "FailureMode",
        "StressTestingFramework",
        "StressTestConfiguration",
        "StressTestResult",
        "StressPatternGenerator",
        "SystemMonitor"
      ],
      "testing/performance/load_testing_suite.py": [
        "UserSession",
        "LoadTestingSuite",
        "RequestResult",
        "LoadTestResult",
        "VirtualUser"
      ],
      "tests/tools/test_lead_qualification_tool.py": [
        "TestLeadQualificationTool",
        "TestLeadQualificationIntegration"
      ],
      "tests/tools/test_property_validation_tool.py": [
        "TestPropertyValidationIntegration",
        "TestPropertyValidationTool"
      ],
      "tests/tools/test_savings_calculator_tool.py": [
        "TestSavingsCalculatorTool",
        "TestSavingsCalculatorIntegration"
      ],
      "demo/monitoring/demo_performance_tracker.py": [
        "ConversationMetrics",
        "DemoPerformanceTracker",
        "PerformanceMetric"
      ],
      "demo/scenarios/escalation_scenarios.py": [
        "EscalationType",
        "EscalationDemoScenarios",
        "EscalationScenario",
        "EscalationTrigger"
      ],
      "demo/scenarios/__init__.py": [
        "ScenarioCategory",
        "DemoScenarioManager"
      ],
      "demo/scenarios/assessment_appeal_scenarios.py": [
        "AppealScenarioType",
        "AssessmentAppealScenario",
        "AssessmentAppealDemoScenarios"
      ],
      "demo/scenarios/payment_processing_scenarios.py": [
        "PaymentProcessingScenario",
        "PaymentScenarioType",
        "PaymentProcessingDemoScenarios"
      ],
      "demo/scenarios/exemption_application_scenarios.py": [
        "ApplicationStage",
        "ExemptionApplicationScenario",
        "ExemptionType",
        "ExemptionApplicationDemoScenarios"
      ],
      "demo/scenarios/multi_property_scenarios.py": [
        "PortfolioType",
        "PortfolioComplexity",
        "MultiPropertyDemoScenarios",
        "MultiPropertyScenario"
      ],
      "demo/scenarios/basic_inquiry_scenarios.py": [
        "BasicInquiryScenario",
        "InquiryType",
        "BasicInquiryDemoScenarios"
      ],
      "demo/presentations/executive_summary_generator.py": [
        "BusinessMetric",
        "ROICalculation",
        "TechnicalCapability",
        "StakeholderType",
        "ExecutiveSummaryGenerator",
        "ExecutivePresentation",
        "PresentationType",
        "ComplianceStatus"
      ],
      "demo/environment/demo_configuration.py": [
        "DemoScenarioConfig",
        "DemoSettings",
        "DemoPerformanceTargets",
        "DemoConfigurationManager"
      ],
      "demo/environment/demo_reset_manager.py": [
        "DemoResetManager",
        "ResetOperation"
      ]
    },
    "function_calls": {
      "setup.py": [
        "startswith",
        "setup",
        "open",
        "find_packages",
        "read",
        "strip"
      ],
      "scripts/validate-workflow.py": [
        "dirname",
        "abspath",
        "validate_workflow_paths",
        "validate_tool_implementation",
        "isinstance",
        "validate_data_structures",
        "main",
        "exit",
        "items",
        "print",
        "append",
        "len",
        "validate_compliance_features"
      ],
      "scripts/test-workflow.py": [
        "create_order",
        "test_sample_collection_scheduling",
        "validate_pin_code",
        "main",
        "schedule_sample_collection",
        "test_order_creation",
        "get",
        "check_report_status",
        "len",
        "exit",
        "ainvoke",
        "abspath",
        "test_payment_options",
        "confirm_order_cash_payment",
        "test_report_status",
        "join",
        "dirname",
        "run",
        "test_workflow_state_transitions",
        "create_payment_link",
        "print",
        "append",
        "any",
        "test_advanced_panels",
        "suggest_advanced_test_panel",
        "print_exc",
        "get_payment_options",
        "test_cash_payment_confirmation",
        "test_pin_validation"
      ],
      "scripts/test_date_intelligence.py": [
        "test_multiple_concurrent_bookings",
        "join",
        "print_exc",
        "dirname",
        "abspath",
        "timedelta",
        "parse_date_intelligently",
        "insert",
        "get_current_time_info",
        "test_booking_scenarios",
        "get",
        "print",
        "today",
        "len",
        "range",
        "test_natural_language_dates",
        "validate_booking_constraints"
      ],
      "scripts/dependency_analyzer.py": [
        "_detect_circular_dependencies",
        "_calculate_import_statistics",
        "index",
        "visit_FunctionDef",
        "main",
        "generic_visit",
        "items",
        "get",
        "len",
        "parse",
        "defaultdict",
        "_identify_zero_usage",
        "open",
        "max",
        "list",
        "isinstance",
        "Path",
        "ImportUsageVisitor",
        "split",
        "DependencyAnalyzer",
        "remove",
        "rglob",
        "sum",
        "_analyze_file",
        "join",
        "relative_to",
        "add",
        "update",
        "print",
        "append",
        "_analyze_package_usage",
        "_generate_statistics",
        "lower",
        "any",
        "_generate_import_analysis",
        "keys",
        "dump",
        "_generate_usage_analysis",
        "analyze_codebase",
        "set",
        "visit",
        "values",
        "Counter",
        "dfs",
        "_generate_risk_assessment",
        "_calculate_usage_frequency",
        "read",
        "dict",
        "str"
      ],
      "scripts/test-mock-payment.py": [
        "startswith",
        "verify_webhook_signature",
        "test_mock_payment_link_creation",
        "ainvoke",
        "dirname",
        "abspath",
        "print_exc",
        "test_mock_security_features",
        "test_integration_with_razorpay_service",
        "run",
        "main",
        "get",
        "print",
        "append",
        "getenv",
        "exit",
        "test_mock_payment_verification",
        "test_mock_payment_url_format"
      ],
      "scripts/test_intelligent_booking.py": [
        "create_order",
        "enumerate",
        "dirname",
        "abspath",
        "run",
        "insert",
        "schedule_sample_collection",
        "get",
        "print",
        "len",
        "test_intelligent_booking"
      ],
      "tests/run_tests.py": [
        "run_tests",
        "ArgumentParser",
        "add_argument",
        "join",
        "check_dependencies",
        "exit",
        "run",
        "extend",
        "replace",
        "main",
        "Path",
        "append",
        "print",
        "run_command",
        "__import__",
        "parse_args",
        "str"
      ],
      "tests/conftest.py": [
        "wait_for",
        "fixture",
        "AuthManager",
        "ConfigurationGenerator",
        "initialize",
        "close",
        "NamedTemporaryFile",
        "MessageHandlerRegistry",
        "create_user",
        "Message",
        "create_manager",
        "new_event_loop",
        "cleanup",
        "dumps",
        "EngineAPI",
        "get_event_loop_policy",
        "dump",
        "hash",
        "StateManagerConfig",
        "MetricsCollector",
        "AnalyticsEngine",
        "unlink",
        "str"
      ],
      "config/response_templates.py": [
        "format",
        "warning",
        "getLogger",
        "ord",
        "isinstance",
        "get",
        "lower",
        "error",
        "any",
        "get_template"
      ],
      "config/ai_configuration.py": [
        "AIModelConfig",
        "getLogger",
        "is_within_legal_boundaries",
        "PropertyTaxAIConfig",
        "items",
        "get",
        "len",
        "DomainConfig",
        "get_domain_config",
        "warning",
        "split",
        "info",
        "get_ai_config",
        "lower",
        "getenv",
        "get_model_config",
        "any",
        "append",
        "format_response_with_disclaimers",
        "should_escalate",
        "get_legal_disclaimer"
      ],
      "config/compliance_settings.py": [
        "RetentionPeriod",
        "upper",
        "items",
        "get",
        "len",
        "ComplianceLevel",
        "validate_compliance_configuration",
        "isinstance",
        "get_compliance_summary",
        "int",
        "lower",
        "getenv",
        "print",
        "load_dotenv",
        "TDLRComplianceSettings",
        "replace",
        "title",
        "str",
        "bool"
      ],
      "config/settings.py": [
        "int",
        "print_config",
        "join",
        "validate",
        "lower",
        "append",
        "getenv",
        "print",
        "Settings",
        "load_dotenv"
      ],
      "config/performance_thresholds.py": [
        "int",
        "get_scenario_configuration_summary",
        "validate_performance_result",
        "join",
        "set",
        "list",
        "get_threshold",
        "items",
        "get",
        "getenv",
        "LoadTestConfiguration",
        "len",
        "float",
        "PerformanceThreshold",
        "PerformanceThresholds",
        "print",
        "load_dotenv"
      ],
      "config/security_policies.py": [
        "int",
        "get_mandatory_policies",
        "validate_security_configuration",
        "get_policies_by_framework",
        "sum",
        "get_policies_by_severity",
        "SecurityConfiguration",
        "values",
        "SecurityPolicies",
        "lower",
        "getenv",
        "print",
        "len",
        "get_security_configuration",
        "SecurityPolicy",
        "load_dotenv"
      ],
      "src/main.py": [
        "get_database_manager",
        "configure",
        "getLogger",
        "JSONResponse",
        "get",
        "error",
        "exception_handler",
        "makedirs",
        "FastAPI",
        "PositionalArgumentsFormatter",
        "JSONRenderer",
        "include_router",
        "LoggerFactory",
        "warning",
        "info",
        "basicConfig",
        "create_tables",
        "StreamHandler",
        "run",
        "update",
        "getenv",
        "load_dotenv",
        "is_configured",
        "get_whatsapp_client",
        "add_middleware",
        "FileHandler",
        "on_event",
        "bool"
      ],
      "services/date_intelligence.py": [
        "now",
        "_parse_named_days",
        "items",
        "error",
        "len",
        "group",
        "callable",
        "groups",
        "weekday",
        "get_logger",
        "get_current_time_info",
        "_get_available_time_slots",
        "result",
        "int",
        "info",
        "bind",
        "search",
        "update",
        "lower",
        "_parse_relative_dates",
        "_is_business_day",
        "_validate_booking_date",
        "DateIntelligenceService",
        "_parse_relative_weeks",
        "_get_next_business_day",
        "_create_error_response",
        "_is_business_hours",
        "strftime",
        "date",
        "time",
        "parse_date_intelligently",
        "timedelta",
        "_parse_specific_dates",
        "strip",
        "str"
      ],
      "mock_data/consultant_schedules.py": [
        "choice",
        "items",
        "get",
        "len",
        "isoformat",
        "randint",
        "list",
        "sort",
        "range",
        "today",
        "find_available_time_slots",
        "min",
        "join",
        "lower",
        "append",
        "random",
        "keys",
        "generate_consultant_schedule",
        "set",
        "time",
        "strftime",
        "title",
        "strptime",
        "timedelta"
      ],
      "mock_data/tax_rates.py": [
        "keys",
        "int",
        "round",
        "list",
        "items",
        "lower",
        "get",
        "min"
      ],
      "mock_data/demo_customer_personas.py": [
        "get_personas_by_tech_comfort",
        "get_persona_by_id",
        "_create_first_time_homeowner_personas",
        "choice",
        "_create_personas",
        "get",
        "len",
        "CustomerPersona",
        "_create_agricultural_personas",
        "list",
        "_create_senior_citizen_personas",
        "get_personas_by_type",
        "_create_dispute_personas",
        "update",
        "DemoCustomerPersonas",
        "_create_commercial_personas",
        "set",
        "values",
        "_create_multi_property_personas"
      ],
      "mock_data/tax_calendars.py": [
        "int",
        "categorize_deadline",
        "isoformat",
        "max",
        "replace",
        "date",
        "sort",
        "items",
        "lower",
        "get",
        "today",
        "strptime",
        "append",
        "title",
        "get_county_calendar",
        "get_deadline_description"
      ],
      "mock_data/property_records.py": [
        "upper",
        "now",
        "generate_address",
        "choice",
        "items",
        "get",
        "len",
        "generate_assessment_history",
        "isoformat",
        "randint",
        "round",
        "list",
        "range",
        "min",
        "choices",
        "int",
        "generate_property_characteristics",
        "uniform",
        "lower",
        "append",
        "generate_parcel_id",
        "keys",
        "random",
        "generate_property_records",
        "str"
      ],
      "mock_data/document_templates.py": [
        "upper",
        "now",
        "choice",
        "items",
        "get",
        "len",
        "randint",
        "max",
        "match",
        "int",
        "uniform",
        "sum",
        "lower",
        "append",
        "float",
        "random",
        "replace",
        "values",
        "strftime",
        "str"
      ],
      "mock_data/assessment_patterns.py": [
        "int",
        "get_value_range_category",
        "round",
        "now",
        "max",
        "get_increase_category",
        "items",
        "lower",
        "get",
        "range",
        "normalvariate",
        "append",
        "min"
      ],
      "compliance/tdlr/audit_trail_generator.py": [
        "AuditEvent",
        "getLogger",
        "ComplianceAuditSummary",
        "generate_compliance_audit_report",
        "now",
        "asdict",
        "_export_to_csv",
        "get",
        "len",
        "log_property_tax_operation",
        "isoformat",
        "log_user_authentication",
        "writerow",
        "log_audit_event",
        "enumerate",
        "isinstance",
        "log_data_access",
        "warning",
        "info",
        "log_compliance_violation",
        "verify_audit_integrity",
        "writer",
        "fromisoformat",
        "pop",
        "encode",
        "hexdigest",
        "uuid4",
        "getvalue",
        "lower",
        "append",
        "print",
        "search_audit_events",
        "dumps",
        "AuditTrailGenerator",
        "_calculate_event_checksum",
        "ValueError",
        "StringIO",
        "_update_audit_chain",
        "sha256",
        "AuditChain",
        "timedelta",
        "str"
      ],
      "compliance/tdlr/privacy_compliance_validator.py": [
        "is_restricted_information",
        "getLogger",
        "_check_pii_exposure",
        "generate_compliance_report",
        "now",
        "_handle_data_access_request",
        "extend",
        "PrivacyComplianceValidator",
        "items",
        "get",
        "error",
        "len",
        "_check_data_minimization",
        "_classify_data",
        "isoformat",
        "_extract_data_subject_id",
        "PrivacyViolation",
        "max",
        "is_public_record_category",
        "match",
        "isinstance",
        "list",
        "_check_encryption_compliance",
        "warning",
        "info",
        "search",
        "_get_required_fields_for_context",
        "fromisoformat",
        "update",
        "lower",
        "append",
        "print",
        "any",
        "_handle_data_rectification_request",
        "_check_access_control_compliance",
        "keys",
        "_handle_data_portability_request",
        "_is_data_encrypted",
        "get_retention_period_for_classification",
        "set",
        "values",
        "validate_data_handling",
        "_check_retention_compliance",
        "timedelta",
        "_handle_data_erasure_request",
        "str"
      ],
      "compliance/tdlr/public_records_handler.py": [
        "getLogger",
        "sub",
        "now",
        "_apply_redactions",
        "extend",
        "get",
        "RecordClassification",
        "len",
        "isoformat",
        "generate_public_records_report",
        "process_public_record_request",
        "list",
        "range",
        "PublicRecordsHandler",
        "startswith",
        "info",
        "_classify_record_for_public_access",
        "submit_public_record_request",
        "sum",
        "PublicRecordRequest",
        "findall",
        "_initiate_request_review",
        "_calculate_average_response_time",
        "lower",
        "append",
        "print",
        "any",
        "_extract_keywords_from_description",
        "_initialize_default_redaction_rules",
        "ValueError",
        "set",
        "values",
        "strftime",
        "_identify_responsive_records",
        "RedactionRule",
        "validate_compliance_with_texas_gov_code_552",
        "timedelta"
      ],
      "compliance/tdlr/record_retention_manager.py": [
        "getLogger",
        "_initialize_default_policies",
        "now",
        "RetentionRecord",
        "register_record",
        "items",
        "get",
        "error",
        "len",
        "timestamp",
        "RecordRetentionManager",
        "isoformat",
        "_find_applicable_policy",
        "RetentionEvent",
        "get_retention_status",
        "generate_retention_report",
        "_calculate_retention_deadline",
        "_apply_retention_action",
        "_anonymize_record",
        "RetentionPolicy",
        "test_retention_manager",
        "_delete_record",
        "_log_retention_event",
        "warning",
        "info",
        "run",
        "append",
        "_archive_record",
        "print",
        "apply_legal_hold",
        "_get_default_policy",
        "enforce_retention_policies",
        "values",
        "date",
        "timedelta",
        "str"
      ],
      "approval/workflows/stakeholder_approval_manager.py": [
        "_initialize_approval_requirements",
        "getLogger",
        "_send_approval_notification",
        "now",
        "StakeholderProfile",
        "extend",
        "sorted",
        "submit_stakeholder_approval",
        "items",
        "_find_stakeholder_by_role",
        "_get_next_actions",
        "error",
        "len",
        "abs",
        "get",
        "isoformat",
        "_get_risk_indicators",
        "all",
        "copy",
        "_update_workflow_status",
        "ApprovalWorkflow",
        "max",
        "warning",
        "info",
        "_initialize_stakeholder_profiles",
        "StakeholderApprovalManager",
        "ApprovalRequirement",
        "uuid4",
        "create_approval_workflow",
        "StakeholderApproval",
        "append",
        "print",
        "dumps",
        "check_approval_deadlines",
        "values",
        "get_workflow_status",
        "timedelta",
        "generate_approval_dashboard"
      ],
      "security/audit/vulnerability_scanner.py": [
        "_scan_javascript_file",
        "_scan_config_file",
        "getLogger",
        "upper",
        "_check_compliance_status",
        "now",
        "md5",
        "quote",
        "_test_authentication_vulnerabilities",
        "DynamicAnalysisScanner",
        "extend",
        "_test_session_management",
        "scan_web_application",
        "asdict",
        "items",
        "get",
        "error",
        "len",
        "glob",
        "VulnerabilityPatterns",
        "_check_insecure_configurations",
        "_check_sql_injection_patterns",
        "_check_exposed_secrets_in_config",
        "timestamp",
        "run_vulnerability_scan",
        "group",
        "post",
        "open",
        "_find_files",
        "VulnerabilityScanner",
        "enumerate",
        "_test_security_headers",
        "_scan_python_file",
        "_check_dom_vulnerabilities",
        "_test_input_validation",
        "finditer",
        "int",
        "info",
        "join",
        "_generate_vulnerability_summary",
        "run",
        "count",
        "encode",
        "_check_xss_patterns",
        "hexdigest",
        "run_comprehensive_scan",
        "lower",
        "start",
        "append",
        "Vulnerability",
        "any",
        "print",
        "StaticAnalysisScanner",
        "dumps",
        "text",
        "_check_hardcoded_secrets",
        "ClientSession",
        "ValueError",
        "scan_code_directory",
        "_generate_security_recommendations",
        "replace",
        "_check_insecure_settings",
        "set",
        "ScanResult",
        "total_seconds",
        "read",
        "_check_command_injection_patterns",
        "str"
      ],
      "agents/simplified/property_document_tools.py": [
        "analyze_prescription_image_tool_async",
        "get",
        "error",
        "len",
        "set_event_loop",
        "get_logger",
        "close",
        "analyze_prescription_image",
        "submit",
        "validate_prescription_data",
        "get_running_loop",
        "run_until_complete",
        "result",
        "from_function",
        "info",
        "new_event_loop",
        "join",
        "get_prescription_parser",
        "update",
        "lower",
        "any",
        "b64decode",
        "ThreadPoolExecutor",
        "str"
      ],
      "agents/simplified/property_tax_rag_tool.py": [
        "create_property_tax_search",
        "extend",
        "next",
        "get",
        "error",
        "len",
        "SearchRequest",
        "property_tax_assessment_recommendation_async",
        "set_event_loop",
        "get_logger",
        "close",
        "list",
        "submit",
        "get_running_loop",
        "run_until_complete",
        "result",
        "iter",
        "info",
        "from_function",
        "new_event_loop",
        "join",
        "search",
        "add",
        "lower",
        "append",
        "any",
        "set",
        "ThreadPoolExecutor",
        "str"
      ],
      "agents/simplified/ticket_tools.py": [
        "now",
        "check_ticket_status_async",
        "get_ticket",
        "error",
        "get_db_session",
        "isoformat",
        "set_event_loop",
        "get_logger",
        "get_event_loop",
        "run_until_complete",
        "from_function",
        "info",
        "Field",
        "new_event_loop",
        "check_active_ticket",
        "add_message",
        "create_ticket",
        "create_support_ticket_async",
        "get_ticket_service",
        "str"
      ],
      "agents/simplified/simplified_agent_v2.py": [
        "process_property_tax_message"
      ],
      "agents/simplified/enhanced_workflow_tools.py": [
        "_suggest_panel_async",
        "upper",
        "tool",
        "validate_pin_code",
        "create_booking",
        "now",
        "get_order_storage",
        "track_booking",
        "_check_panel_pricing",
        "is_enabled",
        "extend",
        "verify_payment_completion",
        "sync_retry",
        "isdigit",
        "items",
        "get",
        "error",
        "get_db_session",
        "len",
        "create_or_update",
        "timestamp",
        "get_customer_bookings",
        "all",
        "Decimal",
        "isoformat",
        "get_recommended_for_condition",
        "_create_order_async",
        "round",
        "get_logger",
        "enumerate",
        "get_by_booking_id",
        "list",
        "isinstance",
        "format_date_user_friendly",
        "get_lead_tracker",
        "search_tests",
        "CustomerRepository",
        "split",
        "info",
        "async_retry",
        "DatabaseRetryableError",
        "get_by_id",
        "Field",
        "warning",
        "join",
        "run",
        "store_order",
        "uuid4",
        "add",
        "lower",
        "print",
        "append",
        "any",
        "float",
        "getenv",
        "keys",
        "get_by_instagram_id",
        "type",
        "commit",
        "PropertyAssessmentRequestRepository",
        "DateIntelligenceService",
        "print_exc",
        "debug",
        "set",
        "parse_natural_date",
        "strftime",
        "replace",
        "parse_date_intelligently",
        "date",
        "PropertyAssessmentServiceRepository",
        "strptime",
        "timedelta",
        "strip",
        "str",
        "get_by_code"
      ],
      "agents/core/guardrails.py": [
        "getLogger",
        "analyze_user_input",
        "sub",
        "_add_limitation_clarifications",
        "items",
        "get",
        "analyze_ai_response",
        "len",
        "_has_disclaimer",
        "_get_safe_response",
        "get_domain_config",
        "check_escalation_needed",
        "get_guardrails",
        "info",
        "_remove_guarantee_language",
        "GuardrailResult",
        "search",
        "get_ai_config",
        "lower",
        "append",
        "any",
        "validate_legal_boundaries",
        "PropertyTaxGuardrails",
        "should_escalate",
        "apply_response_modifications",
        "get_legal_disclaimer"
      ],
      "agents/core/conversation_flows.py": [
        "_extract_information_from_message",
        "getLogger",
        "_generate_recommendations",
        "_handle_problem_identification",
        "_handle_payment_processing",
        "_request_missing_information",
        "get",
        "len",
        "_handle_information_gathering",
        "ConversationContext",
        "start_conversation",
        "group",
        "_clarify_recommendation_response",
        "find",
        "get_legal_disclaimer",
        "_get_concern_acknowledgment",
        "PropertyTaxConversationFlow",
        "_get_missing_booking_information",
        "get_template",
        "_confirm_cash_payment",
        "split",
        "_extract_booking_information",
        "info",
        "strip",
        "_start_booking_process",
        "process_message",
        "_request_payment_method_clarification",
        "join",
        "search",
        "pop",
        "_confirm_online_payment",
        "_process_by_stage",
        "lower",
        "append",
        "_initiate_payment_process",
        "_handle_booking_details",
        "any",
        "float",
        "get_conversation_flow_manager",
        "_provide_alternative_recommendations",
        "_generate_greeting_response",
        "_get_missing_information",
        "replace",
        "_handle_recommendation",
        "title",
        "_identify_concern_type",
        "_get_information_request",
        "detect_language_from_message",
        "_request_missing_booking_information"
      ],
      "agents/core/property_tax_assistant_v3.py": [
        "_store_conversation_history",
        "StateGraph",
        "add_edge",
        "now",
        "from_messages",
        "HumanMessage",
        "save_context",
        "extend",
        "ToolNode",
        "WorkflowAssistant",
        "get",
        "bind_tools",
        "error",
        "len",
        "timestamp",
        "add_conditional_edges",
        "health_check",
        "get_db_session",
        "create_or_update",
        "ToolMessage",
        "InMemorySaver",
        "ord",
        "copy",
        "MessageHistoryRepository",
        "get_logger",
        "enumerate",
        "list",
        "isinstance",
        "AIMessage",
        "get_context",
        "int",
        "warning",
        "info",
        "CustomerRepository",
        "join",
        "reversed",
        "get_property_tax_assistant",
        "add_node",
        "pop",
        "ChatGoogleGenerativeAI",
        "append",
        "getenv",
        "compile",
        "lower",
        "any",
        "invoke",
        "stream",
        "save_message",
        "create_property_tax_assistant",
        "get_conversation_store",
        "type",
        "_store_property_document_conversation",
        "hasattr",
        "get_conversation_history",
        "debug",
        "_handle_property_document_confirmation",
        "strip",
        "str",
        "bool"
      ],
      "agents/tools/document_processing_tool.py": [
        "upper",
        "sub",
        "tool",
        "now",
        "enrich_extracted_data",
        "validate_extracted_data",
        "extend",
        "items",
        "get",
        "error",
        "len",
        "abs",
        "isoformat",
        "group",
        "groups",
        "copy",
        "round",
        "get_logger",
        "max",
        "extract_from_plain_text",
        "isinstance",
        "document_processing_tool",
        "list",
        "generate_sample_document_data",
        "today",
        "startswith",
        "int",
        "info",
        "Field",
        "calculate_days_until_date",
        "sum",
        "join",
        "search",
        "generate_action_suggestions",
        "append",
        "float",
        "simulate_ocr_processing",
        "clean_extracted_value",
        "keys",
        "set",
        "values",
        "get_document_type_from_content",
        "date",
        "replace",
        "strptime",
        "total_seconds",
        "generate_mock_ocr_response",
        "strip",
        "str",
        "bool"
      ],
      "agents/tools/savings_calculator_tool.py": [
        "tool",
        "now",
        "analyze_exemption_opportunities",
        "savings_calculator_tool",
        "get",
        "calculate_annual_tax",
        "error",
        "estimate_appeal_outcome",
        "isoformat",
        "calculate_exemption_value",
        "calculate_total_tax_rate",
        "max",
        "get_logger",
        "copy",
        "round",
        "range",
        "generate_appeal_scenarios",
        "int",
        "info",
        "get_county_tax_info",
        "Field",
        "join",
        "get_exemption_info",
        "lower",
        "append",
        "keys",
        "replace",
        "str"
      ],
      "agents/tools/lead_qualification_tool.py": [
        "calculate_assessment_increase_percentage",
        "tool",
        "determine_quality_tier",
        "now",
        "extend",
        "sorted",
        "items",
        "get",
        "error",
        "len",
        "calculate_estimated_savings",
        "isoformat",
        "copy",
        "round",
        "get_logger",
        "calculate_total_tax_rate",
        "max",
        "sort",
        "determine_market_segment",
        "min",
        "int",
        "info",
        "Field",
        "join",
        "lead_qualification_tool",
        "sum",
        "lower",
        "append",
        "generate_sales_recommendations",
        "keys",
        "get_value_range_category",
        "get_increase_category",
        "estimate_appeal_success_probability",
        "calculate_qualification_score",
        "str"
      ],
      "agents/tools/property_validation_tool.py": [
        "upper",
        "tool",
        "search_properties_by_criteria",
        "extend",
        "items",
        "get",
        "error",
        "len",
        "normalize_address",
        "property_validation_tool",
        "max",
        "get_logger",
        "match",
        "format_property_response",
        "int",
        "split",
        "info",
        "find_property_by_address",
        "find_property_by_parcel_id",
        "Field",
        "join",
        "search",
        "lower",
        "append",
        "any",
        "keys",
        "replace",
        "detect_search_type",
        "strip",
        "str"
      ],
      "agents/tools/consultation_scheduling_tool.py": [
        "tool",
        "now",
        "extend",
        "get",
        "error",
        "len",
        "abs",
        "isoformat",
        "calculate_optimal_meeting_times",
        "property_validation_tool",
        "max",
        "get_logger",
        "round",
        "list",
        "sort",
        "range",
        "today",
        "find_best_consultant_match",
        "find_available_time_slots",
        "min",
        "validate_appointment_inputs",
        "warning",
        "info",
        "Field",
        "join",
        "lower",
        "append",
        "generate_appointment_confirmation_details",
        "get_consultant_recommendations",
        "keys",
        "generate_consultant_schedule",
        "combine",
        "hash",
        "replace",
        "time",
        "strftime",
        "date",
        "values",
        "strptime",
        "calculate_appointment_pricing",
        "timedelta",
        "total_seconds",
        "str"
      ],
      "agents/tools/deadline_tracking_tool.py": [
        "tool",
        "extend",
        "items",
        "get",
        "error",
        "len",
        "abs",
        "isoformat",
        "generate_quick_actions",
        "categorize_deadline",
        "get_logger",
        "isinstance",
        "list",
        "sort",
        "today",
        "calculate_payment_amount",
        "get_county_calendar",
        "min",
        "generate_notification_message",
        "int",
        "startswith",
        "info",
        "parse_date_safely",
        "Field",
        "join",
        "lower",
        "append",
        "get_current_deadlines",
        "keys",
        "deadline_tracking_tool",
        "schedule_notifications",
        "replace",
        "calculate_urgency_score",
        "date",
        "strftime",
        "title",
        "strptime",
        "timedelta",
        "str",
        "get_deadline_description"
      ],
      "services/ticket_management/webhook_interceptor.py": [
        "get_agent_response",
        "now",
        "get",
        "error",
        "get_db_session",
        "isoformat",
        "loads",
        "get_logger",
        "initialize",
        "publish",
        "info",
        "bind",
        "check_active_ticket",
        "add_message",
        "from_url",
        "WebhookInterceptor",
        "dumps",
        "send_text_message",
        "get_whatsapp_client",
        "delete",
        "ping",
        "get_ticket_service"
      ],
      "services/ticket_management/ticket_service.py": [
        "TicketService",
        "utcnow",
        "now",
        "where",
        "scalar_one_or_none",
        "generate_ticket_id",
        "get_ticket",
        "get",
        "error",
        "SupportTicket",
        "isoformat",
        "all",
        "_determine_category",
        "scalars",
        "loads",
        "rollback",
        "get_logger",
        "initialize",
        "setex",
        "publish",
        "list",
        "desc",
        "order_by",
        "choices",
        "sadd",
        "info",
        "refresh",
        "execute",
        "bind",
        "join",
        "reversed",
        "from_url",
        "add",
        "lower",
        "srem",
        "any",
        "dumps",
        "TicketMessage",
        "commit",
        "ping",
        "limit",
        "strftime",
        "_determine_priority",
        "select"
      ],
      "services/ticket_management/models.py": [
        "relationship",
        "String",
        "ForeignKey",
        "Column",
        "SQLEnum",
        "len",
        "isoformat"
      ],
      "services/messaging/modern_integrated_webhook_handler.py": [
        "send_service_options_menu",
        "get_webhook_interceptor",
        "_process_converted_interactive",
        "now",
        "_send_whatsapp_response",
        "send_appeal_guidance",
        "items",
        "get",
        "error",
        "len",
        "send_agent_response",
        "send_quick_actions_buttons",
        "ModernIntegratedWebhookHandler",
        "process_property_tax_message",
        "send_payment_options",
        "_handle_interactive_message",
        "verify_webhook",
        "get_logger",
        "parse_status_update",
        "_try_send_interactive_response",
        "_handle_payment_initiation",
        "send_property_lookup_result",
        "should_intercept",
        "_handle_consultation_scheduling",
        "_handle_media_message",
        "_handle_expert_consultation",
        "warning",
        "info",
        "_handle_status_update",
        "bind",
        "send_appeal_document_checklist",
        "lower",
        "any",
        "is_configured",
        "_get_session_id",
        "send_text_message",
        "get_property_tax_templates",
        "get_whatsapp_client",
        "_handle_whatsapp_message",
        "debug",
        "parse_webhook_message",
        "handle_customer_message",
        "total_seconds",
        "strip",
        "str"
      ],
      "services/messaging/whatsapp_client.py": [
        "json",
        "get",
        "error",
        "len",
        "post",
        "get_logger",
        "close",
        "warning",
        "info",
        "_get_session",
        "bind",
        "encode",
        "hexdigest",
        "WhatsAppClient",
        "getenv",
        "compare_digest",
        "ClientTimeout",
        "is_configured",
        "ClientSession",
        "_get_messaging_limit",
        "debug",
        "replace",
        "new",
        "str",
        "bool"
      ],
      "services/messaging/whatsapp_image_handler.py": [
        "startswith",
        "warning",
        "info",
        "ClientSession",
        "json",
        "_determine_image_format_from_data",
        "text",
        "get_logger",
        "_download_media_file",
        "download_image_from_whatsapp_message",
        "get",
        "getenv",
        "error",
        "len",
        "WhatsAppImageHandler",
        "_get_media_url",
        "read",
        "ClientTimeout"
      ],
      "services/messaging/property_tax_templates.py": [
        "send_text_message",
        "info",
        "get_whatsapp_client",
        "bind",
        "get_logger",
        "PropertyTaxTemplates",
        "send_template_message",
        "get",
        "error",
        "send_quick_actions_buttons",
        "send_interactive_message",
        "str",
        "bool"
      ],
      "services/messaging/message_batching.py": [
        "get_latest_message",
        "_should_process_immediately",
        "_ensure_cleanup_task",
        "now",
        "handler",
        "sleep",
        "get",
        "items",
        "error",
        "len",
        "get_combined_text",
        "create_task",
        "get_logger",
        "InstagramMessage",
        "_handle_message_internal",
        "list",
        "is_expired",
        "int",
        "info",
        "join",
        "add_message",
        "lower",
        "append",
        "_process_single_message",
        "any",
        "_schedule_batch_processing",
        "keys",
        "MessageBatcher",
        "MessageBatch",
        "debug",
        "time",
        "Lock",
        "_process_batch",
        "values",
        "cancel",
        "force_process_user_batch",
        "_cleanup_expired_batches",
        "total_seconds",
        "str"
      ],
      "services/data_acquisition/scheduler.py": [
        "now",
        "every",
        "_save_documents",
        "sleep",
        "get",
        "do",
        "error",
        "_schedule_job",
        "len",
        "items",
        "get_scheduler",
        "stop_scheduler",
        "add_job",
        "isoformat",
        "get_job_status",
        "create_task",
        "open",
        "get_logger",
        "getattr",
        "scrape_page",
        "isinstance",
        "Path",
        "scrape_texas_comptroller_data",
        "CollectionStats",
        "_schedule_retry",
        "load",
        "_run_job_async",
        "split",
        "info",
        "int",
        "_run_daily_comptroller_check",
        "at",
        "test_scheduler",
        "TexasComptrollerScraper",
        "run",
        "ScheduledJob",
        "lower",
        "append",
        "start_scheduler",
        "print",
        "_setup_default_jobs",
        "process_scraped_documents",
        "dumps",
        "scrape_county_appraisal_data",
        "function",
        "exists",
        "_save_collection_stats",
        "dump",
        "DataCollectionScheduler",
        "replace",
        "mkdir",
        "run_pending",
        "str"
      ],
      "services/data_acquisition/county_appraisal_scraper.py": [
        "scrape_with_semaphore",
        "find_property_tax_sections",
        "extend",
        "Semaphore",
        "sleep",
        "get",
        "get_text",
        "error",
        "len",
        "find",
        "get_logger",
        "CountyAppraisalScraper",
        "CountyInfo",
        "close",
        "decompose",
        "isinstance",
        "list",
        "_extract_county_citations",
        "urljoin",
        "find_all",
        "gather",
        "warning",
        "info",
        "scrape_all_counties",
        "join",
        "head",
        "_extract_content",
        "run",
        "BeautifulSoup",
        "findall",
        "add",
        "lower",
        "append",
        "_classify_county_document_type",
        "any",
        "scrape_county",
        "select_one",
        "print",
        "TCPConnector",
        "ClientTimeout",
        "text",
        "scrape_county_appraisal_data",
        "ClientSession",
        "scrape_county_page",
        "_is_county_property_tax_link",
        "ScrapedDocument",
        "soup",
        "set",
        "replace",
        "_extract_title",
        "strip",
        "test_county_scraper"
      ],
      "services/data_acquisition/texas_comptroller_scraper.py": [
        "scrape_with_semaphore",
        "md5",
        "extend",
        "_classify_document_type",
        "Semaphore",
        "sleep",
        "get",
        "get_text",
        "error",
        "len",
        "_extract_citations",
        "_extract_section_number",
        "scrape_linked_pages",
        "group",
        "find",
        "get_logger",
        "close",
        "_is_property_tax_related",
        "scrape_page",
        "decompose",
        "isinstance",
        "list",
        "scrape_all_property_tax_content",
        "scrape_texas_comptroller_data",
        "urljoin",
        "find_all",
        "gather",
        "warning",
        "info",
        "startswith",
        "join",
        "search",
        "_extract_content",
        "encode",
        "run",
        "hexdigest",
        "BeautifulSoup",
        "add",
        "select_one",
        "append",
        "lower",
        "any",
        "findall",
        "print",
        "TCPConnector",
        "ClientTimeout",
        "text",
        "test_scraper",
        "ClientSession",
        "ScrapedDocument",
        "soup",
        "set",
        "_extract_title",
        "_extract_effective_date",
        "strptime",
        "strip",
        "TexasComptrollerScraper"
      ],
      "services/data_acquisition/document_processor.py": [
        "unescape",
        "sub",
        "_extract_legal_concepts",
        "now",
        "_extract_fee_amounts",
        "Semaphore",
        "extend",
        "_chunk_form_text",
        "error",
        "len",
        "_extract_deadlines",
        "isoformat",
        "process_with_semaphore",
        "get_logger",
        "_chunk_faq_text",
        "_chunk_generic_text",
        "enumerate",
        "isinstance",
        "list",
        "min",
        "gather",
        "split",
        "info",
        "chunk_content",
        "test_processor",
        "DocumentProcessor",
        "generate_processing_notes",
        "sum",
        "clean_content",
        "search",
        "run",
        "process_document",
        "findall",
        "_extract_tax_concepts",
        "ProcessedDocument",
        "append",
        "lower",
        "any",
        "print",
        "_clean_legal_text",
        "_extract_property_types",
        "ScrapedDocument",
        "_clean_form_text",
        "_chunk_legal_text",
        "set",
        "calculate_quality_score",
        "_clean_faq_text",
        "process_documents_batch",
        "extract_metadata",
        "_remove_common_artifacts",
        "strip"
      ],
      "services/knowledge_base/legal_text_cleaner.py": [
        "_format_faq_text",
        "sub",
        "clean_legal_text",
        "_build_cleaning_rules",
        "items",
        "len",
        "test_cleaner",
        "_build_terminology_mappings",
        "get_logger",
        "_standardize_terminology",
        "_format_form_text",
        "sort",
        "_format_procedure_text",
        "min",
        "split",
        "info",
        "search",
        "run",
        "findall",
        "get_cleaning_suggestions",
        "lower",
        "append",
        "_build_citation_patterns",
        "compile",
        "any",
        "_normalize_citations",
        "print",
        "_calculate_cleaning_quality_score",
        "CleaningResult",
        "_apply_cleaning_pipeline",
        "escape",
        "CleaningRule",
        "_format_statute_text",
        "set",
        "LegalTextCleaner",
        "_build_formatting_patterns",
        "_assess_text_structure_quality",
        "_apply_document_specific_formatting",
        "strip"
      ],
      "services/knowledge_base/quality_validator.py": [
        "_generate_recommendations",
        "now",
        "extend",
        "validation_method",
        "get",
        "items",
        "error",
        "len",
        "max",
        "get_logger",
        "getattr",
        "initialize",
        "test_validator",
        "KnowledgeEntry",
        "ValidationResult",
        "_run_validation_rule",
        "min",
        "_build_quality_thresholds",
        "int",
        "warning",
        "info",
        "split",
        "join",
        "sum",
        "_calculate_quality_metrics",
        "search",
        "ValidationIssue",
        "run",
        "findall",
        "add",
        "lower",
        "append",
        "print",
        "any",
        "float",
        "validate_knowledge_entry",
        "_build_accuracy_patterns",
        "_calculate_overall_score",
        "escape",
        "ValidationRule",
        "hasattr",
        "PropertyTaxQualityValidator",
        "set",
        "replace",
        "_build_validation_rules",
        "get_citation_tracker",
        "str"
      ],
      "services/knowledge_base/content_processor.py": [
        "intersection",
        "test_processor",
        "_extract_qa_pairs",
        "now",
        "_process_single_document",
        "extend",
        "_process_form_document",
        "clean_legal_text",
        "_process_faq_document",
        "clean_faq_text",
        "get",
        "sorted",
        "error",
        "len",
        "load_citations_from_storage",
        "_build_knowledge_graph",
        "items",
        "isoformat",
        "group",
        "PropertyTaxContentProcessor",
        "_build_authority_chains",
        "max",
        "get_logger",
        "enumerate",
        "initialize",
        "match",
        "_build_content_templates",
        "_process_procedure_document",
        "_assess_difficulty_level",
        "_extract_form_sections",
        "_extract_procedure_steps",
        "KnowledgeEntry",
        "sort",
        "Path",
        "extract_citations_from_document",
        "min",
        "finditer",
        "int",
        "split",
        "_build_quality_criteria",
        "info",
        "clean_form_text",
        "_find_related_entries",
        "clean_procedural_text",
        "build_topic_hierarchy",
        "join",
        "sum",
        "KnowledgeGraph",
        "search",
        "get_knowledge_base_stats",
        "categorize_content",
        "run",
        "findall",
        "update",
        "lower",
        "append",
        "print",
        "any",
        "PropertyTaxTaxonomyBuilder",
        "keys",
        "_enhance_knowledge_entry",
        "_analyze_statute_structure",
        "clean_general_text",
        "_generate_title_from_content",
        "open",
        "dump",
        "set",
        "_process_general_document",
        "LegalTextCleaner",
        "_determine_relationship_type",
        "values",
        "_process_statute_document",
        "mkdir",
        "get_citation_tracker",
        "strip"
      ],
      "services/knowledge_base/taxonomy_builder.py": [
        "_build_property_types_taxonomy",
        "get_depth",
        "extend",
        "sorted",
        "items",
        "get",
        "error",
        "len",
        "_build_authorities_taxonomy",
        "_build_procedures_taxonomy",
        "defaultdict",
        "open",
        "max",
        "get_logger",
        "_generate_classification_reasoning",
        "enumerate",
        "initialize",
        "list",
        "Path",
        "test_taxonomy",
        "field",
        "min",
        "_build_collection_taxonomy",
        "load",
        "get_taxonomy_stats",
        "split",
        "info",
        "dict",
        "_build_property_taxation_taxonomy",
        "join",
        "categorize_content",
        "run",
        "_load_classification_patterns",
        "findall",
        "_build_base_taxonomy",
        "lower",
        "append",
        "_calculate_max_depth",
        "print",
        "ContentCategory",
        "PropertyTaxTaxonomyBuilder",
        "_build_appraisal_taxonomy",
        "_build_exemptions_taxonomy",
        "_build_appeals_taxonomy",
        "exists",
        "dump",
        "TaxonomyNode",
        "_build_legal_framework_taxonomy",
        "set",
        "values",
        "_identify_subtopics",
        "_add_taxonomy_node",
        "mkdir",
        "strip"
      ],
      "services/communication/message_handler.py": [
        "json",
        "add_message_handler",
        "get_webhook_interceptor",
        "_prepare_message_text",
        "now",
        "HumanMessage",
        "items",
        "get",
        "error",
        "len",
        "timestamp",
        "send_agent_response",
        "process_property_tax_message",
        "_interpret_quick_reply",
        "get_logger",
        "InstagramMessage",
        "UniversalMessageHandler",
        "SystemMessage",
        "should_intercept",
        "_intelligent_message_preparation",
        "int",
        "warning",
        "info",
        "process_message",
        "bind",
        "encode",
        "hexdigest",
        "ChatGoogleGenerativeAI",
        "getenv",
        "lower",
        "compare_digest",
        "_parse_messaging_event",
        "fetch_instagram_user_info",
        "invoke",
        "get_batch_stats",
        "_get_session_id",
        "send_text_message",
        "ClientSession",
        "get_whatsapp_client",
        "replace",
        "new",
        "debug",
        "handle_customer_message",
        "_send_response",
        "total_seconds",
        "strip",
        "str",
        "bool"
      ],
      "services/vector_store/semantic_search.py": [
        "_execute_search_by_type",
        "create_property_tax_search",
        "ranker",
        "_apply_final_filtering",
        "_hybrid_search",
        "_generate_legal_context",
        "_generate_relevance_explanation",
        "extend",
        "_calculate_semantic_relevance_score",
        "get",
        "_rank_and_score_results",
        "_legal_reasoning_search",
        "len",
        "error",
        "search_legal_documents",
        "SearchRequest",
        "_enhance_results_with_legal_context",
        "test_semantic_search",
        "get_logger",
        "initialize",
        "sort",
        "get_property_tax_embeddings",
        "PropertyTaxSemanticSearch",
        "_calculate_property_tax_relevance",
        "_build_concept_hierarchies",
        "_document_matches_scope",
        "min",
        "_calculate_keyword_relevance_score",
        "info",
        "split",
        "_semantic_search",
        "join",
        "sum",
        "_scope_to_document_type",
        "SearchResult",
        "search",
        "run",
        "fromisoformat",
        "_apply_legal_reasoning_analysis",
        "add",
        "lower",
        "append",
        "print",
        "any",
        "_rank_hybrid_results",
        "get_legal_vector_store",
        "ValueError",
        "_expand_query_with_property_tax_terms",
        "_extract_citation_references",
        "_enhance_query_for_semantic_search",
        "find_similar_property_tax_terms",
        "_apply_filters",
        "set",
        "_keyword_search",
        "_is_document_in_date_range",
        "_calculate_legal_reasoning_boost"
      ],
      "services/vector_store/citation_tracker.py": [
        "intersection",
        "CitationNetwork",
        "extend",
        "items",
        "_build_hierarchical_relationships",
        "get",
        "_build_topical_relationships",
        "len",
        "error",
        "isoformat",
        "defaultdict",
        "group",
        "groups",
        "open",
        "max",
        "get_logger",
        "enumerate",
        "sort",
        "Path",
        "CitationRelationship",
        "_build_authority_hierarchy",
        "field",
        "min",
        "_build_amendment_relationships",
        "finditer",
        "load",
        "extract_citations_from_document",
        "info",
        "_extract_topics_from_context",
        "build_citation_relationships",
        "join",
        "_build_authority_networks",
        "PropertyTaxCitationTracker",
        "fromisoformat",
        "run",
        "_parse_citation_details",
        "build_citation_networks",
        "lower",
        "start",
        "_build_citation_patterns",
        "LegalCitation",
        "append",
        "any",
        "_build_topic_networks",
        "print",
        "get_citation_stats",
        "test_citation_tracker",
        "exists",
        "dump",
        "_build_hierarchical_networks",
        "end",
        "set",
        "values",
        "mkdir",
        "dict"
      ],
      "services/vector_store/property_tax_embeddings.py": [
        "intersection",
        "sub",
        "DeterministicFakeEmbedding",
        "items",
        "error",
        "len",
        "union",
        "PropertyTaxEmbeddings",
        "embed_query",
        "_load_property_tax_terminology",
        "_load_concept_weights",
        "copy",
        "max",
        "get_logger",
        "enumerate",
        "PropertyTaxTermMapping",
        "_enhance_embedding_for_property_tax",
        "_calculate_term_similarity",
        "sort",
        "_calculate_property_tax_relevance",
        "test_embeddings",
        "min",
        "warning",
        "info",
        "split",
        "GoogleGenerativeAIEmbeddings",
        "sum",
        "run",
        "_optimize_text_for_property_tax",
        "_get_base_embeddings",
        "lower",
        "getenv",
        "append",
        "compile",
        "any",
        "print",
        "escape",
        "hasattr",
        "find_similar_property_tax_terms",
        "set",
        "values",
        "zip",
        "embed_documents",
        "_calculate_concept_boost",
        "aembed_documents"
      ],
      "services/vector_store/legal_document_indexer.py": [
        "test_legal_indexer",
        "as_retriever",
        "DeterministicFakeEmbedding",
        "extend",
        "_create_documents_from_processed",
        "_add_documents_to_store",
        "Chroma",
        "get",
        "search_legal_documents",
        "error",
        "len",
        "isoformat",
        "add_documents",
        "copy",
        "similarity_search",
        "get_logger",
        "enumerate",
        "_classify_legal_query",
        "round",
        "list",
        "Path",
        "range",
        "persist",
        "_build_search_filter",
        "warning",
        "info",
        "GoogleGenerativeAIEmbeddings",
        "join",
        "sum",
        "run",
        "count",
        "update",
        "lower",
        "getenv",
        "append",
        "_organize_documents_by_type",
        "_enhance_search_query",
        "any",
        "get_vector_store_stats",
        "print",
        "Document",
        "_analyze_legal_context",
        "_enhance_chunk_content",
        "_initialize_vectorstore",
        "set",
        "LegalDocumentVectorStore",
        "mkdir",
        "strip",
        "str"
      ],
      "services/persistence/redis_conversation_store.py": [
        "now",
        "lrange",
        "get",
        "error",
        "len",
        "isoformat",
        "loads",
        "get_logger",
        "lpush",
        "warning",
        "info",
        "execute",
        "_get_context_key",
        "bind",
        "reversed",
        "pipeline",
        "from_url",
        "append",
        "getenv",
        "dumps",
        "keys",
        "delete",
        "ping",
        "expire",
        "debug",
        "set",
        "RedisConversationStore",
        "_get_conversation_key",
        "str"
      ],
      "services/persistence/repositories.py": [
        "or_",
        "selectinload",
        "utcnow",
        "where",
        "scalar_one_or_none",
        "like",
        "get_by_request_id",
        "items",
        "get",
        "options",
        "error",
        "all",
        "scalars",
        "rollback",
        "get_logger",
        "setattr",
        "list",
        "desc",
        "order_by",
        "CustomerProfile",
        "json_extract",
        "info",
        "refresh",
        "execute",
        "bind",
        "reversed",
        "add",
        "lower",
        "append",
        "PropertyAssessmentRequest",
        "get_by_instagram_id",
        "and_",
        "MessageHistory",
        "commit",
        "hasattr",
        "limit",
        "select"
      ],
      "services/persistence/analytics_repository.py": [
        "now",
        "where",
        "scalar_one_or_none",
        "isnot",
        "get",
        "error",
        "Decimal",
        "group_by",
        "round",
        "get_logger",
        "desc",
        "order_by",
        "avg",
        "int",
        "warning",
        "info",
        "scalar",
        "execute",
        "bind",
        "sum",
        "count",
        "add",
        "append",
        "float",
        "and_",
        "flush",
        "label",
        "limit",
        "values",
        "select",
        "timedelta",
        "total_seconds",
        "UserAnalytics",
        "bool"
      ],
      "services/persistence/database.py": [
        "get_database_manager",
        "Numeric",
        "now",
        "error",
        "Table",
        "Index",
        "relationship",
        "rollback",
        "get_logger",
        "close",
        "DateTime",
        "SessionLocal",
        "UniqueConstraint",
        "async_sessionmaker",
        "run_sync",
        "info",
        "execute",
        "create_tables",
        "bind",
        "create_async_engine",
        "dispose",
        "get_session",
        "SQLEnum",
        "text",
        "String",
        "type",
        "ForeignKey",
        "commit",
        "Column",
        "DatabaseManager",
        "debug",
        "begin",
        "mapped_column"
      ],
      "services/persistence/order_storage.py": [
        "create_booking",
        "async_func",
        "now",
        "BookingRepository",
        "lrange",
        "OrderStorageService",
        "get",
        "error",
        "get_db_session",
        "create_or_update",
        "isoformat",
        "set_event_loop",
        "loads",
        "get_logger",
        "lpush",
        "close",
        "setex",
        "isinstance",
        "run_until_complete",
        "update_status",
        "CustomerRepository",
        "warning",
        "info",
        "new_event_loop",
        "bind",
        "wraps",
        "store_order",
        "from_url",
        "append",
        "get_order",
        "dumps",
        "ping",
        "expire",
        "date",
        "strptime"
      ],
      "services/voice/voice_setup.py": [
        "getLogger",
        "configure",
        "GenerativeModel",
        "add_argument",
        "cleanup_expired_rooms",
        "now",
        "main",
        "AccessToken",
        "create_healthcare_room",
        "get",
        "error",
        "len",
        "isoformat",
        "KrishnaVoiceSetup",
        "create_room",
        "loads",
        "with_grants",
        "DeleteRoomRequest",
        "test_voice_agent_connection",
        "list",
        "parse_args",
        "deploy_voice_agent",
        "with_name",
        "startswith",
        "info",
        "basicConfig",
        "ArgumentParser",
        "LiveKitAPI",
        "list_active_healthcare_rooms",
        "run",
        "fromisoformat",
        "to_jwt",
        "append",
        "print",
        "VideoGrants",
        "keys",
        "delete_room",
        "ListRoomsRequest",
        "hasattr",
        "with_identity",
        "strftime",
        "generate_content",
        "list_rooms",
        "timedelta",
        "total_seconds",
        "CreateRoomRequest",
        "str"
      ],
      "services/voice/livekit_data_bridge.py": [
        "getLogger",
        "send_data",
        "now",
        "_send_data_to_room",
        "get",
        "error",
        "len",
        "isoformat",
        "all",
        "PrescriptionMessage",
        "copy",
        "send_prescription_data",
        "startswith",
        "warning",
        "info",
        "LiveKitDataBridge",
        "get_livekit_data_bridge",
        "LiveKitAPI",
        "pop",
        "encode",
        "getenv",
        "dumps",
        "load_dotenv",
        "_get_room_name",
        "SendDataRequest",
        "ValueError",
        "ListRoomsRequest",
        "list_rooms",
        "send_prescription_failure"
      ],
      "services/voice/voice_chat_state.py": [
        "now",
        "get",
        "error",
        "isoformat",
        "loads",
        "get_logger",
        "setex",
        "_get_redis_client",
        "VoiceChatStateManager",
        "warning",
        "info",
        "from_url",
        "dumps",
        "is_configured",
        "send_text_message",
        "delete",
        "get_whatsapp_client",
        "strptime",
        "total_seconds",
        "str"
      ],
      "services/voice/property_tax_voice_agent.py": [
        "getLogger",
        "shutdown",
        "now",
        "setLevel",
        "sleep",
        "get",
        "get_property_document_processing_status",
        "error",
        "property_tax_recommendation_async",
        "get_voice_chat_state_manager",
        "len",
        "isdigit",
        "exit",
        "all",
        "register_voice_room",
        "CenturyPropertyTaxAssistant",
        "on",
        "_create_order_async",
        "group",
        "loads",
        "create_task",
        "enumerate",
        "DeleteRoomRequest",
        "match",
        "abspath",
        "list",
        "chdir",
        "WorkerOptions",
        "generate_reply",
        "function_tool",
        "connect",
        "_end_call",
        "startswith",
        "warning",
        "info",
        "basicConfig",
        "get_livekit_data_bridge",
        "join",
        "dirname",
        "search",
        "set_property_document_processing_status",
        "end_voice_call",
        "lower",
        "append",
        "getenv",
        "print",
        "request_property_document_via_whatsapp",
        "start",
        "basename",
        "load_dotenv",
        "invoke",
        "keys",
        "start_voice_call",
        "exists",
        "delete_room",
        "run_app",
        "hasattr",
        "_cleanup",
        "RealtimeModel",
        "values",
        "strftime",
        "__init__",
        "super",
        "AgentSession",
        "getcwd",
        "decode",
        "strip",
        "str",
        "bool"
      ],
      "services/voice/voice_config.py": [
        "startswith",
        "now",
        "replace",
        "ChatGoogleGenerativeAI",
        "getenv",
        "lower",
        "get",
        "SystemMessage",
        "VoiceConfig",
        "strip",
        "invoke"
      ],
      "services/utils/date_parser.py": [
        "now",
        "datetime",
        "items",
        "group",
        "groups",
        "weekday",
        "map",
        "isinstance",
        "format_date_user_friendly",
        "int",
        "startswith",
        "search",
        "lower",
        "print",
        "parse_natural_date",
        "strftime",
        "strptime",
        "timedelta",
        "strip"
      ],
      "services/utils/retry_handler.py": [
        "_should_attempt_reset",
        "Exception",
        "now",
        "sleep",
        "error",
        "RetryExhaustedError",
        "get_logger",
        "isinstance",
        "range",
        "min",
        "warning",
        "info",
        "wraps",
        "lower",
        "any",
        "_on_success",
        "random",
        "func",
        "CircuitBreaker",
        "type",
        "hasattr",
        "_on_failure",
        "is_retryable_exception",
        "total_seconds",
        "str"
      ],
      "services/payments/mock_razorpay.py": [
        "upper",
        "simulate_payment_success",
        "now",
        "get",
        "error",
        "timestamp",
        "get_logger",
        "MockRazorpayService",
        "int",
        "info",
        "bind",
        "encode",
        "hexdigest",
        "uuid4",
        "create_payment_link",
        "getenv",
        "compare_digest",
        "new",
        "strftime",
        "timedelta",
        "str"
      ],
      "services/payments/razorpay_integration.py": [
        "verify_payment_link_signature",
        "fetch",
        "now",
        "BookingRepository",
        "get",
        "error",
        "get_db_session",
        "timestamp",
        "get_customer_bookings",
        "all",
        "loads",
        "get_payment_details",
        "get_logger",
        "ainvoke",
        "Client",
        "int",
        "warning",
        "info",
        "CustomerRepository",
        "bind",
        "verify_payment_signature",
        "encode",
        "hexdigest",
        "create_payment_link",
        "getenv",
        "print",
        "compare_digest",
        "RazorpayService",
        "get_by_instagram_id",
        "verify_webhook_signature",
        "new",
        "strftime",
        "create",
        "timedelta",
        "str",
        "bool"
      ],
      "src/api/integrated_webhooks.py": [
        "get_database_manager",
        "json",
        "getLogger",
        "Exception",
        "now",
        "get",
        "error",
        "len",
        "PlainTextResponse",
        "isoformat",
        "APIRouter",
        "HTTPException",
        "post",
        "round",
        "close",
        "Response",
        "search_assessments",
        "warning",
        "info",
        "AssessmentCatalogRepository",
        "get_session",
        "getenv",
        "append",
        "dumps",
        "get_handler_stats",
        "get_conversation_store",
        "body",
        "handle_webhook",
        "force_process_user_batch",
        "total_seconds",
        "health_check",
        "str"
      ],
      "src/api/whatsapp_webhooks.py": [
        "json",
        "send_service_options_menu",
        "set_prescription_processing_status",
        "now",
        "handle_message",
        "save_context",
        "get_business_configuration",
        "download_image_from_whatsapp_message",
        "get",
        "analyze_prescription_image_tool_async",
        "error",
        "len",
        "PlainTextResponse",
        "get_voice_chat_state_manager",
        "b64encode",
        "send_quick_actions_buttons",
        "APIRouter",
        "send_payment_options",
        "HTTPException",
        "post",
        "create_task",
        "verify_webhook",
        "get_logger",
        "_handle_voice_call_prescription_image",
        "get_business_profile",
        "save_prescription_context",
        "list",
        "parse_status_update",
        "get_context",
        "_handle_whatsapp_image_message",
        "send_property_lookup_result",
        "send_prescription_data",
        "get_livekit_data_bridge",
        "warning",
        "info",
        "Query",
        "join",
        "_handle_whatsapp_message_safe",
        "add",
        "is_voice_call_active",
        "append",
        "send_appeal_document_checklist",
        "is_configured",
        "send_text_message",
        "get_property_tax_templates",
        "verify_webhook_signature",
        "get_conversation_store",
        "get_whatsapp_client",
        "body",
        "difference_update",
        "_handle_whatsapp_status",
        "_handle_whatsapp_message",
        "set",
        "debug",
        "replace",
        "parse_webhook_message",
        "decode",
        "WhatsAppImageHandler",
        "send_prescription_failure",
        "strip",
        "str",
        "bool"
      ],
      "src/api/business_webhooks.py": [
        "get_database_manager",
        "json",
        "getLogger",
        "now",
        "JSONResponse",
        "handle_incoming_message",
        "get",
        "error",
        "len",
        "PlainTextResponse",
        "isoformat",
        "APIRouter",
        "HTTPException",
        "post",
        "round",
        "close",
        "search_tests",
        "warning",
        "info",
        "get_session",
        "from_url",
        "getenv",
        "append",
        "get_handler_statistics",
        "body",
        "ping",
        "force_process_user_batch",
        "PropertyAssessmentServiceRepository",
        "total_seconds",
        "health_check",
        "str"
      ],
      "src/api/report_management.py": [
        "now",
        "BookingRepository",
        "get",
        "get_customer_bookings",
        "len",
        "get_db_session",
        "isoformat",
        "APIRouter",
        "post",
        "get_by_booking_id",
        "get_by_phone",
        "CustomerRepository",
        "get_by_id",
        "update_booking_status",
        "append",
        "float",
        "dumps",
        "get_all_bookings",
        "replace",
        "str"
      ],
      "testing/performance/stress_testing_framework.py": [
        "wait_for",
        "disk_io_counters",
        "getLogger",
        "now",
        "choice",
        "StressTestConfiguration",
        "extend",
        "sorted",
        "pids",
        "sleep",
        "get",
        "error",
        "len",
        "isoformat",
        "_execute_stress_pattern",
        "net_io_counters",
        "run_stress_test_example",
        "post",
        "create_task",
        "max",
        "enumerate",
        "_asdict",
        "randint",
        "StressTestingFramework",
        "clear",
        "spike_pattern",
        "list",
        "get_peak_usage",
        "linear_ramp",
        "cpu_percent",
        "range",
        "_detect_failure_modes",
        "StressPatternGenerator",
        "_calculate_resilience_score",
        "virtual_memory",
        "stop_monitoring",
        "_check_system_breaking_point",
        "_run_chaos_scenario",
        "min",
        "total_seconds",
        "int",
        "warning",
        "info",
        "gather",
        "_collect_real_time_metrics",
        "uniform",
        "_generate_load_pattern",
        "sum",
        "_analyze_performance_degradation",
        "start_monitoring",
        "pop",
        "sawtooth_pattern",
        "run",
        "StressTestResult",
        "_run_stress_user_session",
        "append",
        "print",
        "_generate_stress_test_recommendations",
        "ClientTimeout",
        "keys",
        "ClientSession",
        "net_connections",
        "exponential_growth",
        "hasattr",
        "getloadavg",
        "set",
        "time",
        "cancel",
        "debug",
        "run_stress_test",
        "SystemMonitor",
        "read",
        "str",
        "done"
      ],
      "testing/performance/load_testing_suite.py": [
        "getLogger",
        "upper",
        "now",
        "choice",
        "_analyze_threshold_compliance",
        "UserSession",
        "extend",
        "sorted",
        "asdict",
        "sleep",
        "get",
        "RequestResult",
        "error",
        "len",
        "run_load_test",
        "items",
        "isoformat",
        "all",
        "run_load_test_example",
        "_select_user_scenario",
        "post",
        "mean",
        "_calculate_performance_metrics",
        "create_task",
        "randint",
        "round",
        "enumerate",
        "max",
        "LoadTestScenario",
        "validate_performance_result",
        "list",
        "isinstance",
        "_generate_performance_recommendations",
        "range",
        "LoadTestResult",
        "min",
        "total_seconds",
        "choices",
        "int",
        "split",
        "info",
        "uniform",
        "_percentile",
        "_make_request",
        "run",
        "median",
        "lower",
        "append",
        "print",
        "_prepare_request",
        "as_completed",
        "dumps",
        "ClientTimeout",
        "keys",
        "ClientSession",
        "_generate_comprehensive_report",
        "ValueError",
        "set",
        "time",
        "values",
        "get_threshold",
        "LoadTestingSuite",
        "get_load_test_config",
        "read",
        "VirtualUser",
        "str",
        "run_session"
      ],
      "tests/tools/test_lead_qualification_tool.py": [
        "max",
        "lead_qualification_tool",
        "filter_leads_by_criteria",
        "qualify_multiple_leads",
        "main",
        "get_lead_recommendations_summary",
        "generate_lead_report",
        "items",
        "get",
        "append",
        "print",
        "len",
        "range",
        "min"
      ],
      "tests/tools/test_runner.py": [
        "run_individual_tool_tests",
        "main",
        "savings_calculator_tool",
        "items",
        "len",
        "test_ai_framework_integration",
        "consultation_scheduling_tool",
        "property_validation_tool",
        "insert",
        "document_processing_tool",
        "isinstance",
        "Path",
        "test_tool_integration",
        "lead_qualification_tool",
        "sum",
        "run",
        "print",
        "deadline_tracking_tool",
        "hasattr",
        "replace",
        "time",
        "values",
        "test_mock_data_availability",
        "str"
      ],
      "tests/tools/test_property_validation_tool.py": [
        "gather",
        "property_validation_tool",
        "now",
        "get_supported_counties",
        "main",
        "all",
        "isinstance",
        "time",
        "detect_search_type",
        "lower",
        "print",
        "len",
        "normalize_address",
        "get_property_type_info",
        "isoformat",
        "format_property_response",
        "validate_multiple_properties"
      ],
      "tests/tools/test_savings_calculator_tool.py": [
        "gather",
        "calculate_multi_year_projections",
        "enumerate",
        "main",
        "savings_calculator_tool",
        "time",
        "next",
        "items",
        "get",
        "print",
        "title",
        "len",
        "compare_county_rates"
      ],
      "demo/monitoring/demo_performance_tracker.py": [
        "_get_performance_status",
        "getLogger",
        "_get_recent_metrics",
        "_calculate_resolution_rate",
        "now",
        "_analyze_by_persona",
        "sorted",
        "asdict",
        "items",
        "_update_real_time_metrics",
        "len",
        "_analyze_accuracy",
        "isoformat",
        "defaultdict",
        "ConversationMetrics",
        "max",
        "getattr",
        "clear",
        "PerformanceMetric",
        "DemoPerformanceTracker",
        "min",
        "warning",
        "info",
        "deque",
        "_count_by_attribute",
        "sum",
        "append",
        "_analyze_response_times",
        "dumps",
        "_analyze_by_scenario",
        "ValueError",
        "set",
        "timedelta",
        "_analyze_escalations",
        "dict"
      ],
      "demo/scenarios/escalation_scenarios.py": [
        "EscalationDemoScenarios",
        "_create_language_barrier_scenarios",
        "get_scenarios_by_escalation_type",
        "_create_emotional_escalation_scenarios",
        "_create_urgent_deadline_scenarios",
        "get_scenarios_by_urgency",
        "sum",
        "choice",
        "_create_multi_jurisdiction_scenarios",
        "extend",
        "EscalationScenario",
        "_generate_scenarios",
        "append",
        "get_scenarios_by_trigger",
        "len",
        "_create_legal_escalation_scenarios",
        "_create_technical_escalation_scenarios"
      ],
      "demo/scenarios/__init__.py": [
        "get_scenarios_by_category",
        "_get_category_description",
        "choice",
        "extend",
        "sorted",
        "items",
        "get",
        "get_scenarios_by_persona",
        "len",
        "get_random_scenario",
        "DemoScenarioManager",
        "getattr",
        "get_scenario_categories",
        "list",
        "ScenarioCategory",
        "get_demo_summary",
        "validate_scenarios",
        "add",
        "get_all_scenarios",
        "append",
        "lower",
        "hasattr",
        "replace",
        "values",
        "set",
        "get_scenario_by_id",
        "title",
        "_get_all_personas",
        "str"
      ],
      "demo/scenarios/assessment_appeal_scenarios.py": [
        "AssessmentAppealDemoScenarios",
        "_create_deadline_scenarios",
        "choice",
        "extend",
        "_create_residential_appeal_scenarios",
        "_create_evidence_scenarios",
        "AssessmentAppealScenario",
        "_generate_scenarios",
        "append",
        "_create_commercial_appeal_scenarios",
        "get_sample_properties",
        "_create_status_scenarios"
      ],
      "demo/scenarios/payment_processing_scenarios.py": [
        "PaymentProcessingScenario",
        "_create_online_payment_scenarios",
        "choice",
        "_create_late_payment_scenarios",
        "extend",
        "_create_payment_history_scenarios",
        "_create_refund_scenarios",
        "_create_installment_scenarios",
        "_generate_scenarios",
        "_create_hardship_scenarios",
        "append",
        "get_sample_properties",
        "PaymentProcessingDemoScenarios"
      ],
      "demo/scenarios/exemption_application_scenarios.py": [
        "_create_disability_scenarios",
        "_create_homestead_scenarios",
        "_create_senior_scenarios",
        "ExemptionApplicationScenario",
        "_create_veteran_scenarios",
        "choice",
        "ExemptionApplicationDemoScenarios",
        "extend",
        "_generate_scenarios",
        "_create_agricultural_scenarios",
        "_create_solar_scenarios",
        "append",
        "get_sample_properties"
      ],
      "demo/scenarios/multi_property_scenarios.py": [
        "MultiPropertyScenario",
        "sum",
        "_create_moderate_portfolio_scenarios",
        "choice",
        "extend",
        "get_scenarios_by_portfolio_type",
        "MultiPropertyDemoScenarios",
        "_generate_scenarios",
        "_create_simple_portfolio_scenarios",
        "append",
        "len",
        "get_scenarios_by_complexity",
        "get_sample_properties",
        "_create_complex_portfolio_scenarios"
      ],
      "demo/scenarios/basic_inquiry_scenarios.py": [
        "_create_property_value_scenarios",
        "_create_tax_amount_scenarios",
        "BasicInquiryScenario",
        "_create_payment_options_scenarios",
        "choice",
        "extend",
        "_create_tax_rate_scenarios",
        "BasicInquiryDemoScenarios",
        "_generate_scenarios",
        "_create_payment_due_scenarios",
        "append",
        "get_sample_properties",
        "_create_exemption_scenarios"
      ],
      "demo/presentations/executive_summary_generator.py": [
        "_create_metrics_chart",
        "getLogger",
        "_create_compliance_chart",
        "set_ylabel",
        "TechnicalCapability",
        "now",
        "ExecutiveSummaryGenerator",
        "asdict",
        "generate_executive_presentation",
        "_calculate_roi_analysis",
        "error",
        "len",
        "timestamp",
        "set_ylim",
        "b64encode",
        "xticks",
        "get_height",
        "_generate_appendices",
        "savefig",
        "get_width",
        "BytesIO",
        "enumerate",
        "close",
        "tick_params",
        "list",
        "tight_layout",
        "range",
        "_generate_technical_capabilities",
        "_generate_key_benefits",
        "_create_roi_chart",
        "set_xlabel",
        "_generate_executive_summary",
        "int",
        "_generate_business_metrics",
        "info",
        "_generate_compliance_status",
        "_generate_implementation_timeline",
        "BusinessMetric",
        "ROICalculation",
        "_generate_presentation_title",
        "legend",
        "axhline",
        "print",
        "ExecutivePresentation",
        "generate_presentation_charts",
        "ComplianceStatus",
        "dumps",
        "text",
        "get_x",
        "barh",
        "set_title",
        "grid",
        "seek",
        "plot",
        "bar",
        "zip",
        "subplots",
        "decode",
        "_generate_risk_assessment",
        "read",
        "_generate_strategic_recommendations",
        "str",
        "get_y"
      ],
      "demo/environment/demo_configuration.py": [
        "getLogger",
        "get_settings",
        "now",
        "asdict",
        "items",
        "get",
        "DemoPerformanceTargets",
        "error",
        "len",
        "all",
        "isoformat",
        "open",
        "DemoScenarioConfig",
        "get_demo_database_config",
        "list",
        "Path",
        "int",
        "_load_scenario_configs",
        "get_enabled_scenarios",
        "get_demo_redis_config",
        "DemoSettings",
        "lower",
        "getenv",
        "append",
        "update",
        "_save_scenario_configs",
        "dump",
        "get_demo_ai_config",
        "set",
        "values",
        "_load_demo_settings",
        "DemoConfigurationManager",
        "mkdir",
        "str"
      ],
      "demo/environment/demo_reset_manager.py": [
        "_clear_active_conversations",
        "getLogger",
        "DemoResetManager",
        "_load_fresh_demo_data",
        "get_last_reset_time",
        "now",
        "_clear_temporary_session_data",
        "extend",
        "_reset_payment_simulation_data",
        "sorted",
        "sleep",
        "get",
        "error",
        "len",
        "isoformat",
        "validate_demo_environment",
        "initialize_connections",
        "max",
        "get_demo_database_config",
        "close",
        "_reset_analytics_data",
        "connect",
        "_reset_demo_property_data",
        "info",
        "execute",
        "_reset_demo_sessions",
        "_clear_ai_response_cache",
        "get_demo_redis_config",
        "_reset_conversation_data",
        "_reset_demo_user_states",
        "append",
        "perform_full_reset",
        "ResetOperation",
        "cursor",
        "keys",
        "delete",
        "commit",
        "strftime",
        "timedelta",
        "total_seconds",
        "str",
        "Redis"
      ],
      "scripts/cleanup/clear-user-redis.py": [
        "keys",
        "startswith",
        "ArgumentParser",
        "delete",
        "add_argument",
        "clear_user_data",
        "main",
        "ping",
        "items",
        "setdefault",
        "print",
        "append",
        "len",
        "exit",
        "parse_args",
        "Redis"
      ],
      "scripts/cleanup/clear-all-sessions.py": [
        "keys",
        "startswith",
        "ArgumentParser",
        "delete",
        "add_argument",
        "clear_all_sessions",
        "main",
        "set",
        "ping",
        "list",
        "replace",
        "update",
        "input",
        "print",
        "len",
        "exit",
        "parse_args",
        "Redis"
      ],
      "scripts/cleanup/clear-all-data.py": [
        "aclose",
        "main",
        "error",
        "get_db_session",
        "len",
        "exit",
        "get_logger",
        "insert",
        "Path",
        "warning",
        "info",
        "scalar",
        "clear_sqlite_data",
        "execute",
        "run",
        "from_url",
        "print",
        "text",
        "verify_cleanup",
        "keys",
        "delete",
        "commit",
        "clear_redis_data",
        "fetchone",
        "str"
      ],
      "scripts/cleanup/clear-sessions-only.py": [
        "keys",
        "startswith",
        "warning",
        "info",
        "delete",
        "get_logger",
        "aclose",
        "main",
        "run",
        "insert",
        "from_url",
        "Path",
        "clear_session_data",
        "append",
        "error",
        "len",
        "exit",
        "str"
      ]
    },
    "usage_frequency": {
      "startswith": 15,
      "setup": 1,
      "open": 8,
      "find_packages": 1,
      "read": 7,
      "strip": 20,
      "dirname": 6,
      "abspath": 6,
      "validate_workflow_paths": 1,
      "validate_tool_implementation": 1,
      "isinstance": 20,
      "validate_data_structures": 1,
      "main": 14,
      "exit": 9,
      "items": 42,
      "print": 44,
      "append": 67,
      "len": 74,
      "validate_compliance_features": 1,
      "create_order": 2,
      "test_sample_collection_scheduling": 1,
      "validate_pin_code": 2,
      "schedule_sample_collection": 2,
      "test_order_creation": 1,
      "get": 74,
      "check_report_status": 1,
      "ainvoke": 3,
      "test_payment_options": 1,
      "confirm_order_cash_payment": 1,
      "test_report_status": 1,
      "join": 31,
      "run": 26,
      "test_workflow_state_transitions": 1,
      "create_payment_link": 3,
      "any": 28,
      "test_advanced_panels": 1,
      "suggest_advanced_test_panel": 1,
      "print_exc": 4,
      "get_payment_options": 1,
      "test_cash_payment_confirmation": 1,
      "test_pin_validation": 1,
      "test_multiple_concurrent_bookings": 1,
      "timedelta": 18,
      "parse_date_intelligently": 3,
      "insert": 5,
      "get_current_time_info": 2,
      "test_booking_scenarios": 1,
      "today": 6,
      "range": 13,
      "test_natural_language_dates": 1,
      "validate_booking_constraints": 1,
      "_detect_circular_dependencies": 1,
      "_calculate_import_statistics": 1,
      "index": 1,
      "visit_FunctionDef": 1,
      "generic_visit": 1,
      "parse": 1,
      "defaultdict": 4,
      "_identify_zero_usage": 1,
      "max": 21,
      "list": 31,
      "Path": 11,
      "ImportUsageVisitor": 1,
      "split": 14,
      "DependencyAnalyzer": 1,
      "remove": 1,
      "rglob": 1,
      "sum": 18,
      "_analyze_file": 1,
      "relative_to": 1,
      "add": 12,
      "update": 10,
      "_analyze_package_usage": 1,
      "_generate_statistics": 1,
      "lower": 53,
      "_generate_import_analysis": 1,
      "keys": 24,
      "dump": 7,
      "_generate_usage_analysis": 1,
      "analyze_codebase": 1,
      "set": 29,
      "visit": 1,
      "values": 21,
      "Counter": 1,
      "dfs": 1,
      "_generate_risk_assessment": 2,
      "_calculate_usage_frequency": 1,
      "dict": 4,
      "str": 50,
      "verify_webhook_signature": 3,
      "test_mock_payment_link_creation": 1,
      "test_mock_security_features": 1,
      "test_integration_with_razorpay_service": 1,
      "getenv": 23,
      "test_mock_payment_verification": 1,
      "test_mock_payment_url_format": 1,
      "enumerate": 16,
      "test_intelligent_booking": 1,
      "run_tests": 1,
      "ArgumentParser": 4,
      "add_argument": 4,
      "check_dependencies": 1,
      "extend": 32,
      "replace": 23,
      "run_command": 1,
      "__import__": 1,
      "parse_args": 4,
      "wait_for": 2,
      "fixture": 1,
      "AuthManager": 1,
      "ConfigurationGenerator": 1,
      "initialize": 7,
      "close": 12,
      "NamedTemporaryFile": 1,
      "MessageHandlerRegistry": 1,
      "create_user": 1,
      "Message": 1,
      "create_manager": 1,
      "new_event_loop": 5,
      "cleanup": 1,
      "dumps": 16,
      "EngineAPI": 1,
      "get_event_loop_policy": 1,
      "hash": 2,
      "StateManagerConfig": 1,
      "MetricsCollector": 1,
      "AnalyticsEngine": 1,
      "unlink": 1,
      "format": 1,
      "warning": 34,
      "getLogger": 22,
      "ord": 2,
      "error": 59,
      "get_template": 2,
      "AIModelConfig": 1,
      "is_within_legal_boundaries": 1,
      "PropertyTaxAIConfig": 1,
      "DomainConfig": 1,
      "get_domain_config": 2,
      "info": 64,
      "get_ai_config": 2,
      "get_model_config": 1,
      "format_response_with_disclaimers": 1,
      "should_escalate": 2,
      "get_legal_disclaimer": 3,
      "RetentionPeriod": 1,
      "upper": 9,
      "ComplianceLevel": 1,
      "validate_compliance_configuration": 1,
      "get_compliance_summary": 1,
      "int": 30,
      "load_dotenv": 7,
      "TDLRComplianceSettings": 1,
      "title": 7,
      "bool": 11,
      "print_config": 1,
      "validate": 1,
      "Settings": 1,
      "get_scenario_configuration_summary": 1,
      "validate_performance_result": 2,
      "get_threshold": 2,
      "LoadTestConfiguration": 1,
      "float": 8,
      "PerformanceThreshold": 1,
      "PerformanceThresholds": 1,
      "get_mandatory_policies": 1,
      "validate_security_configuration": 1,
      "get_policies_by_framework": 1,
      "get_policies_by_severity": 1,
      "SecurityConfiguration": 1,
      "SecurityPolicies": 1,
      "get_security_configuration": 1,
      "SecurityPolicy": 1,
      "get_database_manager": 4,
      "configure": 2,
      "JSONResponse": 2,
      "exception_handler": 1,
      "makedirs": 1,
      "FastAPI": 1,
      "PositionalArgumentsFormatter": 1,
      "JSONRenderer": 1,
      "include_router": 1,
      "LoggerFactory": 1,
      "basicConfig": 3,
      "create_tables": 2,
      "StreamHandler": 1,
      "is_configured": 5,
      "get_whatsapp_client": 7,
      "add_middleware": 1,
      "FileHandler": 1,
      "on_event": 1,
      "now": 50,
      "_parse_named_days": 1,
      "group": 9,
      "callable": 1,
      "groups": 4,
      "weekday": 2,
      "get_logger": 44,
      "_get_available_time_slots": 1,
      "result": 3,
      "bind": 14,
      "search": 15,
      "_parse_relative_dates": 1,
      "_is_business_day": 1,
      "_validate_booking_date": 1,
      "DateIntelligenceService": 2,
      "_parse_relative_weeks": 1,
      "_get_next_business_day": 1,
      "_create_error_response": 1,
      "_is_business_hours": 1,
      "strftime": 14,
      "date": 8,
      "time": 9,
      "_parse_specific_dates": 1,
      "choice": 13,
      "isoformat": 37,
      "randint": 5,
      "sort": 10,
      "find_available_time_slots": 2,
      "min": 20,
      "random": 4,
      "generate_consultant_schedule": 2,
      "strptime": 10,
      "round": 13,
      "get_personas_by_tech_comfort": 1,
      "get_persona_by_id": 1,
      "_create_first_time_homeowner_personas": 1,
      "_create_personas": 1,
      "CustomerPersona": 1,
      "_create_agricultural_personas": 1,
      "_create_senior_citizen_personas": 1,
      "get_personas_by_type": 1,
      "_create_dispute_personas": 1,
      "DemoCustomerPersonas": 1,
      "_create_commercial_personas": 1,
      "_create_multi_property_personas": 1,
      "categorize_deadline": 2,
      "get_county_calendar": 2,
      "get_deadline_description": 2,
      "generate_address": 1,
      "generate_assessment_history": 1,
      "choices": 3,
      "generate_property_characteristics": 1,
      "uniform": 4,
      "generate_parcel_id": 1,
      "generate_property_records": 1,
      "match": 5,
      "get_value_range_category": 2,
      "get_increase_category": 2,
      "normalvariate": 1,
      "AuditEvent": 1,
      "ComplianceAuditSummary": 1,
      "generate_compliance_audit_report": 1,
      "asdict": 6,
      "_export_to_csv": 1,
      "log_property_tax_operation": 1,
      "log_user_authentication": 1,
      "writerow": 1,
      "log_audit_event": 1,
      "log_data_access": 1,
      "log_compliance_violation": 1,
      "verify_audit_integrity": 1,
      "writer": 1,
      "fromisoformat": 5,
      "pop": 5,
      "encode": 8,
      "hexdigest": 7,
      "uuid4": 4,
      "getvalue": 1,
      "search_audit_events": 1,
      "AuditTrailGenerator": 1,
      "_calculate_event_checksum": 1,
      "ValueError": 7,
      "StringIO": 1,
      "_update_audit_chain": 1,
      "sha256": 1,
      "AuditChain": 1,
      "is_restricted_information": 1,
      "_check_pii_exposure": 1,
      "generate_compliance_report": 1,
      "_handle_data_access_request": 1,
      "PrivacyComplianceValidator": 1,
      "_check_data_minimization": 1,
      "_classify_data": 1,
      "_extract_data_subject_id": 1,
      "PrivacyViolation": 1,
      "is_public_record_category": 1,
      "_check_encryption_compliance": 1,
      "_get_required_fields_for_context": 1,
      "_handle_data_rectification_request": 1,
      "_check_access_control_compliance": 1,
      "_handle_data_portability_request": 1,
      "_is_data_encrypted": 1,
      "get_retention_period_for_classification": 1,
      "validate_data_handling": 1,
      "_check_retention_compliance": 1,
      "_handle_data_erasure_request": 1,
      "sub": 6,
      "_apply_redactions": 1,
      "RecordClassification": 1,
      "generate_public_records_report": 1,
      "process_public_record_request": 1,
      "PublicRecordsHandler": 1,
      "_classify_record_for_public_access": 1,
      "submit_public_record_request": 1,
      "PublicRecordRequest": 1,
      "findall": 8,
      "_initiate_request_review": 1,
      "_calculate_average_response_time": 1,
      "_extract_keywords_from_description": 1,
      "_initialize_default_redaction_rules": 1,
      "_identify_responsive_records": 1,
      "RedactionRule": 1,
      "validate_compliance_with_texas_gov_code_552": 1,
      "_initialize_default_policies": 1,
      "RetentionRecord": 1,
      "register_record": 1,
      "timestamp": 8,
      "RecordRetentionManager": 1,
      "_find_applicable_policy": 1,
      "RetentionEvent": 1,
      "get_retention_status": 1,
      "generate_retention_report": 1,
      "_calculate_retention_deadline": 1,
      "_apply_retention_action": 1,
      "_anonymize_record": 1,
      "RetentionPolicy": 1,
      "test_retention_manager": 1,
      "_delete_record": 1,
      "_log_retention_event": 1,
      "_archive_record": 1,
      "apply_legal_hold": 1,
      "_get_default_policy": 1,
      "enforce_retention_policies": 1,
      "_initialize_approval_requirements": 1,
      "_send_approval_notification": 1,
      "StakeholderProfile": 1,
      "sorted": 9,
      "submit_stakeholder_approval": 1,
      "_find_stakeholder_by_role": 1,
      "_get_next_actions": 1,
      "abs": 4,
      "_get_risk_indicators": 1,
      "all": 10,
      "copy": 8,
      "_update_workflow_status": 1,
      "ApprovalWorkflow": 1,
      "_initialize_stakeholder_profiles": 1,
      "StakeholderApprovalManager": 1,
      "ApprovalRequirement": 1,
      "create_approval_workflow": 1,
      "StakeholderApproval": 1,
      "check_approval_deadlines": 1,
      "get_workflow_status": 1,
      "generate_approval_dashboard": 1,
      "_scan_javascript_file": 1,
      "_scan_config_file": 1,
      "_check_compliance_status": 1,
      "md5": 2,
      "quote": 1,
      "_test_authentication_vulnerabilities": 1,
      "DynamicAnalysisScanner": 1,
      "_test_session_management": 1,
      "scan_web_application": 1,
      "glob": 1,
      "VulnerabilityPatterns": 1,
      "_check_insecure_configurations": 1,
      "_check_sql_injection_patterns": 1,
      "_check_exposed_secrets_in_config": 1,
      "run_vulnerability_scan": 1,
      "post": 8,
      "_find_files": 1,
      "VulnerabilityScanner": 1,
      "_test_security_headers": 1,
      "_scan_python_file": 1,
      "_check_dom_vulnerabilities": 1,
      "_test_input_validation": 1,
      "finditer": 3,
      "_generate_vulnerability_summary": 1,
      "count": 3,
      "_check_xss_patterns": 1,
      "run_comprehensive_scan": 1,
      "start": 3,
      "Vulnerability": 1,
      "StaticAnalysisScanner": 1,
      "text": 7,
      "_check_hardcoded_secrets": 1,
      "ClientSession": 8,
      "scan_code_directory": 1,
      "_generate_security_recommendations": 1,
      "_check_insecure_settings": 1,
      "ScanResult": 1,
      "total_seconds": 15,
      "_check_command_injection_patterns": 1,
      "analyze_prescription_image_tool_async": 2,
      "set_event_loop": 4,
      "analyze_prescription_image": 1,
      "submit": 2,
      "validate_prescription_data": 1,
      "get_running_loop": 2,
      "run_until_complete": 4,
      "from_function": 3,
      "get_prescription_parser": 1,
      "b64decode": 1,
      "ThreadPoolExecutor": 2,
      "create_property_tax_search": 2,
      "next": 2,
      "SearchRequest": 2,
      "property_tax_assessment_recommendation_async": 1,
      "iter": 1,
      "check_ticket_status_async": 1,
      "get_ticket": 2,
      "get_db_session": 8,
      "get_event_loop": 1,
      "Field": 8,
      "check_active_ticket": 2,
      "add_message": 3,
      "create_ticket": 1,
      "create_support_ticket_async": 1,
      "get_ticket_service": 2,
      "process_property_tax_message": 3,
      "_suggest_panel_async": 1,
      "tool": 7,
      "create_booking": 2,
      "get_order_storage": 1,
      "track_booking": 1,
      "_check_panel_pricing": 1,
      "is_enabled": 1,
      "verify_payment_completion": 1,
      "sync_retry": 1,
      "isdigit": 2,
      "create_or_update": 3,
      "get_customer_bookings": 3,
      "Decimal": 2,
      "get_recommended_for_condition": 1,
      "_create_order_async": 2,
      "get_by_booking_id": 2,
      "format_date_user_friendly": 2,
      "get_lead_tracker": 1,
      "search_tests": 2,
      "CustomerRepository": 5,
      "async_retry": 1,
      "DatabaseRetryableError": 1,
      "get_by_id": 2,
      "store_order": 2,
      "get_by_instagram_id": 3,
      "type": 4,
      "commit": 6,
      "PropertyAssessmentRequestRepository": 1,
      "debug": 10,
      "parse_natural_date": 2,
      "PropertyAssessmentServiceRepository": 2,
      "get_by_code": 1,
      "analyze_user_input": 1,
      "_add_limitation_clarifications": 1,
      "analyze_ai_response": 1,
      "_has_disclaimer": 1,
      "_get_safe_response": 1,
      "check_escalation_needed": 1,
      "get_guardrails": 1,
      "_remove_guarantee_language": 1,
      "GuardrailResult": 1,
      "validate_legal_boundaries": 1,
      "PropertyTaxGuardrails": 1,
      "apply_response_modifications": 1,
      "_extract_information_from_message": 1,
      "_generate_recommendations": 2,
      "_handle_problem_identification": 1,
      "_handle_payment_processing": 1,
      "_request_missing_information": 1,
      "_handle_information_gathering": 1,
      "ConversationContext": 1,
      "start_conversation": 1,
      "_clarify_recommendation_response": 1,
      "find": 3,
      "_get_concern_acknowledgment": 1,
      "PropertyTaxConversationFlow": 1,
      "_get_missing_booking_information": 1,
      "_confirm_cash_payment": 1,
      "_extract_booking_information": 1,
      "_start_booking_process": 1,
      "process_message": 2,
      "_request_payment_method_clarification": 1,
      "_confirm_online_payment": 1,
      "_process_by_stage": 1,
      "_initiate_payment_process": 1,
      "_handle_booking_details": 1,
      "get_conversation_flow_manager": 1,
      "_provide_alternative_recommendations": 1,
      "_generate_greeting_response": 1,
      "_get_missing_information": 1,
      "_handle_recommendation": 1,
      "_identify_concern_type": 1,
      "_get_information_request": 1,
      "detect_language_from_message": 1,
      "_request_missing_booking_information": 1,
      "_store_conversation_history": 1,
      "StateGraph": 1,
      "add_edge": 1,
      "from_messages": 1,
      "HumanMessage": 2,
      "save_context": 2,
      "ToolNode": 1,
      "WorkflowAssistant": 1,
      "bind_tools": 1,
      "add_conditional_edges": 1,
      "health_check": 3,
      "ToolMessage": 1,
      "InMemorySaver": 1,
      "MessageHistoryRepository": 1,
      "AIMessage": 1,
      "get_context": 2,
      "reversed": 4,
      "get_property_tax_assistant": 1,
      "add_node": 1,
      "ChatGoogleGenerativeAI": 3,
      "compile": 3,
      "invoke": 4,
      "stream": 1,
      "save_message": 1,
      "create_property_tax_assistant": 1,
      "get_conversation_store": 3,
      "_store_property_document_conversation": 1,
      "hasattr": 10,
      "get_conversation_history": 1,
      "_handle_property_document_confirmation": 1,
      "enrich_extracted_data": 1,
      "validate_extracted_data": 1,
      "extract_from_plain_text": 1,
      "document_processing_tool": 2,
      "generate_sample_document_data": 1,
      "calculate_days_until_date": 1,
      "generate_action_suggestions": 1,
      "simulate_ocr_processing": 1,
      "clean_extracted_value": 1,
      "get_document_type_from_content": 1,
      "generate_mock_ocr_response": 1,
      "analyze_exemption_opportunities": 1,
      "savings_calculator_tool": 3,
      "calculate_annual_tax": 1,
      "estimate_appeal_outcome": 1,
      "calculate_exemption_value": 1,
      "calculate_total_tax_rate": 2,
      "generate_appeal_scenarios": 1,
      "get_county_tax_info": 1,
      "get_exemption_info": 1,
      "calculate_assessment_increase_percentage": 1,
      "determine_quality_tier": 1,
      "calculate_estimated_savings": 1,
      "determine_market_segment": 1,
      "lead_qualification_tool": 3,
      "generate_sales_recommendations": 1,
      "estimate_appeal_success_probability": 1,
      "calculate_qualification_score": 1,
      "search_properties_by_criteria": 1,
      "normalize_address": 2,
      "property_validation_tool": 4,
      "format_property_response": 2,
      "find_property_by_address": 1,
      "find_property_by_parcel_id": 1,
      "detect_search_type": 2,
      "calculate_optimal_meeting_times": 1,
      "find_best_consultant_match": 1,
      "validate_appointment_inputs": 1,
      "generate_appointment_confirmation_details": 1,
      "get_consultant_recommendations": 1,
      "combine": 1,
      "calculate_appointment_pricing": 1,
      "generate_quick_actions": 1,
      "calculate_payment_amount": 1,
      "generate_notification_message": 1,
      "parse_date_safely": 1,
      "get_current_deadlines": 1,
      "deadline_tracking_tool": 2,
      "schedule_notifications": 1,
      "calculate_urgency_score": 1,
      "get_agent_response": 1,
      "loads": 8,
      "publish": 2,
      "from_url": 8,
      "WebhookInterceptor": 1,
      "send_text_message": 6,
      "delete": 8,
      "ping": 7,
      "TicketService": 1,
      "utcnow": 2,
      "where": 3,
      "scalar_one_or_none": 3,
      "generate_ticket_id": 1,
      "SupportTicket": 1,
      "_determine_category": 1,
      "scalars": 2,
      "rollback": 3,
      "setex": 3,
      "desc": 3,
      "order_by": 3,
      "sadd": 1,
      "refresh": 2,
      "execute": 7,
      "srem": 1,
      "TicketMessage": 1,
      "limit": 3,
      "_determine_priority": 1,
      "select": 3,
      "relationship": 2,
      "String": 2,
      "ForeignKey": 2,
      "Column": 2,
      "SQLEnum": 2,
      "send_service_options_menu": 2,
      "get_webhook_interceptor": 2,
      "_process_converted_interactive": 1,
      "_send_whatsapp_response": 1,
      "send_appeal_guidance": 1,
      "send_agent_response": 2,
      "send_quick_actions_buttons": 3,
      "ModernIntegratedWebhookHandler": 1,
      "send_payment_options": 2,
      "_handle_interactive_message": 1,
      "verify_webhook": 2,
      "parse_status_update": 2,
      "_try_send_interactive_response": 1,
      "_handle_payment_initiation": 1,
      "send_property_lookup_result": 2,
      "should_intercept": 2,
      "_handle_consultation_scheduling": 1,
      "_handle_media_message": 1,
      "_handle_expert_consultation": 1,
      "_handle_status_update": 1,
      "send_appeal_document_checklist": 2,
      "_get_session_id": 2,
      "get_property_tax_templates": 2,
      "_handle_whatsapp_message": 2,
      "parse_webhook_message": 2,
      "handle_customer_message": 2,
      "json": 6,
      "_get_session": 1,
      "WhatsAppClient": 1,
      "compare_digest": 4,
      "ClientTimeout": 6,
      "_get_messaging_limit": 1,
      "new": 4,
      "_determine_image_format_from_data": 1,
      "_download_media_file": 1,
      "download_image_from_whatsapp_message": 2,
      "WhatsAppImageHandler": 2,
      "_get_media_url": 1,
      "PropertyTaxTemplates": 1,
      "send_template_message": 1,
      "send_interactive_message": 1,
      "get_latest_message": 1,
      "_should_process_immediately": 1,
      "_ensure_cleanup_task": 1,
      "handler": 1,
      "sleep": 9,
      "get_combined_text": 1,
      "create_task": 6,
      "InstagramMessage": 2,
      "_handle_message_internal": 1,
      "is_expired": 1,
      "_process_single_message": 1,
      "_schedule_batch_processing": 1,
      "MessageBatcher": 1,
      "MessageBatch": 1,
      "Lock": 1,
      "_process_batch": 1,
      "cancel": 2,
      "force_process_user_batch": 3,
      "_cleanup_expired_batches": 1,
      "every": 1,
      "_save_documents": 1,
      "do": 1,
      "_schedule_job": 1,
      "get_scheduler": 1,
      "stop_scheduler": 1,
      "add_job": 1,
      "get_job_status": 1,
      "getattr": 4,
      "scrape_page": 2,
      "scrape_texas_comptroller_data": 2,
      "CollectionStats": 1,
      "_schedule_retry": 1,
      "load": 3,
      "_run_job_async": 1,
      "_run_daily_comptroller_check": 1,
      "at": 1,
      "test_scheduler": 1,
      "TexasComptrollerScraper": 2,
      "ScheduledJob": 1,
      "start_scheduler": 1,
      "_setup_default_jobs": 1,
      "process_scraped_documents": 1,
      "scrape_county_appraisal_data": 2,
      "function": 1,
      "exists": 4,
      "_save_collection_stats": 1,
      "DataCollectionScheduler": 1,
      "mkdir": 6,
      "run_pending": 1,
      "scrape_with_semaphore": 2,
      "find_property_tax_sections": 1,
      "Semaphore": 3,
      "get_text": 2,
      "CountyAppraisalScraper": 1,
      "CountyInfo": 1,
      "decompose": 2,
      "_extract_county_citations": 1,
      "urljoin": 2,
      "find_all": 2,
      "gather": 6,
      "scrape_all_counties": 1,
      "head": 1,
      "_extract_content": 2,
      "BeautifulSoup": 2,
      "_classify_county_document_type": 1,
      "scrape_county": 1,
      "select_one": 2,
      "TCPConnector": 2,
      "scrape_county_page": 1,
      "_is_county_property_tax_link": 1,
      "ScrapedDocument": 3,
      "soup": 2,
      "_extract_title": 2,
      "test_county_scraper": 1,
      "_classify_document_type": 1,
      "_extract_citations": 1,
      "_extract_section_number": 1,
      "scrape_linked_pages": 1,
      "_is_property_tax_related": 1,
      "scrape_all_property_tax_content": 1,
      "test_scraper": 1,
      "_extract_effective_date": 1,
      "unescape": 1,
      "_extract_legal_concepts": 1,
      "_extract_fee_amounts": 1,
      "_chunk_form_text": 1,
      "_extract_deadlines": 1,
      "process_with_semaphore": 1,
      "_chunk_faq_text": 1,
      "_chunk_generic_text": 1,
      "chunk_content": 1,
      "test_processor": 2,
      "DocumentProcessor": 1,
      "generate_processing_notes": 1,
      "clean_content": 1,
      "process_document": 1,
      "_extract_tax_concepts": 1,
      "ProcessedDocument": 1,
      "_clean_legal_text": 1,
      "_extract_property_types": 1,
      "_clean_form_text": 1,
      "_chunk_legal_text": 1,
      "calculate_quality_score": 1,
      "_clean_faq_text": 1,
      "process_documents_batch": 1,
      "extract_metadata": 1,
      "_remove_common_artifacts": 1,
      "_format_faq_text": 1,
      "clean_legal_text": 2,
      "_build_cleaning_rules": 1,
      "test_cleaner": 1,
      "_build_terminology_mappings": 1,
      "_standardize_terminology": 1,
      "_format_form_text": 1,
      "_format_procedure_text": 1,
      "get_cleaning_suggestions": 1,
      "_build_citation_patterns": 2,
      "_normalize_citations": 1,
      "_calculate_cleaning_quality_score": 1,
      "CleaningResult": 1,
      "_apply_cleaning_pipeline": 1,
      "escape": 3,
      "CleaningRule": 1,
      "_format_statute_text": 1,
      "LegalTextCleaner": 2,
      "_build_formatting_patterns": 1,
      "_assess_text_structure_quality": 1,
      "_apply_document_specific_formatting": 1,
      "validation_method": 1,
      "test_validator": 1,
      "KnowledgeEntry": 2,
      "ValidationResult": 1,
      "_run_validation_rule": 1,
      "_build_quality_thresholds": 1,
      "_calculate_quality_metrics": 1,
      "ValidationIssue": 1,
      "validate_knowledge_entry": 1,
      "_build_accuracy_patterns": 1,
      "_calculate_overall_score": 1,
      "ValidationRule": 1,
      "PropertyTaxQualityValidator": 1,
      "_build_validation_rules": 1,
      "get_citation_tracker": 2,
      "intersection": 3,
      "_extract_qa_pairs": 1,
      "_process_single_document": 1,
      "_process_form_document": 1,
      "_process_faq_document": 1,
      "clean_faq_text": 1,
      "load_citations_from_storage": 1,
      "_build_knowledge_graph": 1,
      "PropertyTaxContentProcessor": 1,
      "_build_authority_chains": 1,
      "_build_content_templates": 1,
      "_process_procedure_document": 1,
      "_assess_difficulty_level": 1,
      "_extract_form_sections": 1,
      "_extract_procedure_steps": 1,
      "extract_citations_from_document": 2,
      "_build_quality_criteria": 1,
      "clean_form_text": 1,
      "_find_related_entries": 1,
      "clean_procedural_text": 1,
      "build_topic_hierarchy": 1,
      "KnowledgeGraph": 1,
      "get_knowledge_base_stats": 1,
      "categorize_content": 2,
      "PropertyTaxTaxonomyBuilder": 2,
      "_enhance_knowledge_entry": 1,
      "_analyze_statute_structure": 1,
      "clean_general_text": 1,
      "_generate_title_from_content": 1,
      "_process_general_document": 1,
      "_determine_relationship_type": 1,
      "_process_statute_document": 1,
      "_build_property_types_taxonomy": 1,
      "get_depth": 1,
      "_build_authorities_taxonomy": 1,
      "_build_procedures_taxonomy": 1,
      "_generate_classification_reasoning": 1,
      "test_taxonomy": 1,
      "field": 2,
      "_build_collection_taxonomy": 1,
      "get_taxonomy_stats": 1,
      "_build_property_taxation_taxonomy": 1,
      "_load_classification_patterns": 1,
      "_build_base_taxonomy": 1,
      "_calculate_max_depth": 1,
      "ContentCategory": 1,
      "_build_appraisal_taxonomy": 1,
      "_build_exemptions_taxonomy": 1,
      "_build_appeals_taxonomy": 1,
      "TaxonomyNode": 1,
      "_build_legal_framework_taxonomy": 1,
      "_identify_subtopics": 1,
      "_add_taxonomy_node": 1,
      "add_message_handler": 1,
      "_prepare_message_text": 1,
      "_interpret_quick_reply": 1,
      "UniversalMessageHandler": 1,
      "SystemMessage": 2,
      "_intelligent_message_preparation": 1,
      "_parse_messaging_event": 1,
      "fetch_instagram_user_info": 1,
      "get_batch_stats": 1,
      "_send_response": 1,
      "_execute_search_by_type": 1,
      "ranker": 1,
      "_apply_final_filtering": 1,
      "_hybrid_search": 1,
      "_generate_legal_context": 1,
      "_generate_relevance_explanation": 1,
      "_calculate_semantic_relevance_score": 1,
      "_rank_and_score_results": 1,
      "_legal_reasoning_search": 1,
      "search_legal_documents": 2,
      "_enhance_results_with_legal_context": 1,
      "test_semantic_search": 1,
      "get_property_tax_embeddings": 1,
      "PropertyTaxSemanticSearch": 1,
      "_calculate_property_tax_relevance": 2,
      "_build_concept_hierarchies": 1,
      "_document_matches_scope": 1,
      "_calculate_keyword_relevance_score": 1,
      "_semantic_search": 1,
      "_scope_to_document_type": 1,
      "SearchResult": 1,
      "_apply_legal_reasoning_analysis": 1,
      "_rank_hybrid_results": 1,
      "get_legal_vector_store": 1,
      "_expand_query_with_property_tax_terms": 1,
      "_extract_citation_references": 1,
      "_enhance_query_for_semantic_search": 1,
      "find_similar_property_tax_terms": 2,
      "_apply_filters": 1,
      "_keyword_search": 1,
      "_is_document_in_date_range": 1,
      "_calculate_legal_reasoning_boost": 1,
      "CitationNetwork": 1,
      "_build_hierarchical_relationships": 1,
      "_build_topical_relationships": 1,
      "CitationRelationship": 1,
      "_build_authority_hierarchy": 1,
      "_build_amendment_relationships": 1,
      "_extract_topics_from_context": 1,
      "build_citation_relationships": 1,
      "_build_authority_networks": 1,
      "PropertyTaxCitationTracker": 1,
      "_parse_citation_details": 1,
      "build_citation_networks": 1,
      "LegalCitation": 1,
      "_build_topic_networks": 1,
      "get_citation_stats": 1,
      "test_citation_tracker": 1,
      "_build_hierarchical_networks": 1,
      "end": 1,
      "DeterministicFakeEmbedding": 2,
      "union": 1,
      "PropertyTaxEmbeddings": 1,
      "embed_query": 1,
      "_load_property_tax_terminology": 1,
      "_load_concept_weights": 1,
      "PropertyTaxTermMapping": 1,
      "_enhance_embedding_for_property_tax": 1,
      "_calculate_term_similarity": 1,
      "test_embeddings": 1,
      "GoogleGenerativeAIEmbeddings": 2,
      "_optimize_text_for_property_tax": 1,
      "_get_base_embeddings": 1,
      "zip": 2,
      "embed_documents": 1,
      "_calculate_concept_boost": 1,
      "aembed_documents": 1,
      "test_legal_indexer": 1,
      "as_retriever": 1,
      "_create_documents_from_processed": 1,
      "_add_documents_to_store": 1,
      "Chroma": 1,
      "add_documents": 1,
      "similarity_search": 1,
      "_classify_legal_query": 1,
      "persist": 1,
      "_build_search_filter": 1,
      "_organize_documents_by_type": 1,
      "_enhance_search_query": 1,
      "get_vector_store_stats": 1,
      "Document": 1,
      "_analyze_legal_context": 1,
      "_enhance_chunk_content": 1,
      "_initialize_vectorstore": 1,
      "LegalDocumentVectorStore": 1,
      "lrange": 2,
      "lpush": 2,
      "_get_context_key": 1,
      "pipeline": 1,
      "expire": 2,
      "RedisConversationStore": 1,
      "_get_conversation_key": 1,
      "or_": 1,
      "selectinload": 1,
      "like": 1,
      "get_by_request_id": 1,
      "options": 1,
      "setattr": 1,
      "CustomerProfile": 1,
      "json_extract": 1,
      "PropertyAssessmentRequest": 1,
      "and_": 2,
      "MessageHistory": 1,
      "isnot": 1,
      "group_by": 1,
      "avg": 1,
      "scalar": 2,
      "flush": 1,
      "label": 1,
      "UserAnalytics": 1,
      "Numeric": 1,
      "Table": 1,
      "Index": 1,
      "DateTime": 1,
      "SessionLocal": 1,
      "UniqueConstraint": 1,
      "async_sessionmaker": 1,
      "run_sync": 1,
      "create_async_engine": 1,
      "dispose": 1,
      "get_session": 3,
      "DatabaseManager": 1,
      "begin": 1,
      "mapped_column": 1,
      "async_func": 1,
      "BookingRepository": 3,
      "OrderStorageService": 1,
      "update_status": 1,
      "wraps": 2,
      "get_order": 1,
      "GenerativeModel": 1,
      "cleanup_expired_rooms": 1,
      "AccessToken": 1,
      "create_healthcare_room": 1,
      "KrishnaVoiceSetup": 1,
      "create_room": 1,
      "with_grants": 1,
      "DeleteRoomRequest": 2,
      "test_voice_agent_connection": 1,
      "deploy_voice_agent": 1,
      "with_name": 1,
      "LiveKitAPI": 2,
      "list_active_healthcare_rooms": 1,
      "to_jwt": 1,
      "VideoGrants": 1,
      "delete_room": 2,
      "ListRoomsRequest": 2,
      "with_identity": 1,
      "generate_content": 1,
      "list_rooms": 2,
      "CreateRoomRequest": 1,
      "send_data": 1,
      "_send_data_to_room": 1,
      "PrescriptionMessage": 1,
      "send_prescription_data": 2,
      "LiveKitDataBridge": 1,
      "get_livekit_data_bridge": 3,
      "_get_room_name": 1,
      "SendDataRequest": 1,
      "send_prescription_failure": 2,
      "_get_redis_client": 1,
      "VoiceChatStateManager": 1,
      "shutdown": 1,
      "setLevel": 1,
      "get_property_document_processing_status": 1,
      "property_tax_recommendation_async": 1,
      "get_voice_chat_state_manager": 2,
      "register_voice_room": 1,
      "CenturyPropertyTaxAssistant": 1,
      "on": 1,
      "chdir": 1,
      "WorkerOptions": 1,
      "generate_reply": 1,
      "function_tool": 1,
      "connect": 2,
      "_end_call": 1,
      "set_property_document_processing_status": 1,
      "end_voice_call": 1,
      "request_property_document_via_whatsapp": 1,
      "basename": 1,
      "start_voice_call": 1,
      "run_app": 1,
      "_cleanup": 1,
      "RealtimeModel": 1,
      "__init__": 1,
      "super": 1,
      "AgentSession": 1,
      "getcwd": 1,
      "decode": 3,
      "VoiceConfig": 1,
      "datetime": 1,
      "map": 1,
      "_should_attempt_reset": 1,
      "Exception": 2,
      "RetryExhaustedError": 1,
      "_on_success": 1,
      "func": 1,
      "CircuitBreaker": 1,
      "_on_failure": 1,
      "is_retryable_exception": 1,
      "simulate_payment_success": 1,
      "MockRazorpayService": 1,
      "verify_payment_link_signature": 1,
      "fetch": 1,
      "get_payment_details": 1,
      "Client": 1,
      "verify_payment_signature": 1,
      "RazorpayService": 1,
      "create": 1,
      "PlainTextResponse": 3,
      "APIRouter": 4,
      "HTTPException": 3,
      "Response": 1,
      "search_assessments": 1,
      "AssessmentCatalogRepository": 1,
      "get_handler_stats": 1,
      "body": 3,
      "handle_webhook": 1,
      "set_prescription_processing_status": 1,
      "handle_message": 1,
      "get_business_configuration": 1,
      "b64encode": 2,
      "_handle_voice_call_prescription_image": 1,
      "get_business_profile": 1,
      "save_prescription_context": 1,
      "_handle_whatsapp_image_message": 1,
      "Query": 1,
      "_handle_whatsapp_message_safe": 1,
      "is_voice_call_active": 1,
      "difference_update": 1,
      "_handle_whatsapp_status": 1,
      "handle_incoming_message": 1,
      "get_handler_statistics": 1,
      "get_by_phone": 1,
      "update_booking_status": 1,
      "get_all_bookings": 1,
      "disk_io_counters": 1,
      "StressTestConfiguration": 1,
      "pids": 1,
      "_execute_stress_pattern": 1,
      "net_io_counters": 1,
      "run_stress_test_example": 1,
      "_asdict": 1,
      "StressTestingFramework": 1,
      "clear": 2,
      "spike_pattern": 1,
      "get_peak_usage": 1,
      "linear_ramp": 1,
      "cpu_percent": 1,
      "_detect_failure_modes": 1,
      "StressPatternGenerator": 1,
      "_calculate_resilience_score": 1,
      "virtual_memory": 1,
      "stop_monitoring": 1,
      "_check_system_breaking_point": 1,
      "_run_chaos_scenario": 1,
      "_collect_real_time_metrics": 1,
      "_generate_load_pattern": 1,
      "_analyze_performance_degradation": 1,
      "start_monitoring": 1,
      "sawtooth_pattern": 1,
      "StressTestResult": 1,
      "_run_stress_user_session": 1,
      "_generate_stress_test_recommendations": 1,
      "net_connections": 1,
      "exponential_growth": 1,
      "getloadavg": 1,
      "run_stress_test": 1,
      "SystemMonitor": 1,
      "done": 1,
      "_analyze_threshold_compliance": 1,
      "UserSession": 1,
      "RequestResult": 1,
      "run_load_test": 1,
      "run_load_test_example": 1,
      "_select_user_scenario": 1,
      "mean": 1,
      "_calculate_performance_metrics": 1,
      "LoadTestScenario": 1,
      "_generate_performance_recommendations": 1,
      "LoadTestResult": 1,
      "_percentile": 1,
      "_make_request": 1,
      "median": 1,
      "_prepare_request": 1,
      "as_completed": 1,
      "_generate_comprehensive_report": 1,
      "LoadTestingSuite": 1,
      "get_load_test_config": 1,
      "VirtualUser": 1,
      "run_session": 1,
      "filter_leads_by_criteria": 1,
      "qualify_multiple_leads": 1,
      "get_lead_recommendations_summary": 1,
      "generate_lead_report": 1,
      "run_individual_tool_tests": 1,
      "test_ai_framework_integration": 1,
      "consultation_scheduling_tool": 1,
      "test_tool_integration": 1,
      "test_mock_data_availability": 1,
      "get_supported_counties": 1,
      "get_property_type_info": 1,
      "validate_multiple_properties": 1,
      "calculate_multi_year_projections": 1,
      "compare_county_rates": 1,
      "_get_performance_status": 1,
      "_get_recent_metrics": 1,
      "_calculate_resolution_rate": 1,
      "_analyze_by_persona": 1,
      "_update_real_time_metrics": 1,
      "_analyze_accuracy": 1,
      "ConversationMetrics": 1,
      "PerformanceMetric": 1,
      "DemoPerformanceTracker": 1,
      "deque": 1,
      "_count_by_attribute": 1,
      "_analyze_response_times": 1,
      "_analyze_by_scenario": 1,
      "_analyze_escalations": 1,
      "EscalationDemoScenarios": 1,
      "_create_language_barrier_scenarios": 1,
      "get_scenarios_by_escalation_type": 1,
      "_create_emotional_escalation_scenarios": 1,
      "_create_urgent_deadline_scenarios": 1,
      "get_scenarios_by_urgency": 1,
      "_create_multi_jurisdiction_scenarios": 1,
      "EscalationScenario": 1,
      "_generate_scenarios": 6,
      "get_scenarios_by_trigger": 1,
      "_create_legal_escalation_scenarios": 1,
      "_create_technical_escalation_scenarios": 1,
      "get_scenarios_by_category": 1,
      "_get_category_description": 1,
      "get_scenarios_by_persona": 1,
      "get_random_scenario": 1,
      "DemoScenarioManager": 1,
      "get_scenario_categories": 1,
      "ScenarioCategory": 1,
      "get_demo_summary": 1,
      "validate_scenarios": 1,
      "get_all_scenarios": 1,
      "get_scenario_by_id": 1,
      "_get_all_personas": 1,
      "AssessmentAppealDemoScenarios": 1,
      "_create_deadline_scenarios": 1,
      "_create_residential_appeal_scenarios": 1,
      "_create_evidence_scenarios": 1,
      "AssessmentAppealScenario": 1,
      "_create_commercial_appeal_scenarios": 1,
      "get_sample_properties": 5,
      "_create_status_scenarios": 1,
      "PaymentProcessingScenario": 1,
      "_create_online_payment_scenarios": 1,
      "_create_late_payment_scenarios": 1,
      "_create_payment_history_scenarios": 1,
      "_create_refund_scenarios": 1,
      "_create_installment_scenarios": 1,
      "_create_hardship_scenarios": 1,
      "PaymentProcessingDemoScenarios": 1,
      "_create_disability_scenarios": 1,
      "_create_homestead_scenarios": 1,
      "_create_senior_scenarios": 1,
      "ExemptionApplicationScenario": 1,
      "_create_veteran_scenarios": 1,
      "ExemptionApplicationDemoScenarios": 1,
      "_create_agricultural_scenarios": 1,
      "_create_solar_scenarios": 1,
      "MultiPropertyScenario": 1,
      "_create_moderate_portfolio_scenarios": 1,
      "get_scenarios_by_portfolio_type": 1,
      "MultiPropertyDemoScenarios": 1,
      "_create_simple_portfolio_scenarios": 1,
      "get_scenarios_by_complexity": 1,
      "_create_complex_portfolio_scenarios": 1,
      "_create_property_value_scenarios": 1,
      "_create_tax_amount_scenarios": 1,
      "BasicInquiryScenario": 1,
      "_create_payment_options_scenarios": 1,
      "_create_tax_rate_scenarios": 1,
      "BasicInquiryDemoScenarios": 1,
      "_create_payment_due_scenarios": 1,
      "_create_exemption_scenarios": 1,
      "_create_metrics_chart": 1,
      "_create_compliance_chart": 1,
      "set_ylabel": 1,
      "TechnicalCapability": 1,
      "ExecutiveSummaryGenerator": 1,
      "generate_executive_presentation": 1,
      "_calculate_roi_analysis": 1,
      "set_ylim": 1,
      "xticks": 1,
      "get_height": 1,
      "_generate_appendices": 1,
      "savefig": 1,
      "get_width": 1,
      "BytesIO": 1,
      "tick_params": 1,
      "tight_layout": 1,
      "_generate_technical_capabilities": 1,
      "_generate_key_benefits": 1,
      "_create_roi_chart": 1,
      "set_xlabel": 1,
      "_generate_executive_summary": 1,
      "_generate_business_metrics": 1,
      "_generate_compliance_status": 1,
      "_generate_implementation_timeline": 1,
      "BusinessMetric": 1,
      "ROICalculation": 1,
      "_generate_presentation_title": 1,
      "legend": 1,
      "axhline": 1,
      "ExecutivePresentation": 1,
      "generate_presentation_charts": 1,
      "ComplianceStatus": 1,
      "get_x": 1,
      "barh": 1,
      "set_title": 1,
      "grid": 1,
      "seek": 1,
      "plot": 1,
      "bar": 1,
      "subplots": 1,
      "_generate_strategic_recommendations": 1,
      "get_y": 1,
      "get_settings": 1,
      "DemoPerformanceTargets": 1,
      "DemoScenarioConfig": 1,
      "get_demo_database_config": 2,
      "_load_scenario_configs": 1,
      "get_enabled_scenarios": 1,
      "get_demo_redis_config": 2,
      "DemoSettings": 1,
      "_save_scenario_configs": 1,
      "get_demo_ai_config": 1,
      "_load_demo_settings": 1,
      "DemoConfigurationManager": 1,
      "_clear_active_conversations": 1,
      "DemoResetManager": 1,
      "_load_fresh_demo_data": 1,
      "get_last_reset_time": 1,
      "_clear_temporary_session_data": 1,
      "_reset_payment_simulation_data": 1,
      "validate_demo_environment": 1,
      "initialize_connections": 1,
      "_reset_analytics_data": 1,
      "_reset_demo_property_data": 1,
      "_reset_demo_sessions": 1,
      "_clear_ai_response_cache": 1,
      "_reset_conversation_data": 1,
      "_reset_demo_user_states": 1,
      "perform_full_reset": 1,
      "ResetOperation": 1,
      "cursor": 1,
      "Redis": 3,
      "clear_user_data": 1,
      "setdefault": 1,
      "clear_all_sessions": 1,
      "input": 1,
      "aclose": 2,
      "clear_sqlite_data": 1,
      "verify_cleanup": 1,
      "clear_redis_data": 1,
      "fetchone": 1,
      "clear_session_data": 1
    }
  },
  "zero_usage_components": {
    "unused_functions": [
      "agents/core/guardrails.py::PropertyTaxGuardrails._has_disclaimer",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler.handle_message",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager.apply_legal_hold",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker._build_authority_hierarchy",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker.reset_metrics",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker._analyze_by_persona",
      "agents/core/guardrails.py::should_escalate_to_human",
      "demo/scenarios/multi_property_scenarios.py::MultiPropertyDemoScenarios.get_scenario_by_id",
      "agents/tools/savings_calculator_tool.py::calculate_annual_tax",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler._handle_interactive_message",
      "services/voice/voice_chat_state.py::VoiceChatStateManager._get_redis_client",
      "demo/scenarios/escalation_scenarios.py::EscalationDemoScenarios.get_scenario_by_id",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler._run_job_wrapper",
      "mock_data/tax_rates.py::get_available_exemptions",
      "services/persistence/repositories.py::CustomerRepository.__init__",
      "testing/performance/stress_testing_framework.py::StressPatternGenerator.spike_pattern",
      "mock_data/property_records.py::get_property_statistics",
      "services/messaging/whatsapp_client.py::WhatsAppClient.verify_webhook",
      "agents/simplified/simplified_agent_v2.py::process_customer_message",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._extract_procedure_steps",
      "config/ai_configuration.py::PropertyTaxAIConfig.validate_response_length",
      "services/messaging/whatsapp_client.py::WhatsAppClient.is_configured",
      "services/voice/property_tax_voice_agent.py::CenturyPropertyTaxAssistant.request_property_document_image",
      "agents/core/property_tax_assistant_v3.py::get_property_tax_assistant",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder._build_appraisal_taxonomy",
      "services/utils/retry_handler.py::async_retry",
      "src/api/whatsapp_webhooks.py::_handle_whatsapp_message",
      "demo/scenarios/assessment_appeal_scenarios.py::AssessmentAppealDemoScenarios._create_deadline_scenarios",
      "scripts/test-workflow.py::test_workflow_state_transitions",
      "agents/core/conversation_flows.py::start_property_tax_conversation",
      "services/ticket_management/ticket_service.py::TicketService.generate_ticket_id",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._assess_difficulty_level",
      "services/messaging/property_tax_templates.py::PropertyTaxTemplates.__init__",
      "config/security_policies.py::SecurityPolicies.get_policy_by_id",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator.search_audit_events",
      "agents/tools/lead_qualification_tool.py::determine_quality_tier",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.validate_readability",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow.end_conversation",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker.record_response_time",
      "services/voice/property_tax_voice_agent.py::CenturyPropertyTaxAssistant.validate_pin_code",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._rank_keyword_results",
      "agents/core/property_tax_assistant_v3.py::reset_property_tax_assistant",
      "services/payments/razorpay_integration.py::RazorpayService.__init__",
      "config/compliance_settings.py::TDLRComplianceSettings.validate_compliance_configuration",
      "src/api/business_webhooks.py::verify_business_webhook",
      "demo/scenarios/payment_processing_scenarios.py::PaymentProcessingDemoScenarios.get_scenarios_by_type",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._identify_concern_type",
      "scripts/dependency_analyzer.py::DependencyAnalyzer._analyze_package_usage",
      "scripts/dependency_analyzer.py::DependencyAnalyzer._identify_zero_usage",
      "agents/simplified/ticket_tools.py::check_ticket_status_async",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._process_procedure_document",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor.get_knowledge_base_stats",
      "security/audit/vulnerability_scanner.py::VulnerabilityScanner._generate_security_recommendations",
      "tests/tools/test_savings_calculator_tool.py::TestSavingsCalculatorIntegration.test_end_to_end_savings_analysis",
      "scripts/cleanup/clear-all-data.py::verify_cleanup",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator.generate_executive_presentation",
      "services/ticket_management/ticket_service.py::get_ticket_service",
      "services/vector_store/property_tax_embeddings.py::PropertyTaxEmbeddings._load_property_tax_terminology",
      "services/persistence/repositories.py::PropertyAssessmentServiceRepository.__init__",
      "tests/conftest.py::temp_db",
      "services/persistence/database.py::DatabaseManager.close",
      "agents/tools/deadline_tracking_tool.py::deadline_tracking_tool",
      "services/utils/retry_handler.py::decorator",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._enhance_results_with_legal_context",
      "services/data_acquisition/county_appraisal_scraper.py::CountyAppraisalScraper.scrape_county_page",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager._get_default_policy",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler.verify_webhook",
      "demo/scenarios/assessment_appeal_scenarios.py::AssessmentAppealDemoScenarios._create_status_scenarios",
      "demo/environment/demo_reset_manager.py::DemoResetManager.get_demo_environment_status",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker._analyze_accuracy",
      "services/voice/voice_chat_state.py::VoiceChatStateManager.end_voice_call",
      "services/voice/voice_config.py::VoiceConfig.get_turn_detection_config",
      "tests/conftest.py::sample_messages",
      "services/data_acquisition/county_appraisal_scraper.py::CountyAppraisalScraper._extract_content",
      "scripts/dependency_analyzer.py::DependencyAnalyzer._calculate_usage_frequency",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator._is_data_encrypted",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager.update_record_access",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner._build_terminology_mappings",
      "demo/scenarios/assessment_appeal_scenarios.py::AssessmentAppealDemoScenarios.get_all_scenarios",
      "services/ticket_management/webhook_interceptor.py::WebhookInterceptor.send_agent_response",
      "services/persistence/database.py::DatabaseManager.__init__",
      "demo/scenarios/payment_processing_scenarios.py::PaymentProcessingDemoScenarios._create_payment_history_scenarios",
      "demo/scenarios/multi_property_scenarios.py::MultiPropertyDemoScenarios.__init__",
      "agents/core/guardrails.py::PropertyTaxGuardrails.__init__",
      "demo/scenarios/basic_inquiry_scenarios.py::BasicInquiryDemoScenarios.__init__",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator.log_property_tax_operation",
      "services/ticket_management/ticket_service.py::TicketService._determine_priority",
      "demo/scenarios/basic_inquiry_scenarios.py::BasicInquiryDemoScenarios._create_exemption_scenarios",
      "config/ai_configuration.py::PropertyTaxAIConfig.get_confidence_level",
      "services/persistence/repositories.py::CustomerRepository.update_property_info",
      "demo/environment/demo_reset_manager.py::DemoResetManager._reset_analytics_data",
      "scripts/test-mock-payment.py::main",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator.log_audit_event",
      "tests/conftest.py::config_json",
      "tests/conftest.py::config_generator",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._keyword_search",
      "services/voice/livekit_data_bridge.py::notify_prescription_failed",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker._calculate_resolution_rate",
      "scripts/dependency_analyzer.py::DependencyAnalyzer._detect_circular_dependencies",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager.__init__",
      "agents/core/guardrails.py::get_guardrails",
      "services/vector_store/property_tax_embeddings.py::PropertyTaxEmbeddings._enhance_embedding_for_property_tax",
      "demo/environment/demo_reset_manager.py::DemoResetManager.get_reset_history",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator._handle_data_rectification_request",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler.__init__",
      "demo/scenarios/basic_inquiry_scenarios.py::BasicInquiryDemoScenarios._create_payment_options_scenarios",
      "services/vector_store/property_tax_embeddings.py::PropertyTaxEmbeddings._calculate_term_similarity",
      "src/api/whatsapp_webhooks.py::whatsapp_health",
      "services/vector_store/property_tax_embeddings.py::PropertyTaxEmbeddings._load_concept_weights",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._generate_greeting_response",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker.__init__",
      "services/knowledge_base/content_processor.py::KnowledgeEntry.__post_init__",
      "testing/performance/load_testing_suite.py::run_load_test_example",
      "tests/tools/test_property_validation_tool.py::TestPropertyValidationTool.test_property_validation_success_parcel_id",
      "services/communication/message_handler.py::UniversalMessageHandler._interpret_quick_reply",
      "security/audit/vulnerability_scanner.py::DynamicAnalysisScanner._test_security_headers",
      "testing/performance/stress_testing_framework.py::StressTestingFramework._calculate_resilience_score",
      "mock_data/tax_rates.py::estimate_appeal_outcome",
      "demo/scenarios/assessment_appeal_scenarios.py::AssessmentAppealDemoScenarios.get_scenarios_by_persona",
      "services/persistence/redis_conversation_store.py::RedisConversationStore.get_session_stats",
      "services/voice/property_tax_voice_agent.py::CenturyPropertyTaxAssistant.check_property_document_status",
      "services/data_acquisition/document_processor.py::DocumentProcessor.process_with_semaphore",
      "agents/tools/property_validation_tool.py::detect_search_type",
      "agents/simplified/enhanced_workflow_tools.py::verify_customer_payment",
      "services/messaging/whatsapp_client.py::WhatsAppClient.__init__",
      "demo/scenarios/exemption_application_scenarios.py::ExemptionApplicationDemoScenarios.get_scenario_by_id",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner.clean_form_text",
      "services/persistence/repositories.py::CustomerRepository.get_by_id",
      "security/audit/vulnerability_scanner.py::VulnerabilityScanner.export_scan_results",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker.get_performance_analytics",
      "demo/scenarios/assessment_appeal_scenarios.py::AssessmentAppealDemoScenarios.__init__",
      "services/messaging/property_tax_templates.py::PropertyTaxTemplates.send_service_options_menu",
      "services/data_acquisition/document_processor.py::DocumentProcessor.generate_processing_notes",
      "services/persistence/redis_conversation_store.py::RedisConversationStore.save_context",
      "services/voice/property_tax_voice_agent.py::CenturyPropertyTaxAssistant.end_call",
      "mock_data/tax_rates.py::get_county_tax_info",
      "demo/environment/demo_reset_manager.py::DemoResetManager._clear_ai_response_cache",
      "services/voice/voice_setup.py::KrishnaVoiceSetup.__init__",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder.get_depth",
      "tests/tools/test_savings_calculator_tool.py::TestSavingsCalculatorTool.test_multi_year_projections",
      "config/compliance_settings.py::TDLRComplianceSettings.get_compliance_summary",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler._get_session_id",
      "src/api/whatsapp_webhooks.py::_handle_whatsapp_message_safe",
      "mock_data/demo_customer_personas.py::DemoCustomerPersonas.get_personas_by_tech_comfort",
      "demo/environment/demo_configuration.py::DemoConfigurationManager._load_scenario_configs",
      "demo/environment/demo_configuration.py::DemoConfigurationManager._load_demo_settings",
      "tests/tools/test_lead_qualification_tool.py::TestLeadQualificationTool.test_qualify_multiple_leads",
      "services/messaging/whatsapp_image_handler.py::WhatsAppImageHandler.download_image_from_whatsapp_message",
      "demo/environment/demo_configuration.py::DemoConfigurationManager.validate_demo_environment",
      "config/ai_configuration.py::PropertyTaxAIConfig.get_texas_property_tax_info",
      "services/vector_store/legal_document_indexer.py::LegalDocumentVectorStore._create_documents_from_processed",
      "services/persistence/repositories.py::PropertyAssessmentServiceRepository.search_services",
      "tests/tools/test_property_validation_tool.py::TestPropertyValidationTool.test_property_validation_auto_detect",
      "scripts/test-mock-payment.py::test_mock_security_features",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager.submit_stakeholder_approval",
      "mock_data/consultant_schedules.py::generate_consultant_schedule",
      "services/persistence/redis_conversation_store.py::RedisConversationStore.save_message",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._handle_recommendation",
      "agents/core/conversation_flows.py::get_conversation_flow_manager",
      "services/knowledge_base/content_processor.py::get_content_processor",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._build_content_templates",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager._get_next_actions",
      "testing/performance/load_testing_suite.py::LoadTestingSuite._select_user_scenario",
      "services/messaging/message_batching.py::MessageBatcher._handle_message_internal",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator._calculate_quality_metrics",
      "security/audit/vulnerability_scanner.py::StaticAnalysisScanner._check_insecure_configurations",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner._apply_cleaning_pipeline",
      "security/audit/vulnerability_scanner.py::DynamicAnalysisScanner._test_authentication_vulnerabilities",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker._build_hierarchical_networks",
      "services/persistence/repositories.py::CustomerRepository.get_by_phone",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator.log_data_access",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager.check_approval_deadlines",
      "services/ticket_management/ticket_service.py::TicketService.create_ticket",
      "mock_data/tax_calendars.py::get_notification_preferences",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator._check_data_minimization",
      "scripts/validate-workflow.py::validate_compliance_features",
      "mock_data/tax_calendars.py::get_deadline_description",
      "services/ticket_management/ticket_service.py::TicketService.initialize",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.validate_legal_consistency",
      "tests/tools/test_lead_qualification_tool.py::TestLeadQualificationIntegration.test_lead_qualification_market_segments",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner.clean_legal_text",
      "mock_data/consultant_schedules.py::calculate_optimal_meeting_times",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager._initialize_stakeholder_profiles",
      "security/audit/vulnerability_scanner.py::StaticAnalysisScanner._scan_config_file",
      "scripts/dependency_analyzer.py::ImportUsageVisitor.visit_Call",
      "agents/core/guardrails.py::apply_guardrails",
      "services/data_acquisition/texas_comptroller_scraper.py::TexasComptrollerScraper._extract_section_number",
      "config/ai_configuration.py::should_escalate_conversation",
      "security/audit/vulnerability_scanner.py::StaticAnalysisScanner.scan_code_directory",
      "services/vector_store/semantic_search.py::create_property_tax_search",
      "services/persistence/redis_conversation_store.py::RedisConversationStore.get_context",
      "services/voice/property_tax_voice_agent.py::entrypoint",
      "services/messaging/property_tax_templates.py::PropertyTaxTemplates.send_quick_actions_buttons",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator._check_access_control_compliance",
      "config/compliance_settings.py::TDLRComplianceSettings.is_restricted_information",
      "agents/core/property_tax_assistant_v3.py::WorkflowAssistant.__init__",
      "tests/conftest.py::test_user",
      "services/data_acquisition/texas_comptroller_scraper.py::TexasComptrollerScraper._classify_document_type",
      "services/data_acquisition/document_processor.py::DocumentProcessor.extract_metadata",
      "config/security_policies.py::SecurityPolicies.get_security_configuration",
      "testing/performance/load_testing_suite.py::LoadTestingSuite.__init__",
      "services/voice/voice_config.py::VoiceConfig.__post_init__",
      "config/security_policies.py::SecurityPolicies.get_policies_by_category",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator.__init__",
      "mock_data/demo_customer_personas.py::DemoCustomerPersonas._create_personas",
      "services/data_acquisition/document_processor.py::DocumentProcessor._extract_deadlines",
      "testing/performance/load_testing_suite.py::VirtualUser.__init__",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker.save_citations_to_storage",
      "config/performance_thresholds.py::PerformanceThresholds.validate_performance_result",
      "services/messaging/message_batching.py::MessageBatcher._cleanup_expired_batches",
      "services/persistence/repositories.py::CustomerRepository.get_by_instagram_id",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler._try_send_interactive_response",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator._export_to_csv",
      "agents/simplified/ticket_tools.py::create_support_ticket",
      "services/messaging/whatsapp_client.py::WhatsAppClient.send_text_message",
      "services/data_acquisition/county_appraisal_scraper.py::scrape_county_appraisal_data",
      "services/vector_store/legal_document_indexer.py::LegalDocumentVectorStore._analyze_legal_context",
      "services/persistence/redis_conversation_store.py::RedisConversationStore._get_conversation_key",
      "tests/tools/test_lead_qualification_tool.py::TestLeadQualificationTool.test_lead_qualification_low_value_property",
      "config/performance_thresholds.py::PerformanceThresholds.get_load_test_config",
      "services/data_acquisition/document_processor.py::DocumentProcessor._chunk_faq_text",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._extract_qa_pairs",
      "demo/scenarios/assessment_appeal_scenarios.py::AssessmentAppealDemoScenarios.get_scenarios_by_complexity",
      "security/audit/vulnerability_scanner.py::DynamicAnalysisScanner.scan_web_application",
      "agents/tools/document_processing_tool.py::simulate_ocr_processing",
      "tests/tools/test_savings_calculator_tool.py::TestSavingsCalculatorIntegration.test_multiple_property_types_comparison",
      "agents/simplified/enhanced_workflow_tools.py::suggest_assessment_services",
      "services/messaging/message_batching.py::MessageBatch.add_message",
      "demo/scenarios/escalation_scenarios.py::EscalationDemoScenarios.get_all_scenarios",
      "compliance/tdlr/public_records_handler.py::PublicRecordsHandler.handle_request_appeal",
      "services/date_intelligence.py::get_current_time_info",
      "agents/core/property_tax_assistant_v3.py::escalate_to_human_agent",
      "security/audit/vulnerability_scanner.py::StaticAnalysisScanner._check_xss_patterns",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._process_statute_document",
      "services/persistence/redis_conversation_store.py::RedisConversationStore.__init__",
      "scripts/test-workflow.py::main",
      "services/utils/date_parser.py::format_date_user_friendly",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._process_form_document",
      "demo/scenarios/escalation_scenarios.py::EscalationDemoScenarios._generate_scenarios",
      "services/data_acquisition/county_appraisal_scraper.py::CountyAppraisalScraper.__aenter__",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager.remove_legal_hold",
      "config/ai_configuration.py::PropertyTaxAIConfig.is_within_legal_boundaries",
      "services/data_acquisition/document_processor.py::DocumentProcessor._extract_property_types",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._build_knowledge_graph",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder.categorize_content",
      "tests/tools/test_property_validation_tool.py::TestPropertyValidationTool.test_property_validation_error_handling",
      "demo/scenarios/exemption_application_scenarios.py::ExemptionApplicationDemoScenarios._create_disability_scenarios",
      "services/ticket_management/ticket_service.py::TicketService.get_ticket",
      "scripts/dependency_analyzer.py::DependencyAnalyzer._generate_import_analysis",
      "services/messaging/property_tax_templates.py::get_property_tax_templates",
      "services/communication/message_handler.py::UniversalMessageHandler.__init__",
      "demo/scenarios/__init__.py::DemoScenarioManager.get_scenario_for_demo",
      "testing/performance/stress_testing_framework.py::run_stress_test_example",
      "compliance/tdlr/public_records_handler.py::PublicRecordsHandler.validate_compliance_with_texas_gov_code_552",
      "demo/scenarios/__init__.py::DemoScenarioManager._get_category_description",
      "demo/scenarios/payment_processing_scenarios.py::PaymentProcessingDemoScenarios.get_random_scenario",
      "demo/scenarios/__init__.py::DemoScenarioManager._get_all_personas",
      "agents/tools/consultation_scheduling_tool.py::cancel_appointment",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder._add_taxonomy_node",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler._run_county_collection",
      "demo/scenarios/exemption_application_scenarios.py::ExemptionApplicationDemoScenarios._create_agricultural_scenarios",
      "config/ai_configuration.py::PropertyTaxAIConfig.get_domain_config",
      "demo/environment/demo_configuration.py::DemoConfigurationManager.get_demo_database_config",
      "services/persistence/analytics_repository.py::AnalyticsRepository.get_conversion_metrics",
      "agents/simplified/property_document_tools.py::analyze_prescription_image_tool_sync",
      "agents/tools/property_validation_tool.py::format_property_response",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.get_validation_summary",
      "services/vector_store/property_tax_embeddings.py::PropertyTaxEmbeddings.get_property_tax_context_vector",
      "services/voice/voice_chat_state.py::VoiceChatStateManager.request_prescription_via_whatsapp",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._scope_to_document_type",
      "tests/tools/test_runner.py::run_individual_tool_tests",
      "services/messaging/property_tax_templates.py::PropertyTaxTemplates.send_payment_reminder",
      "services/voice/livekit_data_bridge.py::LiveKitDataBridge.get_active_voice_rooms",
      "services/voice/property_tax_voice_agent.py::CenturyPropertyTaxAssistant.__init__",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager._delete_record",
      "demo/environment/demo_reset_manager.py::DemoResetManager._reset_payment_simulation_data",
      "services/messaging/message_batching.py::MessageBatcher._process_batch",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder._build_exemptions_taxonomy",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder.__init__",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator._generate_presentation_title",
      "demo/scenarios/__init__.py::DemoScenarioManager.__init__",
      "services/voice/property_tax_voice_agent.py::CenturyPropertyTaxAssistant.property_tax_rag_tool",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner._build_formatting_patterns",
      "demo/scenarios/exemption_application_scenarios.py::ExemptionApplicationDemoScenarios.get_all_scenarios",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._apply_final_filtering",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager.register_record",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner._build_citation_patterns",
      "services/payments/razorpay_integration.py::RazorpayService.create_order",
      "scripts/validate-workflow.py::validate_tool_implementation",
      "src/api/whatsapp_webhooks.py::_handle_whatsapp_status",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator.generate_presentation_charts",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator._generate_key_benefits",
      "demo/scenarios/exemption_application_scenarios.py::ExemptionApplicationDemoScenarios.get_scenarios_by_exemption_type",
      "services/data_acquisition/county_appraisal_scraper.py::CountyAppraisalScraper.scrape_county",
      "config/compliance_settings.py::TDLRComplianceSettings.is_public_record_category",
      "demo/scenarios/multi_property_scenarios.py::MultiPropertyDemoScenarios._create_simple_portfolio_scenarios",
      "src/api/report_management.py::assessment_report_management_page",
      "testing/performance/stress_testing_framework.py::SystemMonitor.stop_monitoring",
      "demo/scenarios/__init__.py::get_all_demo_scenarios",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker.build_citation_networks",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker._analyze_by_scenario",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow.start_conversation",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._calculate_semantic_relevance_score",
      "services/payments/mock_razorpay.py::MockRazorpayService.get_payment_link_details",
      "demo/scenarios/escalation_scenarios.py::EscalationDemoScenarios.get_scenarios_by_trigger",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator._calculate_overall_score",
      "services/data_acquisition/document_processor.py::DocumentProcessor._clean_legal_text",
      "demo/environment/demo_reset_manager.py::DemoResetManager.__init__",
      "services/utils/retry_handler.py::is_retryable_exception",
      "agents/tools/document_processing_tool.py::compare_document_values",
      "scripts/dependency_analyzer.py::DependencyAnalyzer._generate_risk_assessment",
      "services/messaging/message_batching.py::MessageBatcher.add_message_handler",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._request_missing_information",
      "tests/conftest.py::memory_state_manager",
      "mock_data/property_records.py::generate_property_characteristics",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker.record_user_satisfaction",
      "services/persistence/redis_conversation_store.py::RedisConversationStore._get_context_key",
      "config/response_templates.py::get_template",
      "tests/tools/test_savings_calculator_tool.py::TestSavingsCalculatorTool.test_savings_calculation_appeal_scenarios",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch.__init__",
      "tests/tools/test_savings_calculator_tool.py::TestSavingsCalculatorTool.test_compare_county_rates",
      "services/ticket_management/webhook_interceptor.py::WebhookInterceptor.__init__",
      "services/voice/voice_config.py::VoiceConfig.assess_urgency_with_llm",
      "scripts/validate-workflow.py::validate_workflow_paths",
      "testing/performance/stress_testing_framework.py::StressPatternGenerator.linear_ramp",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager.request_approval_review",
      "services/knowledge_base/legal_text_cleaner.py::test_cleaner",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker._get_performance_status",
      "security/audit/vulnerability_scanner.py::DynamicAnalysisScanner.__init__",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._rank_and_score_results",
      "services/voice/livekit_data_bridge.py::LiveKitDataBridge.unregister_voice_room",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._document_matches_scope",
      "testing/performance/load_testing_suite.py::LoadTestingSuite._percentile",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager.generate_retention_report",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner._apply_document_specific_formatting",
      "src/main.py::root",
      "services/vector_store/property_tax_embeddings.py::PropertyTaxEmbeddings._optimize_text_for_property_tax",
      "services/communication/message_handler.py::UniversalMessageHandler._handle_batched_message",
      "demo/environment/demo_configuration.py::DemoConfigurationManager.get_demo_redis_config",
      "testing/performance/stress_testing_framework.py::StressTestingFramework._detect_failure_modes",
      "agents/simplified/enhanced_workflow_tools.py::_check_panel_pricing",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._rank_legal_reasoning_results",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner._calculate_cleaning_quality_score",
      "agents/tools/property_validation_tool.py::normalize_address",
      "services/messaging/message_batching.py::MessageBatcher.process_message",
      "services/communication/message_handler.py::UniversalMessageHandler._get_session_id",
      "compliance/tdlr/public_records_handler.py::PublicRecordsHandler.__init__",
      "services/messaging/whatsapp_client.py::WhatsAppClient.parse_webhook_message",
      "scripts/cleanup/clear-all-data.py::clear_sqlite_data",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._handle_problem_identification",
      "agents/core/property_tax_assistant_v3.py::process_property_tax_message",
      "services/persistence/redis_conversation_store.py::RedisConversationStore.health_check",
      "tests/conftest.py::engine_api",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch.initialize",
      "demo/scenarios/payment_processing_scenarios.py::PaymentProcessingDemoScenarios.get_all_scenarios",
      "services/payments/mock_razorpay.py::complete_mock_payment",
      "agents/tools/lead_qualification_tool.py::filter_leads_by_criteria",
      "agents/tools/consultation_scheduling_tool.py::get_consultant_availability_summary",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator._build_accuracy_patterns",
      "agents/tools/property_validation_tool.py::get_supported_counties",
      "services/ticket_management/models.py::SupportTicket.to_dict",
      "services/persistence/redis_conversation_store.py::reset_conversation_store",
      "services/voice/voice_config.py::VoiceConfig.is_business_hours",
      "services/messaging/message_batching.py::MessageBatcher._ensure_cleanup_task",
      "agents/core/guardrails.py::PropertyTaxGuardrails._add_limitation_clarifications",
      "demo/scenarios/payment_processing_scenarios.py::PaymentProcessingDemoScenarios._create_online_payment_scenarios",
      "mock_data/tax_calendars.py::get_current_deadlines",
      "config/ai_configuration.py::get_model_for_use_case",
      "agents/tools/deadline_tracking_tool.py::calculate_penalty_savings",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder._load_classification_patterns",
      "demo/scenarios/escalation_scenarios.py::EscalationDemoScenarios.get_scenarios_by_urgency",
      "config/performance_thresholds.py::PerformanceThresholds.get_scenario_configuration_summary",
      "agents/core/property_tax_assistant_v3.py::_handle_property_document_confirmation",
      "agents/tools/lead_qualification_tool.py::lead_qualification_tool",
      "scripts/test-workflow.py::test_cash_payment_confirmation",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder._build_property_types_taxonomy",
      "demo/environment/demo_configuration.py::DemoConfigurationManager.get_scenario_config",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker.get_real_time_metrics",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler._handle_expert_consultation",
      "scripts/dependency_analyzer.py::DependencyAnalyzer._generate_statistics",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler._handle_whatsapp_message",
      "security/audit/vulnerability_scanner.py::StaticAnalysisScanner._scan_javascript_file",
      "services/vector_store/property_tax_embeddings.py::PropertyTaxEmbeddings.find_similar_property_tax_terms",
      "demo/scenarios/multi_property_scenarios.py::MultiPropertyDemoScenarios.get_scenarios_by_portfolio_type",
      "demo/environment/demo_reset_manager.py::DemoResetManager._reset_demo_user_states",
      "services/vector_store/legal_document_indexer.py::LegalDocumentVectorStore.search_with_legal_reasoning",
      "services/data_acquisition/county_appraisal_scraper.py::test_county_scraper",
      "tests/tools/test_savings_calculator_tool.py::TestSavingsCalculatorIntegration.test_performance_bulk_calculations",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._handle_payment_processing",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker.export_metrics",
      "demo/scenarios/basic_inquiry_scenarios.py::BasicInquiryDemoScenarios.get_scenario_by_id",
      "config/response_templates.py::format_response_with_context",
      "services/ticket_management/webhook_interceptor.py::WebhookInterceptor.handle_customer_message",
      "services/persistence/order_storage.py::OrderStorageService.get_order",
      "services/communication/message_handler.py::fetch_instagram_user_info",
      "scripts/cleanup/clear-sessions-only.py::main",
      "mock_data/demo_customer_personas.py::DemoCustomerPersonas._create_dispute_personas",
      "services/messaging/whatsapp_client.py::WhatsAppClient.verify_webhook_signature",
      "config/ai_configuration.py::PropertyTaxAIConfig.__init__",
      "security/audit/vulnerability_scanner.py::VulnerabilityScanner._generate_vulnerability_summary",
      "src/api/whatsapp_webhooks.py::whatsapp_webhook_verify",
      "scripts/test-mock-payment.py::test_mock_payment_url_format",
      "services/data_acquisition/scheduler.py::get_scheduler",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._determine_relationship_type",
      "tests/tools/test_runner.py::main",
      "demo/scenarios/exemption_application_scenarios.py::ExemptionApplicationDemoScenarios._create_homestead_scenarios",
      "services/persistence/analytics_repository.py::AnalyticsRepository.start_user_journey",
      "src/api/integrated_webhooks.py::force_process_batch",
      "services/voice/voice_chat_state.py::get_voice_chat_state_manager",
      "services/messaging/message_batching.py::MessageBatcher.get_batch_stats",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.validate_knowledge_entry",
      "mock_data/document_templates.py::generate_sample_document_data",
      "agents/tools/savings_calculator_tool.py::compare_county_rates",
      "scripts/test-workflow.py::test_report_status",
      "services/messaging/whatsapp_client.py::cleanup_whatsapp_client",
      "agents/tools/document_processing_tool.py::generate_action_suggestions",
      "demo/scenarios/assessment_appeal_scenarios.py::AssessmentAppealDemoScenarios.get_scenarios_by_type",
      "services/date_intelligence.py::DateIntelligenceService._is_business_hours",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator.log_compliance_violation",
      "mock_data/demo_customer_personas.py::DemoCustomerPersonas.__init__",
      "services/messaging/message_batching.py::MessageBatcher._schedule_batch_processing",
      "demo/environment/demo_configuration.py::DemoConfigurationManager.import_demo_config",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator._run_validation_rule",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager._archive_record",
      "services/data_acquisition/document_processor.py::DocumentProcessor._extract_tax_concepts",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator.export_audit_trail",
      "demo/scenarios/__init__.py::validate_demo_scenarios",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor.process_documents_to_knowledge_base",
      "services/persistence/database.py::DatabaseManager.get_session",
      "services/payments/mock_razorpay.py::MockRazorpayService.get_payment_details",
      "services/data_acquisition/document_processor.py::DocumentProcessor._extract_fee_amounts",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker._build_topical_relationships",
      "agents/simplified/ticket_tools.py::create_support_ticket_async",
      "agents/simplified/enhanced_workflow_tools.py::confirm_order_cash_payment",
      "demo/scenarios/__init__.py::DemoScenarioManager.get_scenarios_by_difficulty",
      "agents/tools/savings_calculator_tool.py::calculate_multi_year_projections",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._expand_query_with_property_tax_terms",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler._setup_default_jobs",
      "services/data_acquisition/document_processor.py::process_scraped_documents",
      "services/persistence/database.py::get_database_manager",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager._send_approval_notification",
      "demo/environment/demo_reset_manager.py::DemoResetManager._reset_conversation_data",
      "services/voice/voice_setup.py::KrishnaVoiceSetup.setup_telephony_integration",
      "scripts/dependency_analyzer.py::ImportUsageVisitor.visit_AsyncFunctionDef",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator.generate_compliance_report",
      "agents/tools/deadline_tracking_tool.py::generate_quick_actions",
      "services/messaging/message_batching.py::MessageBatch.is_expired",
      "tests/tools/test_property_validation_tool.py::TestPropertyValidationTool.test_property_validation_criteria_search",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow.get_conversation_context",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator.validate_data_handling",
      "compliance/tdlr/public_records_handler.py::PublicRecordsHandler._initiate_request_review",
      "agents/tools/deadline_tracking_tool.py::parse_date_safely",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow.__init__",
      "config/performance_thresholds.py::PerformanceThresholds.get_threshold",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker.__init__",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator._generate_executive_summary",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler.start_scheduler",
      "agents/core/conversation_flows.py::process_property_tax_message",
      "agents/tools/document_processing_tool.py::extract_property_summary",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker._get_recent_metrics",
      "services/persistence/repositories.py::CustomerRepository.create_or_update",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner.__init__",
      "scripts/cleanup/clear-all-sessions.py::main",
      "agents/simplified/ticket_tools.py::check_ticket_status",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker.load_citations_from_storage",
      "demo/scenarios/escalation_scenarios.py::EscalationDemoScenarios._create_technical_escalation_scenarios",
      "demo/scenarios/exemption_application_scenarios.py::ExemptionApplicationDemoScenarios.get_scenarios_by_stage",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator.log_privacy_request",
      "demo/scenarios/multi_property_scenarios.py::MultiPropertyDemoScenarios._create_complex_portfolio_scenarios",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler.stop_scheduler",
      "services/messaging/message_batching.py::MessageBatcher._should_process_immediately",
      "scripts/validate-workflow.py::main",
      "mock_data/property_records.py::generate_property_records",
      "testing/performance/stress_testing_framework.py::StressTestingFramework._collect_real_time_metrics",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator._build_quality_thresholds",
      "src/api/business_webhooks.py::get_business_statistics",
      "agents/core/guardrails.py::PropertyTaxGuardrails.check_escalation_needed",
      "testing/performance/stress_testing_framework.py::StressTestingFramework._execute_stress_pattern",
      "mock_data/assessment_patterns.py::determine_market_segment",
      "services/vector_store/legal_document_indexer.py::LegalDocumentVectorStore._classify_legal_query",
      "config/security_policies.py::SecurityPolicies.get_mandatory_policies",
      "demo/scenarios/basic_inquiry_scenarios.py::BasicInquiryDemoScenarios._create_property_value_scenarios",
      "demo/environment/demo_reset_manager.py::DemoResetManager.perform_full_reset",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker._build_topic_networks",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator._extract_data_subject_id",
      "config/security_policies.py::SecurityPolicies.get_policies_by_framework",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager.export_approval_report",
      "config/settings.py::Settings.print_config",
      "config/compliance_settings.py::TDLRComplianceSettings.get_retention_period_for_classification",
      "agents/simplified/property_document_tools.py::create_prescription_workflow_tools",
      "mock_data/consultant_schedules.py::get_consultant_recommendations",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._get_information_request",
      "services/date_intelligence.py::DateIntelligenceService.parse_date_intelligently",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler.get_handler_stats",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder._build_legal_framework_taxonomy",
      "scripts/validate-workflow.py::validate_data_structures",
      "testing/performance/stress_testing_framework.py::SystemMonitor.__init__",
      "agents/tools/document_processing_tool.py::extract_from_plain_text",
      "demo/scenarios/multi_property_scenarios.py::MultiPropertyDemoScenarios.get_scenarios_by_persona",
      "agents/simplified/property_document_tools.py::confirm_prescription_booking",
      "mock_data/tax_calendars.py::categorize_deadline",
      "security/audit/vulnerability_scanner.py::VulnerabilityScanner.__init__",
      "services/persistence/repositories.py::MessageHistoryRepository.__init__",
      "mock_data/consultant_schedules.py::find_available_time_slots",
      "services/data_acquisition/document_processor.py::DocumentProcessor._chunk_generic_text",
      "services/data_acquisition/document_processor.py::DocumentProcessor._extract_legal_concepts",
      "security/audit/vulnerability_scanner.py::StaticAnalysisScanner.__init__",
      "services/voice/livekit_data_bridge.py::LiveKitDataBridge.send_prescription_data",
      "tests/conftest.py::test_requirements",
      "mock_data/tax_calendars.py::calculate_payment_amount",
      "agents/simplified/enhanced_workflow_tools.py::_create_order_async",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._rank_semantic_results",
      "agents/core/guardrails.py::PropertyTaxGuardrails.apply_response_modifications",
      "services/persistence/analytics_repository.py::AnalyticsRepository.__init__",
      "scripts/test-workflow.py::test_order_creation",
      "demo/scenarios/__init__.py::DemoScenarioManager.get_scenarios_by_persona",
      "services/ticket_management/ticket_service.py::TicketService.get_customer_tickets",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager._initialize_approval_requirements",
      "tests/tools/test_runner.py::test_tool_integration",
      "services/messaging/message_batching.py::MessageBatcher.force_process_user_batch",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator.__init__",
      "scripts/dependency_analyzer.py::DependencyAnalyzer.analyze_codebase",
      "config/response_templates.py::get_error_message",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner._normalize_citations",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor.initialize",
      "services/ticket_management/webhook_interceptor.py::WebhookInterceptor.initialize",
      "services/vector_store/legal_document_indexer.py::LegalDocumentVectorStore.index_processed_documents",
      "services/persistence/analytics_repository.py::AnalyticsRepository.record_drop_off",
      "tests/tools/test_lead_qualification_tool.py::TestLeadQualificationTool.test_lead_qualification_high_value_property",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner.clean_general_text",
      "services/date_intelligence.py::parse_date_intelligently",
      "agents/tools/property_validation_tool.py::property_validation_tool",
      "services/communication/message_handler.py::UniversalMessageHandler._prepare_message_text",
      "services/knowledge_base/content_processor.py::test_processor",
      "services/persistence/database.py::DatabaseManager.health_check",
      "src/api/report_management.py::update_assessment_report_status",
      "tests/run_tests.py::run_command",
      "demo/environment/demo_configuration.py::DemoConfigurationManager.__init__",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._execute_search_by_type",
      "services/data_acquisition/county_appraisal_scraper.py::CountyAppraisalScraper.__init__",
      "config/response_templates.py::get_greeting_template",
      "services/data_acquisition/county_appraisal_scraper.py::CountyAppraisalScraper._extract_title",
      "services/messaging/property_tax_templates.py::PropertyTaxTemplates.get_template_list",
      "security/audit/vulnerability_scanner.py::run_vulnerability_scan",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator.__init__",
      "testing/performance/load_testing_suite.py::LoadTestingSuite.export_results",
      "mock_data/demo_customer_personas.py::DemoCustomerPersonas._create_commercial_personas",
      "agents/core/property_tax_assistant_v3.py::WorkflowAssistant.__call__",
      "agents/tools/document_processing_tool.py::get_document_type_info",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker.find_citations_by_topic",
      "security/audit/vulnerability_scanner.py::StaticAnalysisScanner._check_hardcoded_secrets",
      "tests/tools/test_lead_qualification_tool.py::TestLeadQualificationTool.test_lead_qualification_invalid_inputs",
      "scripts/test-workflow.py::test_payment_options",
      "services/messaging/message_batching.py::MessageBatcher._process_single_message",
      "security/audit/vulnerability_scanner.py::StaticAnalysisScanner._check_insecure_settings",
      "services/vector_store/legal_document_indexer.py::LegalDocumentVectorStore._add_documents_to_store",
      "tests/tools/test_property_validation_tool.py::TestPropertyValidationTool.test_format_property_response",
      "mock_data/demo_customer_personas.py::DemoCustomerPersonas._create_agricultural_personas",
      "services/vector_store/property_tax_embeddings.py::get_property_tax_embeddings",
      "demo/scenarios/exemption_application_scenarios.py::ExemptionApplicationDemoScenarios.get_random_scenario",
      "compliance/tdlr/public_records_handler.py::PublicRecordsHandler.generate_public_records_report",
      "scripts/cleanup/clear-user-redis.py::clear_user_data",
      "mock_data/assessment_patterns.py::get_increase_category",
      "mock_data/document_templates.py::get_document_type_from_content",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner._format_form_text",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._calculate_legal_reasoning_boost",
      "services/vector_store/property_tax_embeddings.py::PropertyTaxEmbeddings._get_base_embeddings",
      "services/data_acquisition/texas_comptroller_scraper.py::ScrapedDocument.__post_init__",
      "mock_data/demo_customer_personas.py::DemoCustomerPersonas._create_senior_citizen_personas",
      "agents/simplified/enhanced_workflow_tools.py::create_order",
      "config/settings.py::Settings.validate",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._process_by_stage",
      "demo/scenarios/exemption_application_scenarios.py::ExemptionApplicationDemoScenarios._create_solar_scenarios",
      "scripts/dependency_analyzer.py::DependencyAnalyzer.dfs",
      "services/payments/mock_razorpay.py::MockRazorpayService.create_payment_link",
      "tests/tools/test_property_validation_tool.py::TestPropertyValidationTool.test_property_validation_not_found",
      "tests/tools/test_property_validation_tool.py::TestPropertyValidationTool.test_validate_multiple_properties",
      "services/payments/mock_razorpay.py::create_mock_razorpay_payment_link",
      "demo/scenarios/payment_processing_scenarios.py::PaymentProcessingDemoScenarios._create_hardship_scenarios",
      "mock_data/tax_rates.py::calculate_exemption_value",
      "agents/tools/consultation_scheduling_tool.py::reschedule_appointment",
      "scripts/test_date_intelligence.py::test_multiple_concurrent_bookings",
      "services/date_intelligence.py::DateIntelligenceService._parse_named_days",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker._build_authority_networks",
      "services/payments/mock_razorpay.py::get_mock_payment_data",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager._log_retention_event",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler._run_comptroller_collection",
      "demo/scenarios/escalation_scenarios.py::EscalationDemoScenarios._create_urgent_deadline_scenarios",
      "services/persistence/order_storage.py::OrderStorageService.store_order",
      "demo/environment/demo_configuration.py::DemoConfigurationManager.enable_scenario",
      "security/audit/vulnerability_scanner.py::StaticAnalysisScanner._find_files",
      "src/api/integrated_webhooks.py::verify_webhook",
      "tests/conftest.py::webhook_data",
      "services/data_acquisition/document_processor.py::DocumentProcessor._remove_common_artifacts",
      "demo/scenarios/escalation_scenarios.py::EscalationDemoScenarios.get_random_scenario",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler.add_job",
      "services/voice/voice_chat_state.py::VoiceChatStateManager.__init__",
      "tests/run_tests.py::main",
      "testing/performance/load_testing_suite.py::LoadTestingSuite._analyze_threshold_compliance",
      "scripts/test-workflow.py::test_sample_collection_scheduling",
      "tests/tools/test_runner.py::test_mock_data_availability",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker._analyze_response_times",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker.record_accuracy_score",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.validate_authority",
      "demo/scenarios/payment_processing_scenarios.py::PaymentProcessingDemoScenarios.get_scenario_by_id",
      "agents/tools/property_validation_tool.py::get_property_type_info",
      "services/data_acquisition/texas_comptroller_scraper.py::TexasComptrollerScraper.scrape_linked_pages",
      "services/voice/voice_chat_state.py::VoiceChatStateManager.start_voice_call",
      "scripts/test_intelligent_booking.py::test_intelligent_booking",
      "services/data_acquisition/texas_comptroller_scraper.py::scrape_texas_comptroller_data",
      "security/audit/vulnerability_scanner.py::StaticAnalysisScanner._check_sql_injection_patterns",
      "services/vector_store/property_tax_embeddings.py::test_embeddings",
      "services/voice/voice_setup.py::main",
      "tests/tools/test_lead_qualification_tool.py::TestLeadQualificationTool.test_filter_leads_by_criteria",
      "services/vector_store/legal_document_indexer.py::LegalDocumentVectorStore._organize_documents_by_type",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._rank_hybrid_results",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager.enforce_retention_policies",
      "src/api/integrated_webhooks.py::get_stats",
      "services/persistence/order_storage.py::async_to_sync",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._build_concept_hierarchies",
      "services/persistence/repositories.py::CustomerRepository.get_recent_customers",
      "services/data_acquisition/document_processor.py::DocumentProcessor.__init__",
      "scripts/dependency_analyzer.py::DependencyAnalyzer._calculate_import_statistics",
      "services/data_acquisition/scheduler.py::test_scheduler",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator.generate_compliance_audit_report",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._analyze_statute_structure",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker._build_citation_patterns",
      "services/voice/livekit_data_bridge.py::LiveKitDataBridge._get_room_name",
      "config/ai_configuration.py::PropertyTaxAIConfig.get_model_config",
      "demo/scenarios/__init__.py::DemoScenarioManager.validate_scenarios",
      "testing/performance/load_testing_suite.py::LoadTestingSuite.run_comprehensive_load_test_suite",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker._count_by_attribute",
      "scripts/test-workflow.py::test_pin_validation",
      "mock_data/assessment_patterns.py::calculate_estimated_savings",
      "services/vector_store/property_tax_embeddings.py::PropertyTaxEmbeddings._calculate_property_tax_relevance",
      "services/voice/voice_chat_state.py::VoiceChatStateManager.is_voice_call_active",
      "services/voice/livekit_data_bridge.py::LiveKitDataBridge.is_voice_call_active",
      "src/api/integrated_webhooks.py::handle_webhook",
      "demo/scenarios/escalation_scenarios.py::EscalationDemoScenarios.__init__",
      "agents/simplified/property_document_tools.py::analyze_property_document_tool_async",
      "agents/core/property_tax_assistant_v3.py::PropertyTaxToolNode.__call__",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._process_single_document",
      "scripts/test-mock-payment.py::test_mock_payment_verification",
      "services/messaging/property_tax_templates.py::PropertyTaxTemplates.send_appeal_guidance",
      "agents/tools/document_processing_tool.py::document_processing_tool",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._process_general_document",
      "compliance/tdlr/public_records_handler.py::PublicRecordsHandler._classify_record_for_public_access",
      "testing/performance/stress_testing_framework.py::StressTestingFramework._analyze_performance_degradation",
      "services/payments/mock_razorpay.py::MockRazorpayService.simulate_payment_success",
      "mock_data/tax_rates.py::calculate_total_tax_rate",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder.build_topic_hierarchy",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager.__init__",
      "services/persistence/repositories.py::PropertyAssessmentRequestRepository.create_request",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder.get_category_suggestions",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager._find_applicable_policy",
      "services/data_acquisition/texas_comptroller_scraper.py::TexasComptrollerScraper.__aexit__",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker._extract_topics_from_context",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._apply_legal_reasoning_analysis",
      "testing/performance/stress_testing_framework.py::StressTestingFramework._run_chaos_scenario",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner._format_faq_text",
      "demo/scenarios/payment_processing_scenarios.py::PaymentProcessingDemoScenarios._generate_scenarios",
      "services/payments/razorpay_integration.py::RazorpayService.get_payment_details",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator._create_metrics_chart",
      "mock_data/demo_customer_personas.py::DemoCustomerPersonas.get_random_persona",
      "services/data_acquisition/county_appraisal_scraper.py::CountyAppraisalScraper._extract_county_citations",
      "demo/scenarios/escalation_scenarios.py::EscalationDemoScenarios._create_multi_jurisdiction_scenarios",
      "services/messaging/whatsapp_image_handler.py::WhatsAppImageHandler._get_media_url",
      "services/data_acquisition/county_appraisal_scraper.py::CountyAppraisalScraper.__aexit__",
      "services/communication/message_handler.py::UniversalMessageHandler._intelligent_message_preparation",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._generate_recommendations",
      "demo/scenarios/__init__.py::get_demo_summary",
      "security/audit/vulnerability_scanner.py::StaticAnalysisScanner._scan_python_file",
      "demo/scenarios/basic_inquiry_scenarios.py::BasicInquiryDemoScenarios.get_all_scenarios",
      "mock_data/property_records.py::find_property_by_parcel_id",
      "agents/tools/document_processing_tool.py::process_multiple_documents",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker.get_citation_stats",
      "services/payments/razorpay_integration.py::verify_payment_completion",
      "tests/conftest.py::metrics_collector",
      "services/voice/voice_setup.py::KrishnaVoiceSetup.deploy_voice_agent",
      "scripts/test_date_intelligence.py::test_natural_language_dates",
      "services/voice/voice_setup.py::KrishnaVoiceSetup.create_healthcare_room",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager._initialize_default_policies",
      "services/communication/message_handler.py::UniversalMessageHandler._parse_messaging_event",
      "services/vector_store/legal_document_indexer.py::LegalDocumentVectorStore.get_vector_store_stats",
      "config/response_templates.py::get_scenario_from_message",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._enhance_query_for_semantic_search",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._generate_title_from_content",
      "services/persistence/repositories.py::PropertyAssessmentRequestRepository.update_status",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder._build_base_taxonomy",
      "services/persistence/redis_conversation_store.py::RedisConversationStore.clear_conversation",
      "services/date_intelligence.py::DateIntelligenceService._validate_booking_date",
      "demo/scenarios/exemption_application_scenarios.py::ExemptionApplicationDemoScenarios.get_scenarios_by_persona",
      "services/ticket_management/ticket_service.py::TicketService.add_message",
      "tests/conftest.py::sqlite_state_manager",
      "services/messaging/whatsapp_client.py::WhatsAppClient.send_interactive_message",
      "scripts/dependency_analyzer.py::ImportUsageVisitor.__init__",
      "compliance/tdlr/public_records_handler.py::PublicRecordsHandler._calculate_average_response_time",
      "testing/performance/stress_testing_framework.py::SystemMonitor.get_peak_usage",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator._generate_strategic_recommendations",
      "config/response_templates.py::get_legal_disclaimer",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker.get_citation_authority_score",
      "services/date_intelligence.py::DateIntelligenceService.__init__",
      "services/voice/livekit_data_bridge.py::notify_prescription_ready",
      "scripts/cleanup/clear-user-redis.py::main",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner._format_procedure_text",
      "services/voice/voice_chat_state.py::VoiceChatStateManager.get_voice_call_state",
      "tests/tools/test_property_validation_tool.py::TestPropertyValidationTool.test_get_property_type_info",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler.get_collection_history",
      "tests/tools/test_property_validation_tool.py::TestPropertyValidationIntegration.test_end_to_end_property_lookup",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator._handle_data_erasure_request",
      "agents/simplified/enhanced_workflow_tools.py::check_report_status",
      "agents/core/guardrails.py::PropertyTaxGuardrails._get_safe_response",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.validate_cross_references",
      "services/vector_store/legal_document_indexer.py::LegalDocumentVectorStore._initialize_vectorstore",
      "services/persistence/analytics_repository.py::AnalyticsRepository.update_customer_analytics",
      "mock_data/property_records.py::generate_parcel_id",
      "compliance/tdlr/public_records_handler.py::PublicRecordsHandler._extract_keywords_from_description",
      "services/messaging/message_batching.py::MessageBatcher.__init__",
      "services/voice/property_tax_voice_agent.py::_end_call_impl",
      "services/utils/retry_handler.py::CircuitBreaker.call",
      "services/payments/razorpay_integration.py::create_razorpay_payment_link",
      "demo/scenarios/basic_inquiry_scenarios.py::BasicInquiryDemoScenarios._create_payment_due_scenarios",
      "tests/conftest.py::sample_config",
      "services/payments/razorpay_integration.py::RazorpayService.verify_webhook_signature",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker.end_conversation_session",
      "mock_data/demo_customer_personas.py::DemoCustomerPersonas.get_personas_by_type",
      "services/voice/property_tax_voice_agent.py::CenturyPropertyTaxAssistant.get_current_property_document_details",
      "services/data_acquisition/county_appraisal_scraper.py::CountyAppraisalScraper._classify_county_document_type",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner.get_cleaning_suggestions",
      "agents/simplified/enhanced_workflow_tools.py::schedule_sample_collection",
      "services/ticket_management/models.py::AgentSession.to_dict",
      "services/payments/mock_razorpay.py::MockRazorpayService.__init__",
      "testing/performance/load_testing_suite.py::LoadTestingSuite._generate_comprehensive_report",
      "scripts/test-mock-payment.py::test_mock_payment_link_creation",
      "agents/tools/savings_calculator_tool.py::savings_calculator_tool",
      "services/data_acquisition/document_processor.py::DocumentProcessor._chunk_legal_text",
      "services/vector_store/property_tax_embeddings.py::PropertyTaxEmbeddings._calculate_concept_boost",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._find_related_entries",
      "services/messaging/whatsapp_client.py::WhatsAppClient._get_session",
      "testing/performance/stress_testing_framework.py::StressPatternGenerator.exponential_growth",
      "demo/environment/demo_configuration.py::DemoConfigurationManager._save_scenario_configs",
      "demo/environment/demo_reset_manager.py::DemoResetManager.validate_demo_environment",
      "services/data_acquisition/scheduler.py::stop_data_collection_scheduler",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.validate_terminology",
      "demo/scenarios/multi_property_scenarios.py::MultiPropertyDemoScenarios._generate_scenarios",
      "services/voice/property_tax_voice_agent.py::on_data_received",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.validate_currency",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._generate_legal_context",
      "mock_data/demo_customer_personas.py::DemoCustomerPersonas._create_multi_property_personas",
      "services/messaging/whatsapp_image_handler.py::WhatsAppImageHandler._determine_image_format_from_data",
      "agents/tools/consultation_scheduling_tool.py::find_best_consultant_match",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler._schedule_job",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._generate_relevance_explanation",
      "services/persistence/order_storage.py::OrderStorageService.__init__",
      "demo/scenarios/escalation_scenarios.py::EscalationDemoScenarios.get_scenarios_by_escalation_type",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._apply_filters",
      "agents/core/guardrails.py::PropertyTaxGuardrails._remove_guarantee_language",
      "testing/performance/load_testing_suite.py::LoadTestingSuite._calculate_performance_metrics",
      "demo/scenarios/__init__.py::DemoScenarioManager.get_scenarios_by_category",
      "agents/tools/deadline_tracking_tool.py::get_county_comparison",
      "scripts/cleanup/clear-sessions-only.py::clear_session_data",
      "services/vector_store/legal_document_indexer.py::LegalDocumentVectorStore._enhance_chunk_content",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator._generate_appendices",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler.__init__",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler._send_whatsapp_response",
      "services/messaging/whatsapp_client.py::WhatsAppClient._get_messaging_limit",
      "services/date_intelligence.py::DateIntelligenceService._get_available_time_slots",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._hybrid_search",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler._schedule_retry",
      "security/audit/vulnerability_scanner.py::VulnerabilityScanner._check_compliance_status",
      "services/messaging/whatsapp_client.py::WhatsAppClient.get_business_profile",
      "services/utils/retry_handler.py::sync_retry",
      "demo/scenarios/basic_inquiry_scenarios.py::BasicInquiryDemoScenarios._create_tax_amount_scenarios",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._extract_booking_information",
      "compliance/tdlr/public_records_handler.py::PublicRecordsHandler._initialize_default_redaction_rules",
      "services/ticket_management/models.py::TicketMessage.to_dict",
      "tests/conftest.py::invalid_configs",
      "config/ai_configuration.py::PropertyTaxAIConfig.format_response_with_disclaimers",
      "services/messaging/whatsapp_client.py::WhatsAppClient.update_business_profile",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._legal_reasoning_search",
      "demo/scenarios/multi_property_scenarios.py::MultiPropertyDemoScenarios.get_random_scenario",
      "src/main.py::test_whatsapp_api",
      "security/audit/vulnerability_scanner.py::StaticAnalysisScanner._check_dom_vulnerabilities",
      "mock_data/assessment_patterns.py::get_value_range_category",
      "agents/tools/consultation_scheduling_tool.py::get_appointment_preparation_checklist",
      "services/payments/razorpay_integration.py::RazorpayService.create_payment_link",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator._create_compliance_chart",
      "config/ai_configuration.py::PropertyTaxAIConfig.get_legal_disclaimer",
      "services/data_acquisition/texas_comptroller_scraper.py::TexasComptrollerScraper.scrape_all_property_tax_content",
      "services/persistence/repositories.py::MessageHistoryRepository.save_message",
      "services/utils/retry_handler.py::CircuitBreaker._on_success",
      "src/api/whatsapp_webhooks.py::test_template_message",
      "demo/scenarios/assessment_appeal_scenarios.py::AssessmentAppealDemoScenarios._generate_scenarios",
      "services/voice/property_tax_voice_agent.py::_on_participant_disconnected",
      "agents/tools/document_processing_tool.py::enrich_extracted_data",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager.create_approval_workflow",
      "tests/run_tests.py::run_tests",
      "agents/simplified/enhanced_workflow_tools.py::create_payment_link",
      "services/messaging/whatsapp_client.py::WhatsAppClient.send_template_message",
      "services/persistence/repositories.py::PropertyAssessmentServiceRepository.get_by_code",
      "demo/scenarios/escalation_scenarios.py::EscalationDemoScenarios._create_legal_escalation_scenarios",
      "services/knowledge_base/taxonomy_builder.py::test_taxonomy",
      "demo/environment/demo_reset_manager.py::DemoResetManager._reset_demo_property_data",
      "services/date_intelligence.py::DateIntelligenceService._get_next_business_day",
      "compliance/tdlr/public_records_handler.py::PublicRecordsHandler._apply_redactions",
      "demo/scenarios/payment_processing_scenarios.py::PaymentProcessingDemoScenarios._create_refund_scenarios",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._calculate_keyword_relevance_score",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler._process_converted_interactive",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager.generate_approval_dashboard",
      "services/date_intelligence.py::DateIntelligenceService._create_error_response",
      "agents/core/property_tax_assistant_v3.py::create_property_tax_assistant",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator._generate_recommendations",
      "testing/performance/stress_testing_framework.py::StressTestingFramework.__init__",
      "tests/conftest.py::message_registry",
      "config/ai_configuration.py::PropertyTaxAIConfig.should_escalate",
      "testing/performance/stress_testing_framework.py::StressTestingFramework._run_stress_user_session",
      "demo/scenarios/multi_property_scenarios.py::MultiPropertyDemoScenarios.get_portfolio_summary",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator.process_data_subject_request",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._handle_information_gathering",
      "services/ticket_management/ticket_service.py::TicketService.assign_agent",
      "services/voice/voice_chat_state.py::VoiceChatStateManager.get_prescription_processing_status",
      "services/ticket_management/ticket_service.py::TicketService.get_ticket_messages",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner._build_cleaning_rules",
      "config/security_policies.py::SecurityPolicies.validate_security_configuration",
      "mock_data/assessment_patterns.py::get_historical_trends",
      "services/knowledge_base/quality_validator.py::get_quality_validator",
      "demo/scenarios/escalation_scenarios.py::EscalationDemoScenarios._create_emotional_escalation_scenarios",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler._handle_media_message",
      "agents/tools/savings_calculator_tool.py::generate_appeal_scenarios",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder._build_collection_taxonomy",
      "testing/performance/stress_testing_framework.py::SystemMonitor.start_monitoring",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager.get_retention_status",
      "agents/tools/document_processing_tool.py::clean_extracted_value",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator._generate_implementation_timeline",
      "demo/environment/demo_configuration.py::DemoConfigurationManager.get_enabled_scenarios",
      "services/ticket_management/ticket_service.py::TicketService._determine_category",
      "services/persistence/order_storage.py::OrderStorageService.update_order_status",
      "demo/scenarios/basic_inquiry_scenarios.py::BasicInquiryDemoScenarios.get_scenarios_by_type",
      "services/data_acquisition/document_processor.py::DocumentProcessor.calculate_quality_score",
      "services/data_acquisition/texas_comptroller_scraper.py::TexasComptrollerScraper.__aenter__",
      "tests/tools/test_property_validation_tool.py::TestPropertyValidationIntegration.test_performance_multiple_searches",
      "agents/tools/consultation_scheduling_tool.py::generate_appointment_confirmation_details",
      "agents/simplified/property_tax_rag_tool.py::property_tax_assessment_recommendation_async",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.initialize",
      "scripts/dependency_analyzer.py::DependencyAnalyzer._generate_usage_analysis",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._is_document_in_date_range",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._extract_information_from_message",
      "services/payments/razorpay_integration.py::RazorpayService.verify_payment_signature",
      "config/response_templates.py::detect_language_from_message",
      "testing/performance/load_testing_suite.py::LoadTestingSuite._generate_performance_recommendations",
      "mock_data/document_templates.py::generate_mock_ocr_response",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder._build_appeals_taxonomy",
      "demo/scenarios/assessment_appeal_scenarios.py::AssessmentAppealDemoScenarios.get_scenario_by_id",
      "demo/environment/demo_reset_manager.py::DemoResetManager._load_fresh_demo_data",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker.get_related_citations",
      "services/persistence/repositories.py::PropertyAssessmentRequestRepository.get_all_requests",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator._check_encryption_compliance",
      "services/persistence/database.py::DatabaseManager.create_tables",
      "services/data_acquisition/document_processor.py::DocumentProcessor.process_documents_batch",
      "demo/scenarios/multi_property_scenarios.py::MultiPropertyDemoScenarios._create_moderate_portfolio_scenarios",
      "agents/tools/lead_qualification_tool.py::calculate_qualification_score",
      "tests/tools/test_lead_qualification_tool.py::TestLeadQualificationTool.test_lead_qualification_with_assessment_increase",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator._build_validation_rules",
      "agents/simplified/enhanced_workflow_tools.py::validate_zip_code",
      "agents/tools/lead_qualification_tool.py::generate_sales_recommendations",
      "testing/performance/stress_testing_framework.py::StressTestingFramework._generate_stress_test_recommendations",
      "mock_data/demo_customer_personas.py::DemoCustomerPersonas.get_persona_by_id",
      "agents/tools/consultation_scheduling_tool.py::consultation_scheduling_tool",
      "services/persistence/analytics_repository.py::AnalyticsRepository.get_business_intelligence_summary",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator._check_retention_compliance",
      "services/date_intelligence.py::DateIntelligenceService._is_business_day",
      "services/vector_store/property_tax_embeddings.py::PropertyTaxEmbeddings.embed_query",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._enhance_knowledge_entry",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.validate_definitions",
      "services/vector_store/citation_tracker.py::test_citation_tracker",
      "security/audit/vulnerability_scanner.py::StaticAnalysisScanner._check_command_injection_patterns",
      "services/data_acquisition/document_processor.py::DocumentProcessor._chunk_form_text",
      "scripts/cleanup/clear-all-sessions.py::clear_all_sessions",
      "tests/conftest.py::admin_user",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder.save_taxonomy",
      "services/messaging/property_tax_templates.py::PropertyTaxTemplates.send_property_lookup_result",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler._check_monthly_job",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch.search",
      "demo/environment/demo_reset_manager.py::DemoResetManager.initialize_connections",
      "testing/performance/stress_testing_framework.py::StressTestingFramework._generate_load_pattern",
      "tests/tools/test_property_validation_tool.py::TestPropertyValidationTool.test_property_validation_success_address",
      "agents/simplified/property_document_tools.py::run_in_thread",
      "demo/scenarios/multi_property_scenarios.py::MultiPropertyDemoScenarios.get_scenarios_by_complexity",
      "mock_data/document_templates.py::validate_extracted_data",
      "demo/environment/demo_reset_manager.py::DemoResetManager.get_last_reset_time",
      "services/messaging/message_batching.py::MessageBatch.get_latest_message",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator.log_security_event",
      "mock_data/property_records.py::generate_assessment_history",
      "agents/tools/property_validation_tool.py::validate_multiple_properties",
      "config/ai_configuration.py::validate_legal_boundaries",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler._save_documents",
      "scripts/test-workflow.py::test_advanced_panels",
      "services/date_intelligence.py::DateIntelligenceService._parse_relative_weeks",
      "services/vector_store/legal_document_indexer.py::LegalDocumentVectorStore._build_search_filter",
      "testing/performance/load_testing_suite.py::VirtualUser._make_request",
      "agents/core/guardrails.py::validate_ai_response",
      "services/persistence/repositories.py::MessageHistoryRepository.get_conversation_history",
      "demo/scenarios/__init__.py::DemoScenarioManager.get_random_scenario",
      "services/voice/voice_setup.py::KrishnaVoiceSetup.test_voice_agent_connection",
      "tests/tools/test_property_validation_tool.py::TestPropertyValidationTool.test_normalize_address",
      "services/persistence/repositories.py::PropertyAssessmentRequestRepository.get_customer_requests",
      "services/voice/voice_chat_state.py::VoiceChatStateManager.get_prescription_context",
      "tests/tools/test_lead_qualification_tool.py::TestLeadQualificationTool.test_lead_qualification_commercial_property",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner._standardize_terminology",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator.export_presentation_to_json",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager._find_stakeholder_by_role",
      "testing/performance/stress_testing_framework.py::StressTestingFramework.run_chaos_engineering_test",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._extract_form_sections",
      "services/date_intelligence.py::validate_booking_constraints",
      "services/persistence/redis_conversation_store.py::RedisConversationStore.get_conversation_history",
      "config/security_policies.py::SecurityPolicies.get_policies_by_severity",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler._handle_payment_initiation",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker._update_real_time_metrics",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator._create_roi_chart",
      "demo/scenarios/multi_property_scenarios.py::MultiPropertyDemoScenarios.get_all_scenarios",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._get_concern_acknowledgment",
      "services/messaging/whatsapp_image_handler.py::get_whatsapp_image_handler",
      "demo/environment/demo_configuration.py::DemoConfigurationManager.disable_scenario",
      "services/data_acquisition/scheduler.py::start_data_collection_scheduler",
      "services/data_acquisition/county_appraisal_scraper.py::CountyAppraisalScraper.find_property_tax_sections",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.validate_citations",
      "agents/tools/document_processing_tool.py::get_supported_document_types",
      "src/main.py::global_exception_handler",
      "services/vector_store/legal_document_indexer.py::test_legal_indexer",
      "services/voice/property_tax_voice_agent.py::CenturyPropertyTaxAssistant.create_property_assessment_order",
      "src/api/business_webhooks.py::business_health_check",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator._check_pii_exposure",
      "mock_data/property_records.py::generate_address",
      "mock_data/tax_rates.py::get_exemption_info",
      "tests/tools/test_savings_calculator_tool.py::TestSavingsCalculatorTool.test_savings_calculation_commercial_property",
      "services/utils/date_parser.py::parse_natural_date",
      "services/ticket_management/ticket_service.py::TicketService.check_active_ticket",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler._run_daily_comptroller_check",
      "services/data_acquisition/document_processor.py::DocumentProcessor.chunk_content",
      "services/persistence/repositories.py::PropertyAssessmentRequestRepository.get_by_request_id",
      "services/persistence/order_storage.py::wrapper",
      "services/voice/livekit_data_bridge.py::LiveKitDataBridge.register_voice_room",
      "services/data_acquisition/document_processor.py::DocumentProcessor.process_document",
      "testing/performance/load_testing_suite.py::VirtualUser.run_session",
      "src/main.py::startup_event",
      "testing/performance/stress_testing_framework.py::StressPatternGenerator.sawtooth_pattern",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker._analyze_escalations",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner._format_statute_text",
      "services/data_acquisition/texas_comptroller_scraper.py::test_scraper",
      "demo/scenarios/__init__.py::DemoScenarioManager.get_scenario_categories",
      "agents/tools/deadline_tracking_tool.py::generate_notification_message",
      "services/communication/message_handler.py::UniversalMessageHandler.get_handler_statistics",
      "services/vector_store/citation_tracker.py::get_citation_tracker",
      "agents/tools/document_processing_tool.py::calculate_days_until_date",
      "scripts/test-mock-payment.py::test_integration_with_razorpay_service",
      "services/data_acquisition/texas_comptroller_scraper.py::TexasComptrollerScraper.__init__",
      "services/vector_store/legal_document_indexer.py::LegalDocumentVectorStore.__init__",
      "testing/performance/stress_testing_framework.py::StressTestingFramework._check_system_breaking_point",
      "demo/scenarios/payment_processing_scenarios.py::PaymentProcessingDemoScenarios._create_installment_scenarios",
      "agents/simplified/enhanced_workflow_tools.py::_suggest_services_async",
      "services/payments/razorpay_integration.py::handle_payment_webhook_data",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker.extract_citations_from_document",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._build_authority_chains",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._get_missing_booking_information",
      "demo/scenarios/__init__.py::get_random_demo_scenario",
      "services/voice/livekit_data_bridge.py::LiveKitDataBridge.__init__",
      "agents/core/guardrails.py::PropertyTaxGuardrails.analyze_user_input",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._extract_citation_references",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.validate_structure",
      "services/data_acquisition/county_appraisal_scraper.py::CountyAppraisalScraper._is_county_property_tax_link",
      "mock_data/property_records.py::search_properties_by_criteria",
      "services/utils/retry_handler.py::CircuitBreaker._should_attempt_reset",
      "demo/scenarios/__init__.py::get_demo_categories",
      "tests/conftest.py::analytics_engine",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._start_booking_process",
      "config/ai_configuration.py::add_legal_disclaimer",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder._identify_subtopics",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager._apply_retention_action",
      "services/utils/retry_handler.py::wrapper",
      "agents/tools/deadline_tracking_tool.py::schedule_notifications",
      "services/ticket_management/ticket_service.py::TicketService.__init__",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner.clean_procedural_text",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker._parse_citation_details",
      "src/api/business_webhooks.py::handle_business_webhook",
      "agents/core/guardrails.py::PropertyTaxGuardrails.analyze_ai_response",
      "services/messaging/whatsapp_client.py::WhatsAppClient.get_business_configuration",
      "services/vector_store/legal_document_indexer.py::LegalDocumentVectorStore.search_legal_documents",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator._classify_data",
      "services/persistence/order_storage.py::get_order_storage",
      "services/utils/retry_handler.py::CircuitBreaker._on_failure",
      "tests/tools/test_runner.py::test_ai_framework_integration",
      "services/data_acquisition/texas_comptroller_scraper.py::TexasComptrollerScraper._extract_citations",
      "src/api/whatsapp_webhooks.py::_handle_voice_call_prescription_image",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator._generate_compliance_status",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler._handle_consultation_scheduling",
      "services/messaging/whatsapp_client.py::WhatsAppClient.get_message_templates",
      "demo/scenarios/assessment_appeal_scenarios.py::AssessmentAppealDemoScenarios.get_random_scenario",
      "security/audit/vulnerability_scanner.py::DynamicAnalysisScanner._test_session_management",
      "tests/conftest.py::event_loop",
      "demo/scenarios/exemption_application_scenarios.py::ExemptionApplicationDemoScenarios.__init__",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder._calculate_max_depth",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager._update_workflow_status",
      "demo/scenarios/exemption_application_scenarios.py::ExemptionApplicationDemoScenarios._create_veteran_scenarios",
      "agents/tools/consultation_scheduling_tool.py::validate_appointment_inputs",
      "services/communication/message_handler.py::UniversalMessageHandler._send_response",
      "services/messaging/property_tax_templates.py::PropertyTaxTemplates.send_appeal_document_checklist",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner.clean_faq_text",
      "services/date_intelligence.py::DateIntelligenceService.get_current_time_info",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.validate_factual_accuracy",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker._build_hierarchical_relationships",
      "mock_data/demo_customer_personas.py::DemoCustomerPersonas._create_first_time_homeowner_personas",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator._get_required_fields_for_context",
      "services/voice/livekit_data_bridge.py::get_livekit_data_bridge",
      "services/data_acquisition/texas_comptroller_scraper.py::TexasComptrollerScraper._is_property_tax_related",
      "demo/scenarios/__init__.py::DemoScenarioManager.get_demo_summary",
      "services/ticket_management/webhook_interceptor.py::WebhookInterceptor.should_intercept",
      "scripts/dependency_analyzer.py::DependencyAnalyzer.__init__",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor.__init__",
      "services/payments/mock_razorpay.py::verify_mock_payment_completion",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder._generate_classification_reasoning",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator._generate_business_metrics",
      "scripts/cleanup/clear-all-data.py::main",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._build_quality_criteria",
      "services/messaging/message_batching.py::MessageBatch.get_combined_text",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator._calculate_event_checksum",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator._update_audit_chain",
      "demo/scenarios/basic_inquiry_scenarios.py::BasicInquiryDemoScenarios.get_scenarios_by_persona",
      "agents/core/guardrails.py::GuardrailResult.__post_init__",
      "demo/environment/demo_configuration.py::DemoConfigurationManager.get_demo_environment_info",
      "compliance/tdlr/public_records_handler.py::PublicRecordsHandler.submit_public_record_request",
      "services/data_acquisition/texas_comptroller_scraper.py::TexasComptrollerScraper._extract_title",
      "services/vector_store/property_tax_embeddings.py::PropertyTaxEmbeddings.__init__",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager._calculate_retention_deadline",
      "agents/core/property_tax_assistant_v3.py::_store_property_document_conversation",
      "services/ticket_management/webhook_interceptor.py::WebhookInterceptor.get_agent_response",
      "services/messaging/property_tax_templates.py::PropertyTaxTemplates.send_assessment_notification",
      "tests/tools/test_property_validation_tool.py::TestPropertyValidationTool.test_detect_search_type",
      "tests/tools/test_savings_calculator_tool.py::TestSavingsCalculatorTool.test_savings_calculation_exemption_optimization",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker.record_escalation",
      "scripts/dependency_analyzer.py::ImportUsageVisitor.visit_FunctionDef",
      "services/data_acquisition/texas_comptroller_scraper.py::TexasComptrollerScraper._extract_effective_date",
      "demo/scenarios/basic_inquiry_scenarios.py::BasicInquiryDemoScenarios.get_random_scenario",
      "demo/environment/demo_configuration.py::DemoConfigurationManager.get_demo_ai_config",
      "services/date_intelligence.py::DateIntelligenceService._parse_specific_dates",
      "services/messaging/property_tax_templates.py::PropertyTaxTemplates.send_payment_options",
      "demo/environment/demo_reset_manager.py::DemoResetManager._clear_temporary_session_data",
      "tests/tools/test_lead_qualification_tool.py::TestLeadQualificationTool.test_generate_lead_report",
      "services/messaging/message_batching.py::MessageBatcher.shutdown",
      "compliance/tdlr/public_records_handler.py::PublicRecordsHandler._identify_responsive_records",
      "security/audit/vulnerability_scanner.py::VulnerabilityScanner.run_comprehensive_scan",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder._build_procedures_taxonomy",
      "src/api/whatsapp_webhooks.py::_handle_whatsapp_image_message",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator.log_data_modification",
      "services/data_acquisition/document_processor.py::test_processor",
      "services/messaging/whatsapp_image_handler.py::WhatsAppImageHandler.__init__",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor.save_knowledge_base",
      "services/ticket_management/ticket_service.py::TicketService.update_ticket_status",
      "agents/tools/deadline_tracking_tool.py::calculate_urgency_score",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler._handle_status_update",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker.build_citation_relationships",
      "services/data_acquisition/county_appraisal_scraper.py::CountyAppraisalScraper.scrape_with_semaphore",
      "mock_data/demo_customer_personas.py::DemoCustomerPersonas.get_persona_conversation_starter",
      "services/utils/retry_handler.py::CircuitBreaker.acall",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator._generate_risk_assessment",
      "services/vector_store/legal_document_indexer.py::get_legal_vector_store",
      "tests/tools/test_savings_calculator_tool.py::TestSavingsCalculatorTool.test_savings_calculation_basic_residential",
      "services/persistence/order_storage.py::OrderStorageService.get_customer_orders",
      "services/payments/mock_razorpay.py::MockRazorpayService.verify_webhook_signature",
      "agents/core/conversation_flows.py::ConversationContext.__post_init__",
      "services/ticket_management/webhook_interceptor.py::get_webhook_interceptor",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.__init__",
      "tests/tools/test_savings_calculator_tool.py::TestSavingsCalculatorTool.test_savings_calculation_comprehensive_analysis",
      "services/data_acquisition/document_processor.py::DocumentProcessor._clean_faq_text",
      "demo/scenarios/assessment_appeal_scenarios.py::AssessmentAppealDemoScenarios._create_residential_appeal_scenarios",
      "compliance/tdlr/record_retention_manager.py::test_retention_manager",
      "demo/environment/demo_reset_manager.py::DemoResetManager._reset_demo_sessions",
      "services/data_acquisition/county_appraisal_scraper.py::CountyAppraisalScraper.scrape_all_counties",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder.initialize",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager.escalate_approval",
      "scripts/dependency_analyzer.py::ImportUsageVisitor.visit_ClassDef",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._handle_booking_details",
      "services/persistence/repositories.py::PropertyAssessmentRequestRepository.get_requests_by_property",
      "tests/conftest.py::auth_manager",
      "tests/run_tests.py::check_dependencies",
      "services/voice/livekit_data_bridge.py::LiveKitDataBridge.send_prescription_failure",
      "demo/scenarios/basic_inquiry_scenarios.py::BasicInquiryDemoScenarios._generate_scenarios",
      "agents/core/property_tax_assistant_v3.py::_store_conversation_history",
      "services/persistence/repositories.py::PropertyAssessmentServiceRepository.get_applicable_for_property_type",
      "demo/scenarios/__init__.py::DemoScenarioManager.get_scenario_by_id",
      "services/vector_store/legal_document_indexer.py::LegalDocumentVectorStore._enhance_search_query",
      "scripts/dependency_analyzer.py::ImportUsageVisitor.visit_Import",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.validate_knowledge_batch",
      "mock_data/demo_customer_personas.py::DemoCustomerPersonas.get_all_personas",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder.get_taxonomy_stats",
      "services/vector_store/property_tax_embeddings.py::PropertyTaxEmbeddings.embed_documents",
      "demo/scenarios/escalation_scenarios.py::EscalationDemoScenarios.get_escalation_summary",
      "services/voice/voice_chat_state.py::VoiceChatStateManager.set_prescription_processing_status",
      "agents/tools/lead_qualification_tool.py::get_lead_recommendations_summary",
      "services/messaging/whatsapp_image_handler.py::WhatsAppImageHandler.process_whatsapp_image_message",
      "testing/performance/stress_testing_framework.py::StressTestingFramework.run_stress_test",
      "compliance/tdlr/record_retention_manager.py::RecordRetentionManager._anonymize_record",
      "config/ai_configuration.py::get_ai_config",
      "services/data_acquisition/document_processor.py::DocumentProcessor._clean_form_text",
      "services/messaging/whatsapp_client.py::WhatsAppClient.close",
      "services/messaging/whatsapp_image_handler.py::WhatsAppImageHandler.is_likely_prescription",
      "mock_data/demo_customer_personas.py::DemoCustomerPersonas.get_personas_summary",
      "mock_data/tax_calendars.py::get_county_calendar",
      "services/payments/razorpay_integration.py::RazorpayService.verify_payment_link_signature",
      "scripts/dependency_analyzer.py::DependencyAnalyzer._analyze_file",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder._build_authorities_taxonomy",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler.get_job_status",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.validate_required_elements",
      "scripts/dependency_analyzer.py::main",
      "src/api/whatsapp_webhooks.py::whatsapp_webhook_handler",
      "demo/environment/demo_configuration.py::DemoConfigurationManager.export_demo_config",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder.load_taxonomy",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager.get_workflow_status",
      "src/api/business_webhooks.py::force_process_customer_batch",
      "tests/tools/test_lead_qualification_tool.py::TestLeadQualificationIntegration.test_end_to_end_lead_qualification_workflow",
      "services/communication/message_handler.py::UniversalMessageHandler.verify_webhook_signature",
      "services/date_intelligence.py::DateIntelligenceService._parse_relative_dates",
      "services/utils/retry_handler.py::CircuitBreaker.__init__",
      "testing/performance/load_testing_suite.py::VirtualUser._prepare_request",
      "services/vector_store/citation_tracker.py::PropertyTaxCitationTracker._build_amendment_relationships",
      "demo/scenarios/payment_processing_scenarios.py::PaymentProcessingDemoScenarios._create_late_payment_scenarios",
      "tests/tools/test_lead_qualification_tool.py::TestLeadQualificationTool.test_get_lead_recommendations_summary",
      "services/persistence/database.py::get_db_session",
      "demo/environment/demo_reset_manager.py::DemoResetManager.perform_quick_reset",
      "services/voice/livekit_data_bridge.py::LiveKitDataBridge._send_data_to_room",
      "demo/scenarios/assessment_appeal_scenarios.py::AssessmentAppealDemoScenarios._create_commercial_appeal_scenarios",
      "agents/simplified/property_tax_rag_tool.py::property_tax_assessment_recommendation_sync",
      "services/messaging/whatsapp_client.py::get_whatsapp_client",
      "services/messaging/modern_integrated_webhook_handler.py::ModernIntegratedWebhookHandler.handle_webhook",
      "services/voice/voice_config.py::VoiceConfig.get_language_code",
      "security/audit/vulnerability_scanner.py::StaticAnalysisScanner._check_exposed_secrets_in_config",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator._handle_data_portability_request",
      "services/voice/property_tax_voice_agent.py::_cleanup",
      "agents/core/property_tax_assistant_v3.py::PropertyTaxToolNode.__init__",
      "tests/conftest.py::wait_for_async",
      "services/data_acquisition/texas_comptroller_scraper.py::TexasComptrollerScraper._extract_content",
      "services/communication/message_handler.py::UniversalMessageHandler.handle_incoming_message",
      "compliance/tdlr/public_records_handler.py::PublicRecordsHandler.process_public_record_request",
      "agents/tools/consultation_scheduling_tool.py::find_group_consultation_times",
      "services/vector_store/semantic_search.py::test_semantic_search",
      "services/voice/voice_chat_state.py::VoiceChatStateManager.save_prescription_context",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator._generate_technical_capabilities",
      "scripts/test_date_intelligence.py::test_booking_scenarios",
      "mock_data/property_records.py::find_property_by_address",
      "mock_data/assessment_patterns.py::estimate_appeal_success_probability",
      "tests/conftest.py::config_yaml",
      "testing/performance/load_testing_suite.py::LoadTestingSuite.run_load_test",
      "services/data_acquisition/texas_comptroller_scraper.py::TexasComptrollerScraper.scrape_page",
      "demo/scenarios/__init__.py::DemoScenarioManager.get_all_scenarios",
      "demo/scenarios/payment_processing_scenarios.py::PaymentProcessingDemoScenarios.get_scenarios_by_persona",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler._run_job_async",
      "agents/tools/lead_qualification_tool.py::generate_lead_report",
      "demo/environment/demo_reset_manager.py::DemoResetManager._clear_active_conversations",
      "services/data_acquisition/texas_comptroller_scraper.py::TexasComptrollerScraper.scrape_with_semaphore",
      "services/payments/razorpay_integration.py::RazorpayService.get_payment_link_details",
      "tests/tools/test_savings_calculator_tool.py::TestSavingsCalculatorTool.test_savings_calculation_invalid_inputs",
      "agents/core/guardrails.py::validate_user_input",
      "services/knowledge_base/legal_text_cleaner.py::LegalTextCleaner._assess_text_structure_quality",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow.process_message",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator.verify_audit_integrity",
      "demo/presentations/executive_summary_generator.py::ExecutiveSummaryGenerator._calculate_roi_analysis",
      "services/persistence/analytics_repository.py::AnalyticsRepository.update_journey_stage",
      "services/voice/voice_setup.py::KrishnaVoiceSetup.list_active_healthcare_rooms",
      "compliance/tdlr/privacy_compliance_validator.py::PrivacyComplianceValidator._handle_data_access_request",
      "tests/tools/test_property_validation_tool.py::TestPropertyValidationTool.test_get_supported_counties",
      "demo/environment/demo_reset_manager.py::DemoResetManager.schedule_automatic_reset",
      "services/persistence/repositories.py::PropertyAssessmentRequestRepository.__init__",
      "demo/monitoring/demo_performance_tracker.py::DemoPerformanceTracker.start_conversation_session",
      "demo/scenarios/escalation_scenarios.py::EscalationDemoScenarios._create_language_barrier_scenarios",
      "src/api/integrated_webhooks.py::health_check",
      "agents/core/conversation_flows.py::PropertyTaxConversationFlow._get_missing_information",
      "services/messaging/whatsapp_image_handler.py::WhatsAppImageHandler._download_media_file",
      "demo/scenarios/__init__.py::get_demo_scenario",
      "demo/scenarios/assessment_appeal_scenarios.py::AssessmentAppealDemoScenarios._create_evidence_scenarios",
      "agents/simplified/property_tax_rag_tool.py::run_in_thread",
      "services/persistence/order_storage.py::OrderStorageService.persist_to_database",
      "demo/scenarios/exemption_application_scenarios.py::ExemptionApplicationDemoScenarios._create_senior_scenarios",
      "services/voice/voice_chat_state.py::VoiceChatStateManager.update_activity",
      "agents/core/property_tax_assistant_v3.py::_detect_language",
      "agents/tools/consultation_scheduling_tool.py::calculate_appointment_pricing",
      "agents/tools/lead_qualification_tool.py::qualify_multiple_leads",
      "services/voice/voice_setup.py::KrishnaVoiceSetup.cleanup_expired_rooms",
      "scripts/cleanup/clear-all-data.py::clear_redis_data",
      "agents/tools/deadline_tracking_tool.py::get_deadline_calendar_view",
      "services/data_acquisition/scheduler.py::DataCollectionScheduler._save_collection_stats",
      "services/persistence/repositories.py::PropertyAssessmentServiceRepository.get_by_category",
      "src/api/report_management.py::search_assessment_reports",
      "agents/tools/savings_calculator_tool.py::analyze_exemption_opportunities",
      "compliance/tdlr/audit_trail_generator.py::AuditTrailGenerator.log_user_authentication",
      "services/knowledge_base/content_processor.py::PropertyTaxContentProcessor._process_faq_document",
      "services/persistence/redis_conversation_store.py::get_conversation_store",
      "services/knowledge_base/taxonomy_builder.py::PropertyTaxTaxonomyBuilder._build_property_taxation_taxonomy",
      "services/voice/livekit_data_bridge.py::LiveKitDataBridge.send_status_update",
      "agents/core/property_tax_assistant_v3.py::_detect_conversation_stage",
      "scripts/dependency_analyzer.py::ImportUsageVisitor.visit_ImportFrom",
      "mock_data/assessment_patterns.py::calculate_assessment_increase_percentage",
      "services/data_acquisition/document_processor.py::DocumentProcessor.clean_content",
      "tests/conftest.py::create_test_message",
      "approval/workflows/stakeholder_approval_manager.py::StakeholderApprovalManager._get_risk_indicators",
      "security/audit/vulnerability_scanner.py::DynamicAnalysisScanner._test_input_validation",
      "services/messaging/property_tax_templates.py::PropertyTaxTemplates.send_consultation_confirmation",
      "services/messaging/whatsapp_client.py::WhatsAppClient.parse_status_update",
      "services/knowledge_base/quality_validator.py::PropertyTaxQualityValidator.validate_content_length",
      "demo/scenarios/exemption_application_scenarios.py::ExemptionApplicationDemoScenarios._generate_scenarios",
      "services/knowledge_base/quality_validator.py::test_validator",
      "services/vector_store/semantic_search.py::PropertyTaxSemanticSearch._semantic_search",
      "demo/scenarios/payment_processing_scenarios.py::PaymentProcessingDemoScenarios.__init__",
      "demo/scenarios/basic_inquiry_scenarios.py::BasicInquiryDemoScenarios._create_tax_rate_scenarios"
    ],
    "unused_classes": [],
    "unused_files": [
      "demo/environment/demo_reset_manager.py",
      "demo/presentations/executive_summary_generator.py",
      "src/api/whatsapp_webhooks.py",
      "mock_data/consultant_schedules.py",
      "services/persistence/database.py",
      "mock_data/property_records.py",
      "services/ticket_management/__init__.py",
      "agents/simplified/simplified_agent_v2.py",
      "scripts/test-workflow.py",
      "compliance/tdlr/record_retention_manager.py",
      "scripts/test_date_intelligence.py",
      "services/vector_store/property_tax_embeddings.py",
      "tests/run_tests.py",
      "scripts/cleanup/clear-all-data.py",
      "services/persistence/redis_conversation_store.py",
      "services/utils/date_parser.py",
      "demo/environment/demo_configuration.py",
      "demo/scenarios/assessment_appeal_scenarios.py",
      "services/messaging/property_tax_templates.py",
      "services/voice/voice_setup.py",
      "services/ticket_management/ticket_service.py",
      "approval/workflows/stakeholder_approval_manager.py",
      "demo/scenarios/multi_property_scenarios.py",
      "scripts/test_intelligent_booking.py",
      "services/messaging/message_batching.py",
      "services/messaging/integrated_webhook_handler.py",
      "tests/tools/test_runner.py",
      "agents/tools/savings_calculator_tool.py",
      "tests/tools/test_savings_calculator_tool.py",
      "scripts/test-mock-payment.py",
      "tests/conftest.py",
      "mock_data/tax_rates.py",
      "config/response_templates.py",
      "security/audit/vulnerability_scanner.py",
      "services/knowledge_base/taxonomy_builder.py",
      "src/api/report_management.py",
      "agents/tools/lead_qualification_tool.py",
      "agents/core/guardrails.py",
      "scripts/cleanup/clear-user-redis.py",
      "services/data_acquisition/texas_comptroller_scraper.py",
      "services/utils/__init__.py",
      "services/utils/retry_handler.py",
      "compliance/tdlr/public_records_handler.py",
      "mock_data/assessment_patterns.py",
      "agents/simplified/property_tax_rag_tool.py",
      "agents/tools/property_validation_tool.py",
      "compliance/tdlr/audit_trail_generator.py",
      "config/security_policies.py",
      "services/data_acquisition/document_processor.py",
      "agents/tools/consultation_scheduling_tool.py",
      "testing/performance/stress_testing_framework.py",
      "agents/simplified/property_document_tools.py",
      "src/api/business_webhooks.py",
      "agents/tools/document_processing_tool.py",
      "services/data_acquisition/county_appraisal_scraper.py",
      "services/vector_store/legal_document_indexer.py",
      "demo/scenarios/exemption_application_scenarios.py",
      "services/persistence/order_storage.py",
      "mock_data/document_templates.py",
      "demo/monitoring/demo_performance_tracker.py",
      "testing/performance/load_testing_suite.py",
      "scripts/cleanup/clear-all-sessions.py",
      "tests/tools/test_lead_qualification_tool.py",
      "services/voice/voice_config.py",
      "demo/scenarios/escalation_scenarios.py",
      "src/main.py",
      "services/knowledge_base/quality_validator.py",
      "services/vector_store/semantic_search.py",
      "compliance/tdlr/privacy_compliance_validator.py",
      "scripts/cleanup/clear-sessions-only.py",
      "agents/simplified/enhanced_workflow_tools.py",
      "src/api/integrated_webhooks.py",
      "services/voice/voice_chat_state.py",
      "mock_data/demo_customer_personas.py",
      "services/persistence/analytics_repository.py",
      "services/voice/property_tax_voice_agent.py",
      "services/payments/mock_razorpay.py",
      "agents/core/conversation_flows.py",
      "demo/scenarios/__init__.py",
      "demo/scenarios/payment_processing_scenarios.py",
      "demo/scenarios/basic_inquiry_scenarios.py",
      "services/data_acquisition/scheduler.py",
      "services/messaging/modern_integrated_webhook_handler.py",
      "tests/tools/test_property_validation_tool.py",
      "agents/core/property_tax_assistant_v3.py",
      "services/messaging/whatsapp_client.py",
      "services/communication/message_handler.py",
      "services/knowledge_base/content_processor.py",
      "mock_data/tax_calendars.py",
      "agents/simplified/__init__.py",
      "services/ticket_management/webhook_interceptor.py",
      "services/voice/livekit_data_bridge.py",
      "services/vector_store/citation_tracker.py",
      "setup.py",
      "scripts/dependency_analyzer.py",
      "config/ai_configuration.py",
      "scripts/validate-workflow.py",
      "services/payments/razorpay_integration.py",
      "agents/simplified/ticket_tools.py",
      "config/performance_thresholds.py",
      "agents/tools/deadline_tracking_tool.py",
      "config/settings.py",
      "services/persistence/repositories.py",
      "services/date_intelligence.py",
      "services/ticket_management/models.py",
      "services/messaging/whatsapp_image_handler.py",
      "config/compliance_settings.py",
      "services/knowledge_base/legal_text_cleaner.py"
    ],
    "unused_directories": []
  },
  "package_analysis": {
    "package_usage": {
      "setup.py": [
        "setuptools"
      ],
      "scripts/validate-workflow.py": [
        "os",
        "agents",
        "sys",
        "services"
      ],
      "scripts/test-workflow.py": [
        "asyncio",
        "agents",
        "traceback",
        "os",
        "sys"
      ],
      "scripts/test_date_intelligence.py": [
        "asyncio",
        "traceback",
        "os",
        "sys",
        "datetime",
        "services"
      ],
      "scripts/dependency_analyzer.py": [
        "json",
        "pathlib",
        "typing",
        "os",
        "sys",
        "re",
        "collections",
        "ast"
      ],
      "scripts/test-mock-payment.py": [
        "asyncio",
        "traceback",
        "os",
        "sys",
        "services"
      ],
      "scripts/test_intelligent_booking.py": [
        "asyncio",
        "agents",
        "os",
        "sys",
        "datetime"
      ],
      "tests/run_tests.py": [
        "subprocess",
        "pathlib",
        "os",
        "sys",
        "argparse"
      ],
      "tests/conftest.py": [
        "asyncio",
        "typing",
        "json",
        "engine",
        "tempfile",
        "os",
        "yaml",
        "pytest"
      ],
      "config/response_templates.py": [
        "typing",
        "enum",
        "logging"
      ],
      "config/ai_configuration.py": [
        "typing",
        "logging",
        "os",
        "enum",
        "dataclasses"
      ],
      "config/compliance_settings.py": [
        "typing",
        "os",
        "enum",
        "datetime",
        "dotenv"
      ],
      "config/settings.py": [
        "os",
        "typing",
        "dotenv"
      ],
      "config/performance_thresholds.py": [
        "typing",
        "os",
        "enum",
        "dataclasses",
        "dotenv"
      ],
      "config/security_policies.py": [
        "typing",
        "os",
        "enum",
        "dataclasses",
        "dotenv"
      ],
      "src/main.py": [
        "logging",
        "src",
        "os",
        "structlog",
        "fastapi",
        "app",
        "services",
        "uvicorn",
        "dotenv"
      ],
      "services/date_intelligence.py": [
        "datetime",
        "re",
        "structlog",
        "typing"
      ],
      "mock_data/consultant_schedules.py": [
        "datetime",
        "typing",
        "dataclasses",
        "random"
      ],
      "mock_data/tax_rates.py": [
        "datetime",
        "typing",
        "decimal"
      ],
      "mock_data/demo_customer_personas.py": [
        "typing",
        "enum",
        "datetime",
        "dataclasses",
        "random"
      ],
      "mock_data/tax_calendars.py": [
        "datetime",
        "typing",
        "calendar"
      ],
      "mock_data/property_records.py": [
        "datetime",
        "typing",
        "random"
      ],
      "mock_data/document_templates.py": [
        "datetime",
        "typing",
        "re",
        "random"
      ],
      "mock_data/assessment_patterns.py": [
        "datetime",
        "typing",
        "decimal",
        "random"
      ],
      "compliance/tdlr/audit_trail_generator.py": [
        "json",
        "typing",
        "logging",
        "asyncio",
        "csv",
        "enum",
        "io",
        "hashlib",
        "uuid",
        "datetime",
        "dataclasses",
        "config"
      ],
      "compliance/tdlr/privacy_compliance_validator.py": [
        "typing",
        "json",
        "logging",
        "enum",
        "hashlib",
        "datetime",
        "re",
        "dataclasses",
        "config"
      ],
      "compliance/tdlr/public_records_handler.py": [
        "typing",
        "logging",
        "enum",
        "datetime",
        "re",
        "dataclasses",
        "config"
      ],
      "compliance/tdlr/record_retention_manager.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "os",
        "enum",
        "datetime",
        "dataclasses",
        "config"
      ],
      "approval/workflows/stakeholder_approval_manager.py": [
        "json",
        "typing",
        "logging",
        "enum",
        "uuid",
        "datetime",
        "dataclasses"
      ],
      "security/audit/vulnerability_scanner.py": [
        "subprocess",
        "asyncio",
        "typing",
        "logging",
        "json",
        "os",
        "aiohttp",
        "enum",
        "hashlib",
        "urllib",
        "config",
        "datetime",
        "re",
        "dataclasses",
        "ssl",
        "glob",
        "socket"
      ],
      "agents/simplified/property_document_tools.py": [
        "asyncio",
        "typing",
        "json",
        "base64",
        "structlog",
        "concurrent",
        "services",
        "threading",
        "langchain_core"
      ],
      "agents/simplified/__init__.py": [
        "agents"
      ],
      "agents/simplified/property_tax_rag_tool.py": [
        "asyncio",
        "typing",
        "structlog",
        "concurrent",
        "services",
        "threading",
        "langchain_core"
      ],
      "agents/simplified/ticket_tools.py": [
        "typing",
        "asyncio",
        "structlog",
        "datetime",
        "langchain",
        "pydantic",
        "services"
      ],
      "agents/simplified/simplified_agent_v2.py": [
        "agents"
      ],
      "agents/simplified/enhanced_workflow_tools.py": [
        "asyncio",
        "json",
        "typing",
        "string",
        "traceback",
        "os",
        "structlog",
        "uuid",
        "datetime",
        "services",
        "pydantic",
        "integrations",
        "langchain_core",
        "decimal",
        "random"
      ],
      "agents/core/guardrails.py": [
        "typing",
        "logging",
        "enum",
        "re",
        "dataclasses",
        "config"
      ],
      "agents/core/conversation_flows.py": [
        "typing",
        "logging",
        "enum",
        "datetime",
        "re",
        "dataclasses",
        "config"
      ],
      "agents/core/property_tax_assistant_v3.py": [
        "typing",
        "agents",
        "os",
        "langchain_google_genai",
        "structlog",
        "datetime",
        "typing_extensions",
        "services",
        "langchain_core",
        "sqlalchemy",
        "langgraph",
        "config"
      ],
      "agents/tools/document_processing_tool.py": [
        "asyncio",
        "typing",
        "mock_data",
        "base64",
        "hashlib",
        "structlog",
        "datetime",
        "re",
        "pydantic",
        "langchain_core",
        "decimal"
      ],
      "agents/tools/savings_calculator_tool.py": [
        "asyncio",
        "typing",
        "mock_data",
        "structlog",
        "datetime",
        "pydantic",
        "langchain_core",
        "decimal"
      ],
      "agents/tools/lead_qualification_tool.py": [
        "asyncio",
        "typing",
        "mock_data",
        "structlog",
        "datetime",
        "pydantic",
        "langchain_core",
        "decimal"
      ],
      "agents/tools/property_validation_tool.py": [
        "asyncio",
        "typing",
        "mock_data",
        "structlog",
        "datetime",
        "re",
        "pydantic",
        "langchain_core",
        "decimal"
      ],
      "agents/tools/consultation_scheduling_tool.py": [
        "pytz",
        "asyncio",
        "typing",
        "agents",
        "mock_data",
        "structlog",
        "datetime",
        "pydantic",
        "langchain_core",
        "decimal"
      ],
      "agents/tools/deadline_tracking_tool.py": [
        "asyncio",
        "typing",
        "mock_data",
        "structlog",
        "datetime",
        "pydantic",
        "langchain_core",
        "decimal"
      ],
      "services/ticket_management/webhook_interceptor.py": [
        "json",
        "typing",
        "structlog",
        "datetime",
        "services",
        "redis",
        "config"
      ],
      "services/ticket_management/ticket_service.py": [
        "json",
        "typing",
        "models",
        "string",
        "structlog",
        "config",
        "datetime",
        "redis",
        "sqlalchemy",
        "random"
      ],
      "services/ticket_management/__init__.py": [
        "models",
        "ticket_service",
        "webhook_interceptor"
      ],
      "services/ticket_management/models.py": [
        "datetime",
        "enum",
        "sqlalchemy",
        "services"
      ],
      "services/messaging/modern_integrated_webhook_handler.py": [
        "json",
        "typing",
        "agents",
        "structlog",
        "datetime",
        "services"
      ],
      "services/messaging/whatsapp_client.py": [
        "asyncio",
        "typing",
        "json",
        "os",
        "aiohttp",
        "structlog",
        "hashlib",
        "datetime",
        "hmac"
      ],
      "services/messaging/whatsapp_image_handler.py": [
        "asyncio",
        "typing",
        "os",
        "aiohttp",
        "structlog",
        "base64"
      ],
      "services/messaging/property_tax_templates.py": [
        "datetime",
        "typing",
        "structlog",
        "services"
      ],
      "services/messaging/integrated_webhook_handler.py": [
        "services"
      ],
      "services/messaging/message_batching.py": [
        "asyncio",
        "typing",
        "structlog",
        "time",
        "datetime",
        "dataclasses",
        "services"
      ],
      "services/data_acquisition/scheduler.py": [
        "asyncio",
        "typing",
        "pathlib",
        "json",
        "schedule",
        "structlog",
        "document_processor",
        "texas_comptroller_scraper",
        "datetime",
        "dataclasses",
        "county_appraisal_scraper"
      ],
      "services/data_acquisition/county_appraisal_scraper.py": [
        "asyncio",
        "typing",
        "aiohttp",
        "structlog",
        "urllib",
        "texas_comptroller_scraper",
        "datetime",
        "bs4",
        "dataclasses",
        "re"
      ],
      "services/data_acquisition/texas_comptroller_scraper.py": [
        "asyncio",
        "pathlib",
        "typing",
        "aiohttp",
        "structlog",
        "hashlib",
        "urllib",
        "datetime",
        "bs4",
        "dataclasses",
        "re"
      ],
      "services/data_acquisition/document_processor.py": [
        "asyncio",
        "aiofiles",
        "typing",
        "pathlib",
        "structlog",
        "hashlib",
        "html",
        "texas_comptroller_scraper",
        "datetime",
        "re",
        "dataclasses",
        "bs4",
        "PyPDF2",
        "mimetypes"
      ],
      "services/knowledge_base/legal_text_cleaner.py": [
        "asyncio",
        "typing",
        "structlog",
        "datetime",
        "re",
        "dataclasses"
      ],
      "services/knowledge_base/quality_validator.py": [
        "asyncio",
        "typing",
        "json",
        "content_processor",
        "enum",
        "structlog",
        "datetime",
        "re",
        "dataclasses",
        "services"
      ],
      "services/knowledge_base/content_processor.py": [
        "asyncio",
        "typing",
        "json",
        "pathlib",
        "legal_text_cleaner",
        "taxonomy_builder",
        "structlog",
        "datetime",
        "re",
        "dataclasses",
        "services"
      ],
      "services/knowledge_base/taxonomy_builder.py": [
        "asyncio",
        "typing",
        "json",
        "pathlib",
        "structlog",
        "datetime",
        "re",
        "dataclasses",
        "collections"
      ],
      "services/communication/message_handler.py": [
        "json",
        "typing",
        "agents",
        "os",
        "aiohttp",
        "langchain_google_genai",
        "structlog",
        "hashlib",
        "datetime",
        "services",
        "langchain_core",
        "hmac",
        "config"
      ],
      "services/vector_store/semantic_search.py": [
        "asyncio",
        "typing",
        "json",
        "enum",
        "structlog",
        "datetime",
        "dataclasses",
        "property_tax_embeddings",
        "legal_document_indexer",
        "langchain_core"
      ],
      "services/vector_store/citation_tracker.py": [
        "asyncio",
        "typing",
        "json",
        "pathlib",
        "structlog",
        "datetime",
        "re",
        "dataclasses",
        "collections"
      ],
      "services/vector_store/property_tax_embeddings.py": [
        "asyncio",
        "typing",
        "json",
        "pathlib",
        "os",
        "numpy",
        "structlog",
        "langchain_google_genai",
        "re",
        "dataclasses",
        "langchain_core"
      ],
      "services/vector_store/legal_document_indexer.py": [
        "asyncio",
        "pathlib",
        "typing",
        "langchain_chroma",
        "os",
        "langchain_google_genai",
        "structlog",
        "datetime",
        "langchain",
        "services",
        "langchain_core"
      ],
      "services/persistence/redis_conversation_store.py": [
        "json",
        "typing",
        "os",
        "structlog",
        "datetime",
        "redis"
      ],
      "services/persistence/repositories.py": [
        "typing",
        "structlog",
        "database",
        "datetime",
        "sqlalchemy",
        "decimal"
      ],
      "services/persistence/analytics_repository.py": [
        "typing",
        "repositories",
        "structlog",
        "database",
        "datetime",
        "sqlalchemy",
        "decimal"
      ],
      "services/persistence/database.py": [
        "asyncio",
        "typing",
        "contextlib",
        "enum",
        "structlog",
        "datetime",
        "sqlalchemy",
        "decimal",
        "config"
      ],
      "services/persistence/order_storage.py": [
        "json",
        "typing",
        "asyncio",
        "structlog",
        "datetime",
        "functools",
        "services",
        "redis",
        "config"
      ],
      "services/voice/voice_setup.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "os",
        "livekit",
        "datetime",
        "google",
        "voice_config",
        "argparse"
      ],
      "services/voice/livekit_data_bridge.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "os",
        "livekit",
        "datetime",
        "dataclasses",
        "dotenv"
      ],
      "services/voice/voice_chat_state.py": [
        "asyncio",
        "typing",
        "json",
        "structlog",
        "datetime",
        "services",
        "redis"
      ],
      "services/voice/property_tax_voice_agent.py": [
        "asyncio",
        "json",
        "logging",
        "typing",
        "agents",
        "os",
        "livekit",
        "sys",
        "datetime",
        "re",
        "services",
        "dotenv"
      ],
      "services/voice/voice_config.py": [
        "typing",
        "os",
        "langchain_google_genai",
        "datetime",
        "dataclasses",
        "langchain_core"
      ],
      "services/utils/date_parser.py": [
        "datetime",
        "re",
        "typing"
      ],
      "services/utils/__init__.py": [
        "retry_handler"
      ],
      "services/utils/retry_handler.py": [
        "asyncio",
        "typing",
        "structlog",
        "datetime",
        "time",
        "functools",
        "random"
      ],
      "services/payments/mock_razorpay.py": [
        "json",
        "typing",
        "os",
        "structlog",
        "hashlib",
        "uuid",
        "datetime",
        "langchain_core",
        "hmac"
      ],
      "services/payments/razorpay_integration.py": [
        "razorpay",
        "json",
        "typing",
        "os",
        "structlog",
        "hashlib",
        "datetime",
        "services",
        "langchain_core",
        "hmac"
      ],
      "src/api/integrated_webhooks.py": [
        "asyncio",
        "json",
        "logging",
        "os",
        "datetime",
        "fastapi",
        "services"
      ],
      "src/api/whatsapp_webhooks.py": [
        "typing",
        "asyncio",
        "agents",
        "structlog",
        "base64",
        "fastapi",
        "datetime",
        "services"
      ],
      "src/api/business_webhooks.py": [
        "logging",
        "os",
        "datetime",
        "fastapi",
        "services",
        "redis"
      ],
      "src/api/report_management.py": [
        "typing",
        "json",
        "datetime",
        "fastapi",
        "services",
        "pydantic"
      ],
      "testing/performance/stress_testing_framework.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "aiohttp",
        "enum",
        "config",
        "time",
        "datetime",
        "dataclasses",
        "psutil",
        "random"
      ],
      "testing/performance/load_testing_suite.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "aiohttp",
        "statistics",
        "concurrent",
        "config",
        "time",
        "datetime",
        "dataclasses",
        "random"
      ],
      "tests/tools/test_lead_qualification_tool.py": [
        "asyncio",
        "agents",
        "pytest",
        "unittest"
      ],
      "tests/tools/test_runner.py": [
        "asyncio",
        "pathlib",
        "agents",
        "mock_data",
        "sys",
        "pytest",
        "time"
      ],
      "tests/tools/test_property_validation_tool.py": [
        "asyncio",
        "agents",
        "unittest",
        "pytest",
        "datetime",
        "time"
      ],
      "tests/tools/test_savings_calculator_tool.py": [
        "asyncio",
        "agents",
        "unittest",
        "pytest",
        "datetime",
        "time"
      ],
      "demo/monitoring/demo_performance_tracker.py": [
        "asyncio",
        "typing",
        "json",
        "logging",
        "time",
        "datetime",
        "dataclasses",
        "collections"
      ],
      "demo/scenarios/escalation_scenarios.py": [
        "typing",
        "agents",
        "enum",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/scenarios/__init__.py": [
        "exemption_application_scenarios",
        "typing",
        "payment_processing_scenarios",
        "enum",
        "assessment_appeal_scenarios",
        "basic_inquiry_scenarios",
        "escalation_scenarios",
        "multi_property_scenarios",
        "random"
      ],
      "demo/scenarios/assessment_appeal_scenarios.py": [
        "typing",
        "agents",
        "mock_data",
        "enum",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/scenarios/payment_processing_scenarios.py": [
        "typing",
        "agents",
        "mock_data",
        "enum",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/scenarios/exemption_application_scenarios.py": [
        "typing",
        "agents",
        "mock_data",
        "enum",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/scenarios/multi_property_scenarios.py": [
        "typing",
        "agents",
        "mock_data",
        "enum",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/scenarios/basic_inquiry_scenarios.py": [
        "typing",
        "agents",
        "mock_data",
        "enum",
        "datetime",
        "dataclasses",
        "random"
      ],
      "demo/presentations/executive_summary_generator.py": [
        "json",
        "typing",
        "logging",
        "seaborn",
        "enum",
        "io",
        "base64",
        "datetime",
        "matplotlib",
        "dataclasses",
        "config"
      ],
      "demo/environment/demo_configuration.py": [
        "json",
        "typing",
        "pathlib",
        "logging",
        "os",
        "datetime",
        "dataclasses",
        "config"
      ],
      "demo/environment/demo_reset_manager.py": [
        "asyncio",
        "typing",
        "logging",
        "json",
        "pathlib",
        "mock_data",
        "datetime",
        "demo",
        "psycopg2",
        "dataclasses",
        "services",
        "redis"
      ],
      "scripts/cleanup/clear-user-redis.py": [
        "sys",
        "argparse",
        "redis"
      ],
      "scripts/cleanup/clear-all-sessions.py": [
        "argparse",
        "redis"
      ],
      "scripts/cleanup/clear-all-data.py": [
        "asyncio",
        "pathlib",
        "os",
        "sys",
        "structlog",
        "services",
        "redis",
        "sqlalchemy",
        "config"
      ],
      "scripts/cleanup/clear-sessions-only.py": [
        "asyncio",
        "pathlib",
        "os",
        "sys",
        "structlog",
        "redis",
        "config"
      ]
    },
    "package_frequency": {
      "setuptools": 1,
      "os": 35,
      "agents": 21,
      "sys": 12,
      "services": 29,
      "asyncio": 52,
      "traceback": 4,
      "datetime": 78,
      "json": 37,
      "pathlib": 15,
      "typing": 84,
      "re": 21,
      "collections": 4,
      "ast": 1,
      "subprocess": 2,
      "argparse": 4,
      "engine": 1,
      "tempfile": 1,
      "yaml": 1,
      "pytest": 5,
      "enum": 27,
      "logging": 22,
      "dataclasses": 39,
      "dotenv": 7,
      "src": 1,
      "structlog": 45,
      "fastapi": 5,
      "app": 1,
      "uvicorn": 1,
      "random": 17,
      "decimal": 12,
      "calendar": 1,
      "csv": 1,
      "io": 2,
      "hashlib": 10,
      "uuid": 4,
      "config": 19,
      "aiohttp": 8,
      "urllib": 3,
      "ssl": 1,
      "glob": 1,
      "socket": 1,
      "base64": 5,
      "concurrent": 3,
      "threading": 2,
      "langchain_core": 17,
      "langchain": 2,
      "pydantic": 9,
      "string": 2,
      "integrations": 1,
      "langchain_google_genai": 5,
      "typing_extensions": 1,
      "sqlalchemy": 7,
      "langgraph": 1,
      "mock_data": 13,
      "pytz": 1,
      "redis": 11,
      "models": 2,
      "ticket_service": 1,
      "webhook_interceptor": 1,
      "hmac": 4,
      "time": 8,
      "schedule": 1,
      "document_processor": 1,
      "texas_comptroller_scraper": 3,
      "county_appraisal_scraper": 1,
      "bs4": 3,
      "aiofiles": 1,
      "html": 1,
      "PyPDF2": 1,
      "mimetypes": 1,
      "content_processor": 1,
      "legal_text_cleaner": 1,
      "taxonomy_builder": 1,
      "property_tax_embeddings": 1,
      "legal_document_indexer": 1,
      "numpy": 1,
      "langchain_chroma": 1,
      "database": 2,
      "repositories": 1,
      "contextlib": 1,
      "functools": 2,
      "livekit": 3,
      "google": 1,
      "voice_config": 1,
      "retry_handler": 1,
      "razorpay": 1,
      "psutil": 1,
      "statistics": 1,
      "unittest": 3,
      "exemption_application_scenarios": 1,
      "payment_processing_scenarios": 1,
      "assessment_appeal_scenarios": 1,
      "basic_inquiry_scenarios": 1,
      "escalation_scenarios": 1,
      "multi_property_scenarios": 1,
      "seaborn": 1,
      "matplotlib": 1,
      "demo": 1,
      "psycopg2": 1
    }
  },
  "risk_assessment": {
    "safe_to_remove": [
      "services/voice/voice_setup.py",
      "services/voice/livekit_data_bridge.py",
      "services/voice/voice_chat_state.py",
      "services/voice/voice_config.py"
    ],
    "caution_required": [
      "setup.py",
      "scripts/validate-workflow.py",
      "scripts/test-workflow.py",
      "scripts/test_date_intelligence.py",
      "scripts/dependency_analyzer.py",
      "scripts/test_intelligent_booking.py",
      "tests/run_tests.py",
      "tests/conftest.py",
      "config/response_templates.py",
      "config/ai_configuration.py",
      "config/compliance_settings.py",
      "config/settings.py",
      "config/performance_thresholds.py",
      "config/security_policies.py",
      "src/main.py",
      "services/date_intelligence.py",
      "mock_data/consultant_schedules.py",
      "mock_data/tax_rates.py",
      "mock_data/demo_customer_personas.py",
      "mock_data/tax_calendars.py",
      "mock_data/property_records.py",
      "mock_data/document_templates.py",
      "compliance/tdlr/audit_trail_generator.py",
      "compliance/tdlr/privacy_compliance_validator.py",
      "compliance/tdlr/public_records_handler.py",
      "compliance/tdlr/record_retention_manager.py",
      "approval/workflows/stakeholder_approval_manager.py",
      "security/audit/vulnerability_scanner.py",
      "agents/simplified/property_document_tools.py",
      "agents/simplified/__init__.py",
      "agents/simplified/ticket_tools.py",
      "agents/simplified/simplified_agent_v2.py",
      "agents/simplified/enhanced_workflow_tools.py",
      "agents/core/guardrails.py",
      "agents/core/conversation_flows.py",
      "agents/tools/document_processing_tool.py",
      "agents/tools/savings_calculator_tool.py",
      "agents/tools/lead_qualification_tool.py",
      "agents/tools/property_validation_tool.py",
      "agents/tools/consultation_scheduling_tool.py",
      "agents/tools/deadline_tracking_tool.py",
      "services/ticket_management/webhook_interceptor.py",
      "services/ticket_management/ticket_service.py",
      "services/ticket_management/__init__.py",
      "services/ticket_management/models.py",
      "services/messaging/modern_integrated_webhook_handler.py",
      "services/messaging/integrated_webhook_handler.py",
      "services/messaging/message_batching.py",
      "services/data_acquisition/scheduler.py",
      "services/data_acquisition/county_appraisal_scraper.py",
      "services/data_acquisition/texas_comptroller_scraper.py",
      "services/data_acquisition/document_processor.py",
      "services/knowledge_base/legal_text_cleaner.py",
      "services/knowledge_base/quality_validator.py",
      "services/knowledge_base/content_processor.py",
      "services/knowledge_base/taxonomy_builder.py",
      "services/communication/message_handler.py",
      "services/vector_store/semantic_search.py",
      "services/vector_store/citation_tracker.py",
      "services/vector_store/legal_document_indexer.py",
      "services/persistence/repositories.py",
      "services/persistence/analytics_repository.py",
      "services/persistence/order_storage.py",
      "services/utils/date_parser.py",
      "services/utils/__init__.py",
      "services/utils/retry_handler.py",
      "src/api/integrated_webhooks.py",
      "src/api/business_webhooks.py",
      "src/api/report_management.py",
      "testing/performance/stress_testing_framework.py",
      "testing/performance/load_testing_suite.py",
      "tests/tools/test_lead_qualification_tool.py",
      "tests/tools/test_runner.py",
      "tests/tools/test_property_validation_tool.py",
      "tests/tools/test_savings_calculator_tool.py",
      "demo/monitoring/demo_performance_tracker.py",
      "demo/scenarios/escalation_scenarios.py",
      "demo/scenarios/__init__.py",
      "demo/scenarios/exemption_application_scenarios.py",
      "demo/scenarios/multi_property_scenarios.py",
      "demo/scenarios/basic_inquiry_scenarios.py",
      "demo/presentations/executive_summary_generator.py",
      "demo/environment/demo_configuration.py",
      "demo/environment/demo_reset_manager.py",
      "scripts/cleanup/clear-all-sessions.py",
      "scripts/cleanup/clear-all-data.py",
      "scripts/cleanup/clear-sessions-only.py"
    ],
    "critical_preserve": [
      "scripts/test-mock-payment.py",
      "mock_data/assessment_patterns.py",
      "agents/simplified/property_tax_rag_tool.py",
      "agents/core/property_tax_assistant_v3.py",
      "services/messaging/whatsapp_client.py",
      "services/messaging/whatsapp_image_handler.py",
      "services/messaging/property_tax_templates.py",
      "services/vector_store/property_tax_embeddings.py",
      "services/persistence/redis_conversation_store.py",
      "services/persistence/database.py",
      "services/voice/property_tax_voice_agent.py",
      "services/payments/mock_razorpay.py",
      "services/payments/razorpay_integration.py",
      "src/api/whatsapp_webhooks.py",
      "demo/scenarios/assessment_appeal_scenarios.py",
      "demo/scenarios/payment_processing_scenarios.py",
      "scripts/cleanup/clear-user-redis.py"
    ]
  },
  "errors": [],
  "statistics": {
    "total_python_files": 108,
    "total_functions": 1212,
    "total_classes": 250,
    "total_imports": 889,
    "analysis_errors": 0
  }
}