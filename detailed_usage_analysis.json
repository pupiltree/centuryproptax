{
  "voice_analysis": {
    "voice_files": [
      "services/voice/voice_setup.py",
      "services/voice/livekit_data_bridge.py",
      "services/voice/voice_chat_state.py",
      "services/voice/property_tax_voice_agent.py",
      "services/voice/voice_config.py"
    ],
    "voice_imports": {
      "scripts/detailed_usage_analyzer.py": [
        {
          "line": 28,
          "content": "# Track imports and references to voice services"
        },
        {
          "line": 42,
          "content": "if re.search(r'from.*voice|import.*voice', line, re.IGNORECASE):"
        },
        {
          "line": 60,
          "content": "\"voice_imports\": dict(voice_imports),"
        },
        {
          "line": 63,
          "content": "\"files_importing_voice\": len(voice_imports),"
        },
        {
          "line": 276,
          "content": "\"safe\": voice_analysis['files_importing_voice'] == 0,"
        },
        {
          "line": 277,
          "content": "\"reason\": f\"Voice services imported by {voice_analysis['files_importing_voice']} files\","
        },
        {
          "line": 330,
          "content": "print(f\"  - Importing files: {results['voice_analysis']['files_importing_voice']}\")"
        }
      ],
      "services/voice/voice_setup.py": [
        {
          "line": 14,
          "content": "from voice_config import voice_config"
        }
      ],
      "services/voice/property_tax_voice_agent.py": [
        {
          "line": 45,
          "content": "# Only show tool execution and important voice agent logs"
        },
        {
          "line": 55,
          "content": "# Navigate to centuryproptax project root (2 levels up from services/voice/)"
        },
        {
          "line": 250,
          "content": "from services.voice.voice_chat_state import get_voice_chat_state_manager"
        },
        {
          "line": 449,
          "content": "from services.voice.voice_chat_state import get_voice_chat_state_manager"
        },
        {
          "line": 546,
          "content": "from services.voice.voice_chat_state import get_voice_chat_state_manager"
        },
        {
          "line": 633,
          "content": "from services.voice.livekit_data_bridge import get_livekit_data_bridge"
        }
      ],
      "src/api/whatsapp_webhooks.py": [
        {
          "line": 204,
          "content": "from services.voice.livekit_data_bridge import get_livekit_data_bridge"
        },
        {
          "line": 256,
          "content": "from services.voice.livekit_data_bridge import get_livekit_data_bridge"
        },
        {
          "line": 462,
          "content": "from services.voice.voice_chat_state import get_voice_chat_state_manager"
        }
      ]
    },
    "voice_references": {
      "scripts/dependency_analyzer.py": [
        {
          "line": 151,
          "content": "# Voice and image analysis services (likely safe to remove)"
        },
        {
          "line": 153,
          "content": "\"voice\", \"image_analysis\", \"instagram\", \"medical\", \"krishna\""
        }
      ],
      "scripts/detailed_usage_analyzer.py": [
        {
          "line": 4,
          "content": "Focuses on voice, image analysis, Instagram code, and unused dependencies."
        },
        {
          "line": 19,
          "content": "def analyze_voice_services_usage(self) -> Dict[str, Any]:"
        },
        {
          "line": 20,
          "content": "\"\"\"Analyze voice services for actual usage patterns.\"\"\""
        },
        {
          "line": 21,
          "content": "print(\"Analyzing voice services usage...\")"
        },
        {
          "line": 23,
          "content": "voice_dir = self.root_path / \"services\" / \"voice\""
        },
        {
          "line": 24,
          "content": "voice_files = []"
        },
        {
          "line": 25,
          "content": "if voice_dir.exists():"
        },
        {
          "line": 26,
          "content": "voice_files = list(voice_dir.rglob(\"*.py\"))"
        },
        {
          "line": 28,
          "content": "# Track imports and references to voice services"
        },
        {
          "line": 29,
          "content": "voice_imports = defaultdict(list)"
        },
        {
          "line": 30,
          "content": "voice_references = defaultdict(list)"
        },
        {
          "line": 32,
          "content": "# Search all Python files for voice-related imports and calls"
        },
        {
          "line": 40,
          "content": "# Check for voice imports"
        },
        {
          "line": 42,
          "content": "if re.search(r'from.*voice|import.*voice', line, re.IGNORECASE):"
        },
        {
          "line": 43,
          "content": "voice_imports[str(py_file.relative_to(self.root_path))].append({"
        },
        {
          "line": 48,
          "content": "# Check for voice function calls or references"
        },
        {
          "line": 49,
          "content": "if re.search(r'voice_|livekit|Voice|LiveKit', line, re.IGNORECASE):"
        },
        {
          "line": 50,
          "content": "voice_references[str(py_file.relative_to(self.root_path))].append({"
        },
        {
          "line": 59,
          "content": "\"voice_files\": [str(f.relative_to(self.root_path)) for f in voice_files],"
        },
        {
          "line": 60,
          "content": "\"voice_imports\": dict(voice_imports),"
        },
        {
          "line": 61,
          "content": "\"voice_references\": dict(voice_references),"
        },
        {
          "line": 62,
          "content": "\"total_voice_files\": len(voice_files),"
        },
        {
          "line": 63,
          "content": "\"files_importing_voice\": len(voice_imports),"
        },
        {
          "line": 64,
          "content": "\"files_referencing_voice\": len(voice_references)"
        },
        {
          "line": 266,
          "content": "voice_analysis = self.analyze_voice_services_usage()"
        },
        {
          "line": 275,
          "content": "\"voice_services\": {"
        },
        {
          "line": 276,
          "content": "\"safe\": voice_analysis['files_importing_voice'] == 0,"
        },
        {
          "line": 277,
          "content": "\"reason\": f\"Voice services imported by {voice_analysis['files_importing_voice']} files\","
        },
        {
          "line": 278,
          "content": "\"files\": voice_analysis['voice_files']"
        },
        {
          "line": 305,
          "content": "\"voice_analysis\": voice_analysis,"
        },
        {
          "line": 328,
          "content": "print(f\"Voice Services:\")"
        },
        {
          "line": 329,
          "content": "print(f\"  - Files: {results['voice_analysis']['total_voice_files']}\")"
        },
        {
          "line": 330,
          "content": "print(f\"  - Importing files: {results['voice_analysis']['files_importing_voice']}\")"
        },
        {
          "line": 331,
          "content": "print(f\"  - Safe to remove: {results['removal_recommendations']['safe_to_remove']['voice_services']['safe']}\")"
        }
      ],
      "config/ai_configuration.py": [
        {
          "line": 74,
          "content": "# Voice conversations - natural and responsive"
        },
        {
          "line": 75,
          "content": "\"voice_conversation\": AIModelConfig("
        },
        {
          "line": 77,
          "content": "temperature=0.2,  # Slightly more natural for voice"
        }
      ],
      "services/ticket_management/ticket_service.py": [
        {
          "line": 163,
          "content": "elif any(word in content for word in [\"bill\", \"billing\", \"invoice\", \"statement\", \"notice\"]):"
        }
      ],
      "services/voice/voice_setup.py": [
        {
          "line": 2,
          "content": "Krishna Diagnostics Voice Agent Setup and Deployment Script"
        },
        {
          "line": 3,
          "content": "Handles LiveKit room management, telephony integration, and voice agent deployment."
        },
        {
          "line": 12,
          "content": "from livekit import api as lk_api"
        },
        {
          "line": 13,
          "content": "from livekit.protocol.room import Room"
        },
        {
          "line": 14,
          "content": "from voice_config import voice_config"
        },
        {
          "line": 23,
          "content": "class KrishnaVoiceSetup:"
        },
        {
          "line": 25,
          "content": "Setup and management utilities for Krishna Diagnostics voice integration."
        },
        {
          "line": 29,
          "content": "self.api = lk_api.LiveKitAPI("
        },
        {
          "line": 30,
          "content": "url=voice_config.LIVEKIT_URL,"
        },
        {
          "line": 31,
          "content": "api_key=voice_config.LIVEKIT_API_KEY,"
        },
        {
          "line": 32,
          "content": "api_secret=voice_config.LIVEKIT_API_SECRET"
        },
        {
          "line": 37,
          "content": "room_type: str = \"voice_consultation\") -> Dict:"
        },
        {
          "line": 39,
          "content": "Create a dedicated healthcare voice room."
        },
        {
          "line": 43,
          "content": "room_type: Type of healthcare room (voice_consultation, emergency, etc.)"
        },
        {
          "line": 58,
          "content": "node_id=\"\",  # Let LiveKit choose optimal node"
        },
        {
          "line": 62,
          "content": "logger.info(f\"Created healthcare voice room: {room_name}\")"
        },
        {
          "line": 66,
          "content": "api_key=voice_config.LIVEKIT_API_KEY,"
        },
        {
          "line": 67,
          "content": "api_secret=voice_config.LIVEKIT_API_SECRET"
        },
        {
          "line": 84,
          "content": "'room_url': voice_config.LIVEKIT_URL,"
        },
        {
          "line": 99,
          "content": "Setup telephony integration for voice calls."
        },
        {
          "line": 113,
          "content": "# 3. Configure voice transcription"
        },
        {
          "line": 119,
          "content": "'sip_endpoint': f\"sip:krishna-voice@{voice_config.LIVEKIT_URL}\","
        },
        {
          "line": 122,
          "content": "'voice_calls',"
        },
        {
          "line": 137,
          "content": "\"\"\"List all active healthcare voice rooms.\"\"\""
        },
        {
          "line": 200,
          "content": "async def test_voice_agent_connection(self) -> Dict:"
        },
        {
          "line": 201,
          "content": "\"\"\"Test voice agent connection and configuration.\"\"\""
        },
        {
          "line": 217,
          "content": "genai.configure(api_key=voice_config.GOOGLE_API_KEY)"
        },
        {
          "line": 221,
          "content": "response = model.generate_content(\"Say 'Krishna Diagnostics voice agent test successful'\")"
        },
        {
          "line": 230,
          "content": "'livekit_status': 'connected',"
        },
        {
          "line": 234,
          "content": "'livekit_url': voice_config.LIVEKIT_URL,"
        },
        {
          "line": 235,
          "content": "'voice_model': voice_config.VOICE_MODEL,"
        },
        {
          "line": 236,
          "content": "'voice_language': voice_config.VOICE_LANGUAGE,"
        },
        {
          "line": 237,
          "content": "'supported_languages': list(voice_config.SUPPORTED_LANGUAGES.keys())"
        },
        {
          "line": 242,
          "content": "logger.error(f\"Voice agent connection test failed: {e}\")"
        },
        {
          "line": 248,
          "content": "async def deploy_voice_agent(self) -> Dict:"
        },
        {
          "line": 249,
          "content": "\"\"\"Deploy the Krishna Diagnostics voice agent.\"\"\""
        },
        {
          "line": 251,
          "content": "logger.info(\"Deploying Krishna Diagnostics Voice Agent...\")"
        },
        {
          "line": 254,
          "content": "test_result = await self.test_voice_agent_connection()"
        },
        {
          "line": 267,
          "content": "logger.info(\"Voice agent deployment successful!\")"
        },
        {
          "line": 279,
          "content": "'24/7 voice support availability'"
        },
        {
          "line": 282,
          "content": "'voice_room_creation': '/api/voice/create-room',"
        },
        {
          "line": 283,
          "content": "'telephony_webhook': '/api/voice/telephony-webhook',"
        },
        {
          "line": 284,
          "content": "'health_check': '/api/voice/health'"
        },
        {
          "line": 289,
          "content": "logger.error(f\"Voice agent deployment failed: {e}\")"
        },
        {
          "line": 297,
          "content": "\"\"\"Command line interface for voice setup.\"\"\""
        },
        {
          "line": 300,
          "content": "parser = argparse.ArgumentParser(description='Krishna Diagnostics Voice Agent Setup')"
        },
        {
          "line": 303,
          "content": "parser.add_argument('--room-type', default='voice_consultation', help='Room type')"
        },
        {
          "line": 307,
          "content": "setup = KrishnaVoiceSetup()"
        },
        {
          "line": 310,
          "content": "result = await setup.test_voice_agent_connection()"
        },
        {
          "line": 314,
          "content": "result = await setup.deploy_voice_agent()"
        }
      ],
      "services/voice/livekit_data_bridge.py": [
        {
          "line": 2,
          "content": "LiveKit Data Bridge - Real-time communication between chat and voice servers."
        },
        {
          "line": 3,
          "content": "Replaces database polling with instant LiveKit data streams."
        },
        {
          "line": 15,
          "content": "from livekit import api as lk_api"
        },
        {
          "line": 16,
          "content": "from livekit.protocol.models import DataPacket"
        },
        {
          "line": 31,
          "content": "class LiveKitDataBridge:"
        },
        {
          "line": 33,
          "content": "Real-time data bridge between chat and voice servers using LiveKit data streams."
        },
        {
          "line": 38,
          "content": "self.livekit_url = os.getenv(\"LIVEKIT_URL\")"
        },
        {
          "line": 39,
          "content": "self.livekit_api_key = os.getenv(\"LIVEKIT_API_KEY\")"
        },
        {
          "line": 40,
          "content": "self.livekit_api_secret = os.getenv(\"LIVEKIT_API_SECRET\")"
        },
        {
          "line": 42,
          "content": "if not all([self.livekit_url, self.livekit_api_key, self.livekit_api_secret]):"
        },
        {
          "line": 43,
          "content": "raise ValueError(\"Missing LiveKit credentials for data bridge\")"
        },
        {
          "line": 45,
          "content": "self.api = lk_api.LiveKitAPI("
        },
        {
          "line": 46,
          "content": "url=self.livekit_url,"
        },
        {
          "line": 47,
          "content": "api_key=self.livekit_api_key,"
        },
        {
          "line": 48,
          "content": "api_secret=self.livekit_api_secret"
        },
        {
          "line": 51,
          "content": "# Simple in-memory room registry - LiveKit handles the complexity"
        },
        {
          "line": 54,
          "content": "logger.info(\"\u2705 LiveKit Data Bridge initialized with simple room registry\")"
        },
        {
          "line": 56,
          "content": "async def register_voice_room(self, phone_number: str, room_name: str):"
        },
        {
          "line": 57,
          "content": "\"\"\"Register an active voice call room for data streaming\"\"\""
        },
        {
          "line": 59,
          "content": "logger.info(f\"\ud83d\udd0a Registered voice room for {phone_number[:5]}***: {room_name}\")"
        },
        {
          "line": 61,
          "content": "async def unregister_voice_room(self, phone_number: str):"
        },
        {
          "line": 62,
          "content": "\"\"\"Unregister voice room when call ends\"\"\""
        },
        {
          "line": 65,
          "content": "logger.info(f\"\ud83d\udd07 Unregistered voice room for {phone_number[:5]}***: {room_name}\")"
        },
        {
          "line": 78,
          "content": "Send prescription analysis results directly to voice agent via LiveKit data stream."
        },
        {
          "line": 79,
          "content": "Uses pattern matching to find PSTN voice rooms instead of registry."
        },
        {
          "line": 96,
          "content": "logger.info(f\"\ud83c\udfaf Found PSTN voice room: {target_room} for {phone_number[:5]}***\")"
        },
        {
          "line": 100,
          "content": "logger.warning(f\"\u274c No active PSTN voice room found for pattern {room_pattern} (phone: {phone_number[:5]}***)\")"
        },
        {
          "line": 106,
          "content": "logger.error(f\"\u274c Failed to list LiveKit rooms: {e}\")"
        },
        {
          "line": 125,
          "content": "# Send via LiveKit data stream to voice room"
        },
        {
          "line": 128,
          "content": "logger.info(f\"\u2705 Sent prescription data to voice room {room_name} for {phone_number[:5]}***\")"
        },
        {
          "line": 132,
          "content": "logger.error(f\"\u274c Failed to send prescription data via LiveKit: {e}\")"
        },
        {
          "line": 141,
          "content": "\"\"\"Send prescription analysis failure to voice agent\"\"\""
        },
        {
          "line": 145,
          "content": "logger.warning(f\"\u274c No active voice room for {phone_number[:5]}*** - cannot send failure\")"
        },
        {
          "line": 161,
          "content": "logger.info(f\"\u2705 Sent prescription failure to voice room {room_name} for {phone_number[:5]}***\")"
        },
        {
          "line": 165,
          "content": "logger.error(f\"\u274c Failed to send prescription failure via LiveKit: {e}\")"
        },
        {
          "line": 174,
          "content": "\"\"\"Send prescription processing status update to voice agent\"\"\""
        },
        {
          "line": 178,
          "content": "return False  # No active voice room, skip silently"
        },
        {
          "line": 192,
          "content": "logger.info(f\"\ud83d\udcca Sent status update '{status}' to voice room {room_name}\")"
        },
        {
          "line": 196,
          "content": "logger.error(f\"\u274c Failed to send status update via LiveKit: {e}\")"
        },
        {
          "line": 200,
          "content": "\"\"\"Internal method to send data to LiveKit room\"\"\""
        },
        {
          "line": 212,
          "content": "# Send data to all participants in the room (including voice agent)"
        },
        {
          "line": 222,
          "content": "logger.info(f\"\ud83d\udce1 Sent LiveKit data to room {room_name}, topic: {topic}\")"
        },
        {
          "line": 225,
          "content": "logger.error(f\"\u274c Failed to send data to LiveKit room {room_name}: {e}\")"
        },
        {
          "line": 228,
          "content": "async def is_voice_call_active(self, phone_number: str) -> bool:"
        },
        {
          "line": 229,
          "content": "\"\"\"Check if there's an active voice call for this phone number\"\"\""
        },
        {
          "line": 233,
          "content": "async def get_active_voice_rooms(self) -> Dict[str, str]:"
        },
        {
          "line": 234,
          "content": "\"\"\"Get all active voice call rooms\"\"\""
        },
        {
          "line": 238,
          "content": "_data_bridge: Optional[LiveKitDataBridge] = None"
        },
        {
          "line": 240,
          "content": "def get_livekit_data_bridge() -> LiveKitDataBridge:"
        },
        {
          "line": 241,
          "content": "\"\"\"Get singleton instance of LiveKit data bridge\"\"\""
        },
        {
          "line": 244,
          "content": "_data_bridge = LiveKitDataBridge()"
        },
        {
          "line": 253,
          "content": "Convenience function to notify voice agent that prescription is ready."
        },
        {
          "line": 256,
          "content": "bridge = get_livekit_data_bridge()"
        },
        {
          "line": 266,
          "content": "\"\"\"Convenience function to notify voice agent of prescription analysis failure\"\"\""
        },
        {
          "line": 267,
          "content": "bridge = get_livekit_data_bridge()"
        }
      ],
      "services/voice/voice_chat_state.py": [
        {
          "line": 2,
          "content": "Voice-Chat State Management System"
        },
        {
          "line": 3,
          "content": "Manages shared state between voice calls and chat system for prescription image processing."
        },
        {
          "line": 15,
          "content": "class VoiceChatStateManager:"
        },
        {
          "line": 16,
          "content": "\"\"\"Manages shared state between voice and chat systems using Redis.\"\"\""
        },
        {
          "line": 22,
          "content": "self.voice_call_prefix = \"voice_call:\""
        },
        {
          "line": 35,
          "content": "async def start_voice_call(self, customer_phone: str, voice_session_id: str) -> str:"
        },
        {
          "line": 36,
          "content": "\"\"\"Mark a voice call as active for a customer.\"\"\""
        },
        {
          "line": 42,
          "content": "\"voice_session_id\": voice_session_id,"
        },
        {
          "line": 52,
          "content": "f\"{self.voice_call_prefix}{customer_phone}\","
        },
        {
          "line": 57,
          "content": "logger.info(f\"\ud83d\udd0a Voice call started for {customer_phone[:5]}***\","
        },
        {
          "line": 58,
          "content": "session_id=voice_session_id)"
        },
        {
          "line": 59,
          "content": "return voice_session_id"
        },
        {
          "line": 62,
          "content": "logger.error(f\"Failed to start voice call state: {e}\")"
        },
        {
          "line": 63,
          "content": "return voice_session_id"
        },
        {
          "line": 65,
          "content": "async def end_voice_call(self, customer_phone: str) -> bool:"
        },
        {
          "line": 66,
          "content": "\"\"\"Mark voice call as ended.\"\"\""
        },
        {
          "line": 69,
          "content": "await redis_client.delete(f\"{self.voice_call_prefix}{customer_phone}\")"
        },
        {
          "line": 70,
          "content": "logger.info(f\"\ud83d\udd0a Voice call ended for {customer_phone[:5]}***\")"
        },
        {
          "line": 73,
          "content": "logger.error(f\"Failed to end voice call state: {e}\")"
        },
        {
          "line": 76,
          "content": "async def is_voice_call_active(self, customer_phone: str) -> bool:"
        },
        {
          "line": 77,
          "content": "\"\"\"Check if a voice call is currently active for customer.\"\"\""
        },
        {
          "line": 80,
          "content": "call_data = await redis_client.get(f\"{self.voice_call_prefix}{customer_phone}\")"
        },
        {
          "line": 87,
          "content": "logger.error(f\"Failed to check voice call state: {e}\")"
        },
        {
          "line": 93,
          "content": "voice_session_id: str"
        },
        {
          "line": 99,
          "content": "# Update voice call state"
        },
        {
          "line": 100,
          "content": "call_data = await redis_client.get(f\"{self.voice_call_prefix}{customer_phone}\")"
        },
        {
          "line": 108,
          "content": "f\"{self.voice_call_prefix}{customer_phone}\","
        },
        {
          "line": 119,
          "content": "You requested help with a prescription during our voice call. Please send me a clear photo of your prescription here, and I'll analyze it for you."
        },
        {
          "line": 127,
          "content": "Send the image now and I'll get back to you on our voice call with the details! \ud83d\udcde\"\"\""
        },
        {
          "line": 190,
          "content": "call_data = await redis_client.get(f\"{self.voice_call_prefix}{customer_phone}\")"
        },
        {
          "line": 216,
          "content": "f\"{self.voice_call_prefix}{customer_phone}\","
        },
        {
          "line": 276,
          "content": "# Add confidence_score to prescription_data for voice agent"
        },
        {
          "line": 288,
          "content": "# Check voice call state as fallback (for voice-initiated prescriptions)"
        },
        {
          "line": 289,
          "content": "call_data = await redis_client.get(f\"{self.voice_call_prefix}{customer_phone}\")"
        },
        {
          "line": 295,
          "content": "logger.info(f\"\u2705 Found prescription data in voice call state for {prescription_data.get('patient_name', 'Unknown')}\")"
        },
        {
          "line": 298,
          "content": "\"message\": state.get(\"prescription_status_message\", \"Found in voice call state\"),"
        },
        {
          "line": 316,
          "content": "\"\"\"Save prescription analysis results for voice call with overwriting and TTL.\"\"\""
        },
        {
          "line": 320,
          "content": "# Update voice call state with prescription context"
        },
        {
          "line": 321,
          "content": "call_data = await redis_client.get(f\"{self.voice_call_prefix}{customer_phone}\")"
        },
        {
          "line": 344,
          "content": "f\"{self.voice_call_prefix}{customer_phone}\","
        },
        {
          "line": 350,
          "content": "logger.info(f\"\ud83d\udcbe Prescription context saved for voice call {customer_phone[:5]}*** ({patient_name}, TTL: {self.prescription_ttl_seconds}s)\")"
        },
        {
          "line": 359,
          "content": "\"\"\"Get prescription analysis results for voice call.\"\"\""
        },
        {
          "line": 362,
          "content": "call_data = await redis_client.get(f\"{self.voice_call_prefix}{customer_phone}\")"
        },
        {
          "line": 372,
          "content": "async def get_voice_call_state(self, customer_phone: str) -> Optional[Dict[str, Any]]:"
        },
        {
          "line": 373,
          "content": "\"\"\"Get complete voice call state.\"\"\""
        },
        {
          "line": 376,
          "content": "call_data = await redis_client.get(f\"{self.voice_call_prefix}{customer_phone}\")"
        },
        {
          "line": 382,
          "content": "logger.error(f\"Failed to get voice call state: {e}\")"
        },
        {
          "line": 389,
          "content": "call_data = await redis_client.get(f\"{self.voice_call_prefix}{customer_phone}\")"
        },
        {
          "line": 396,
          "content": "f\"{self.voice_call_prefix}{customer_phone}\","
        },
        {
          "line": 404,
          "content": "_voice_chat_state_manager = None"
        },
        {
          "line": 406,
          "content": "def get_voice_chat_state_manager() -> VoiceChatStateManager:"
        },
        {
          "line": 407,
          "content": "\"\"\"Get or create global voice-chat state manager.\"\"\""
        },
        {
          "line": 408,
          "content": "global _voice_chat_state_manager"
        },
        {
          "line": 409,
          "content": "if _voice_chat_state_manager is None:"
        },
        {
          "line": 410,
          "content": "_voice_chat_state_manager = VoiceChatStateManager()"
        },
        {
          "line": 411,
          "content": "return _voice_chat_state_manager"
        }
      ],
      "services/voice/property_tax_voice_agent.py": [
        {
          "line": 2,
          "content": "Century Property Tax Voice Agent - LiveKit + Google Gemini Live Integration"
        },
        {
          "line": 3,
          "content": "Intelligent agent for property tax consultation and assessment booking via voice."
        },
        {
          "line": 14,
          "content": "from livekit import rtc, agents"
        },
        {
          "line": 15,
          "content": "from livekit.agents import Agent, AgentSession, function_tool"
        },
        {
          "line": 16,
          "content": "from livekit.plugins.google.beta.realtime import RealtimeModel"
        },
        {
          "line": 17,
          "content": "from livekit import api as lk_api"
        },
        {
          "line": 42,
          "content": "logging.getLogger(\"livekit\").setLevel(logging.WARNING)"
        },
        {
          "line": 45,
          "content": "# Only show tool execution and important voice agent logs"
        },
        {
          "line": 51,
          "content": "# Ensure voice agent uses the main project database (not local voice directory database)"
        },
        {
          "line": 55,
          "content": "# Navigate to centuryproptax project root (2 levels up from services/voice/)"
        },
        {
          "line": 62,
          "content": "logging.info(f\"\ud83d\uddc3\ufe0f Voice agent changed working directory from {original_cwd} to {main_project_dir}\")"
        },
        {
          "line": 63,
          "content": "logging.info(f\"\ud83d\uddc3\ufe0f Voice agent will use default database: centuryproptax.db\")"
        },
        {
          "line": 66,
          "content": "logging.info(f\"\ud83d\uddc3\ufe0f Voice agent will use local database (may be empty)\")"
        },
        {
          "line": 70,
          "content": "# Verify LiveKit credentials"
        },
        {
          "line": 71,
          "content": "LIVEKIT_URL = os.getenv(\"LIVEKIT_URL\")"
        },
        {
          "line": 72,
          "content": "LIVEKIT_API_KEY = os.getenv(\"LIVEKIT_API_KEY\")"
        },
        {
          "line": 73,
          "content": "LIVEKIT_API_SECRET = os.getenv(\"LIVEKIT_API_SECRET\")"
        },
        {
          "line": 75,
          "content": "if not all([LIVEKIT_URL, LIVEKIT_API_KEY, LIVEKIT_API_SECRET]):"
        },
        {
          "line": 76,
          "content": "print(\"Missing LiveKit credentials:\")"
        },
        {
          "line": 77,
          "content": "print(f\"LIVEKIT_URL: {'\u2713' if LIVEKIT_URL else '\u2717'}\")"
        },
        {
          "line": 78,
          "content": "print(f\"LIVEKIT_API_KEY: {'\u2713' if LIVEKIT_API_KEY else '\u2717'}\")"
        },
        {
          "line": 79,
          "content": "print(f\"LIVEKIT_API_SECRET: {'\u2713' if LIVEKIT_API_SECRET else '\u2717'}\")"
        },
        {
          "line": 80,
          "content": "exit(\"LiveKit credentials missing\")"
        },
        {
          "line": 85,
          "content": "# Voice detection configuration optimized for Indian English and Hindi"
        },
        {
          "line": 95,
          "content": "Century Property Tax Voice Assistant - Intelligent LLM-powered property tax conversations."
        },
        {
          "line": 107,
          "content": "You are a friendly multilingual property tax assistant at Century Property Tax for voice consultations."
        },
        {
          "line": 117,
          "content": "- Be warm, empathetic, and conversational in voice calls"
        },
        {
          "line": 119,
          "content": "- Use natural speech patterns for voice conversations"
        },
        {
          "line": 122,
          "content": "VOICE CONVERSATION FLOW:"
        },
        {
          "line": 165,
          "content": "CRITICAL VOICE GUIDELINES:"
        },
        {
          "line": 166,
          "content": "- Speak naturally and conversationally for voice interactions"
        },
        {
          "line": 167,
          "content": "- Don't repeat information - voice conversations should flow smoothly"
        },
        {
          "line": 169,
          "content": "- Keep explanations clear but not overly detailed for voice"
        },
        {
          "line": 194,
          "content": "Be conversational, efficient, and supportive. Support customers naturally in their preferred language throughout the entire voice interaction while maintaining professional boundaries regarding legal advice."
        },
        {
          "line": 225,
          "content": "logging.error(f\"\ud83c\udfd8\ufe0f \u274c Property tax RAG tool error in voice: {e}\", exc_info=True)"
        },
        {
          "line": 250,
          "content": "from services.voice.voice_chat_state import get_voice_chat_state_manager"
        },
        {
          "line": 251,
          "content": "state_manager = get_voice_chat_state_manager()"
        },
        {
          "line": 252,
          "content": "logging.info(f\"\ud83d\udcf1 Got voice chat state manager\")"
        },
        {
          "line": 260,
          "content": "voice_session_id = f\"voice_{datetime.now().strftime('%Y%m%d_%H%M%S')}\""
        },
        {
          "line": 261,
          "content": "logging.info(f\"\ud83d\udcf1 Requesting property document via WhatsApp: phone={customer_phone[:5]}***, session_id={voice_session_id}\")"
        },
        {
          "line": 265,
          "content": "voice_session_id=voice_session_id"
        },
        {
          "line": 279,
          "content": "logging.error(f\"\ud83d\udcf1 \u274c Property document request error in voice: {e}\", exc_info=True)"
        },
        {
          "line": 293,
          "content": "logging.error(f\"\ud83d\udccd \u274c PIN validation error in voice: {e}\", exc_info=True)"
        },
        {
          "line": 389,
          "content": "instagram_id=f\"voice_customer_{phone}\","
        },
        {
          "line": 409,
          "content": "\"instagram_id\": f\"voice_customer_{phone}\","
        },
        {
          "line": 418,
          "content": "\"instagram_id\": f\"voice_customer_{phone}\","
        },
        {
          "line": 429,
          "content": "logging.error(f\"\ud83d\uddfa \u274c Order creation error in voice (with RAG): {e}\", exc_info=True)"
        },
        {
          "line": 449,
          "content": "from services.voice.voice_chat_state import get_voice_chat_state_manager"
        },
        {
          "line": 450,
          "content": "state_manager = get_voice_chat_state_manager()"
        },
        {
          "line": 451,
          "content": "logging.info(f\"\ud83d\udccb Got voice chat state manager\")"
        },
        {
          "line": 512,
          "content": "\"\"\"End the voice call when conversation is complete.\"\"\""
        },
        {
          "line": 516,
          "content": "logging.info(f\"\ud83d\udcde Ending voice call with reason: {reason}\")"
        },
        {
          "line": 525,
          "content": "# Voice Agent Entry Point"
        },
        {
          "line": 528,
          "content": "Century Property Tax Voice Agent Entry Point"
        },
        {
          "line": 543,
          "content": "logging.info(f\"Century Property Tax voice agent joining room: {ctx.room.name}\")"
        },
        {
          "line": 545,
          "content": "# Initialize voice-chat state management"
        },
        {
          "line": 546,
          "content": "from services.voice.voice_chat_state import get_voice_chat_state_manager"
        },
        {
          "line": 547,
          "content": "state_manager = get_voice_chat_state_manager()"
        },
        {
          "line": 619,
          "content": "# Start voice call state for detected phone number"
        },
        {
          "line": 620,
          "content": "voice_session_id = f\"dev_voice_{datetime.now().strftime('%Y%m%d_%H%M%S')}\""
        },
        {
          "line": 621,
          "content": "await state_manager.start_voice_call(dev_phone_number, voice_session_id)"
        },
        {
          "line": 622,
          "content": "logging.info(f\"\ud83d\udd0a Started voice call state for dev mode: {dev_phone_number}\")"
        },
        {
          "line": 632,
          "content": "# Initialize LiveKit data bridge for real-time communication"
        },
        {
          "line": 633,
          "content": "from services.voice.livekit_data_bridge import get_livekit_data_bridge"
        },
        {
          "line": 634,
          "content": "data_bridge = get_livekit_data_bridge()"
        },
        {
          "line": 638,
          "content": "await data_bridge.register_voice_room(dev_phone_number, ctx.room.name)"
        },
        {
          "line": 639,
          "content": "logging.info(f\"\ud83d\udce1 Registered LiveKit data bridge for room {ctx.room.name}\")"
        },
        {
          "line": 647,
          "content": "# Clean up voice call state for any active calls"
        },
        {
          "line": 654,
          "content": "await state_manager.end_voice_call(potential_phone)"
        },
        {
          "line": 655,
          "content": "logging.info(f\"\ud83e\uddf9 Cleaned up voice call state for {potential_phone[:5]}***\")"
        },
        {
          "line": 657,
          "content": "logging.error(f\"Error cleaning up voice call state: {e}\")"
        },
        {
          "line": 663,
          "content": "# Create property tax voice agent session"
        },
        {
          "line": 667,
          "content": "voice=\"Kore\",  # Professional, clear female voice for property tax consultations"
        },
        {
          "line": 677,
          "content": "# Set up LiveKit data stream handler for property document data"
        },
        {
          "line": 680,
          "content": "\"\"\"Handle real-time property document data from chat server via LiveKit data streams\"\"\""
        },
        {
          "line": 694,
          "content": "logging.info(f\"\ud83d\udce1 \u2705 Received LiveKit data stream: type={message_type}, phone={phone_number[:5] if phone_number else 'unknown'}***, data_keys={list(message_data.keys())}\")"
        },
        {
          "line": 699,
          "content": "# Note: Would need to implement _handle_livekit_property_document_message"
        },
        {
          "line": 700,
          "content": "logging.info(f\"\ud83d\udce1 \u2705 Forwarded LiveKit data to agent for {phone_number[:5]}***\")"
        },
        {
          "line": 707,
          "content": "logging.error(f\"\ud83d\udce1 \u274c Error handling LiveKit data stream: {e}\", exc_info=True)"
        },
        {
          "line": 725,
          "content": "# Clean up voice call state when call ends"
        },
        {
          "line": 727,
          "content": "await state_manager.end_voice_call(_dev_phone_number)"
        },
        {
          "line": 728,
          "content": "logging.info(f\"\ud83e\uddf9 Cleaned up voice call state for dev phone: {_dev_phone_number}\")"
        },
        {
          "line": 731,
          "content": "logging.info(f\"Property tax voice room '{ctx.room.name}' deleted (call ended).\")"
        }
      ],
      "services/voice/voice_config.py": [
        {
          "line": 2,
          "content": "Century Property Tax Voice Configuration"
        },
        {
          "line": 3,
          "content": "Configuration settings for voice channel integration."
        },
        {
          "line": 11,
          "content": "class VoiceConfig:"
        },
        {
          "line": 12,
          "content": "\"\"\"Voice agent configuration settings.\"\"\""
        },
        {
          "line": 18,
          "content": "# LiveKit Configuration"
        },
        {
          "line": 19,
          "content": "LIVEKIT_URL: str = os.getenv(\"LIVEKIT_URL\", \"wss://voice.centuryproptax.com\")"
        },
        {
          "line": 20,
          "content": "LIVEKIT_API_KEY: str = os.getenv(\"LIVEKIT_API_KEY\", \"devkey\")"
        },
        {
          "line": 21,
          "content": "LIVEKIT_API_SECRET: str = os.getenv(\"LIVEKIT_API_SECRET\", \"secret\")"
        },
        {
          "line": 26,
          "content": "# Voice Model Settings"
        },
        {
          "line": 27,
          "content": "VOICE_MODEL: str = \"gemini-live-2.5-flash-preview\""
        },
        {
          "line": 28,
          "content": "VOICE_PERSONA: str = \"Alex\"  # Professional, clear voice"
        },
        {
          "line": 29,
          "content": "VOICE_LANGUAGE: str = \"en-IN\"   # Indian English"
        },
        {
          "line": 30,
          "content": "VOICE_TEMPERATURE: float = 0.2  # Conservative for property tax advice"
        },
        {
          "line": 32,
          "content": "# Voice Detection Settings (Optimized for Indian English + Hindi)"
        },
        {
          "line": 53,
          "content": "# Business Hours (24/7 for voice, but different services)"
        },
        {
          "line": 57,
          "content": "'voice_support': {'start': 0, 'end': 24},   # 24/7"
        },
        {
          "line": 61,
          "content": "# Voice Response Templates"
        },
        {
          "line": 104,
          "content": "\"\"\"Get voice activity detection configuration.\"\"\""
        },
        {
          "line": 119,
          "content": "model=self.VOICE_MODEL,"
        },
        {
          "line": 120,
          "content": "temperature=self.VOICE_TEMPERATURE"
        },
        {
          "line": 150,
          "content": "\"\"\"Get language code for voice synthesis.\"\"\""
        },
        {
          "line": 153,
          "content": "def is_business_hours(self, service_type: str = 'voice_support') -> bool:"
        },
        {
          "line": 161,
          "content": "voice_config = VoiceConfig()"
        }
      ],
      "src/api/whatsapp_webhooks.py": [
        {
          "line": 150,
          "content": "async def _handle_voice_call_prescription_image("
        },
        {
          "line": 156,
          "content": "\"\"\"Handle prescription image during active voice call.\"\"\""
        },
        {
          "line": 158,
          "content": "logger.info(f\"\ud83d\udd0a\ud83d\udccb Processing voice call prescription image from {user_id[:5]}***\")"
        },
        {
          "line": 182,
          "content": "# DO NOT SEND WHATSAPP MESSAGE - Voice agent will handle communication"
        },
        {
          "line": 183,
          "content": "logger.error(f\"\u274c Failed to download prescription image for voice call {user_id[:5]}***\")"
        },
        {
          "line": 203,
          "content": "# NEW: Send via LiveKit data stream for real-time communication"
        },
        {
          "line": 204,
          "content": "from services.voice.livekit_data_bridge import get_livekit_data_bridge"
        },
        {
          "line": 205,
          "content": "data_bridge = get_livekit_data_bridge()"
        },
        {
          "line": 207,
          "content": "# Send prescription data instantly to voice agent via LiveKit"
        },
        {
          "line": 208,
          "content": "livekit_sent = await data_bridge.send_prescription_data("
        },
        {
          "line": 214,
          "content": "if livekit_sent:"
        },
        {
          "line": 215,
          "content": "logger.info(f\"\ud83d\ude80 REAL-TIME SUCCESS: Sent prescription data via LiveKit to voice agent for {user_id[:5]}***\")"
        },
        {
          "line": 217,
          "content": "logger.warning(f\"\u26a0\ufe0f LiveKit send failed, using fallback Redis storage for {user_id[:5]}***\")"
        },
        {
          "line": 219,
          "content": "# FALLBACK: Save to Redis for backward compatibility (if LiveKit fails)"
        },
        {
          "line": 229,
          "content": "\"awaiting_confirmation\": False,  # Voice call doesn't need confirmation workflow"
        },
        {
          "line": 238,
          "content": "logger.info(f\"\ud83d\udcbe FALLBACK: Saved prescription context to Redis for voice call: {whatsapp_session_id}\")"
        },
        {
          "line": 240,
          "content": "# Also save to voice call state for backward compatibility"
        },
        {
          "line": 247,
          "content": "# Voice agent will communicate results during the call"
        },
        {
          "line": 248,
          "content": "logger.info(f\"\u2705 Voice call prescription analysis complete for {user_id[:5]}*** - sent via LiveKit!\")"
        },
        {
          "line": 251,
          "content": "# Analysis failed - send failure via LiveKit"
        },
        {
          "line": 255,
          "content": "# NEW: Send failure via LiveKit data stream"
        },
        {
          "line": 256,
          "content": "from services.voice.livekit_data_bridge import get_livekit_data_bridge"
        },
        {
          "line": 257,
          "content": "data_bridge = get_livekit_data_bridge()"
        },
        {
          "line": 259,
          "content": "livekit_sent = await data_bridge.send_prescription_failure("
        },
        {
          "line": 265,
          "content": "if livekit_sent:"
        },
        {
          "line": 266,
          "content": "logger.info(f\"\ud83d\ude80 REAL-TIME FAILURE: Sent prescription failure via LiveKit for {user_id[:5]}***\")"
        },
        {
          "line": 268,
          "content": "logger.warning(f\"\u26a0\ufe0f LiveKit failure send failed for {user_id[:5]}***\")"
        },
        {
          "line": 275,
          "content": "# DO NOT SEND ERROR MESSAGE - Voice agent will handle"
        },
        {
          "line": 276,
          "content": "logger.warning(f\"\u274c Voice call prescription analysis failed for {user_id[:5]}*** - sent via LiveKit!\")"
        },
        {
          "line": 279,
          "content": "logger.error(f\"Error processing voice call prescription image: {e}\")"
        },
        {
          "line": 286,
          "content": "# DO NOT SEND ERROR MESSAGE - Voice agent will handle all communication"
        },
        {
          "line": 450,
          "content": "\"\"\"Handle incoming WhatsApp message with voice call awareness.\"\"\""
        },
        {
          "line": 461,
          "content": "# Check if user is currently in a voice call"
        },
        {
          "line": 462,
          "content": "from services.voice.voice_chat_state import get_voice_chat_state_manager"
        },
        {
          "line": 463,
          "content": "state_manager = get_voice_chat_state_manager()"
        },
        {
          "line": 464,
          "content": "is_voice_call_active = await state_manager.is_voice_call_active(user_id)"
        },
        {
          "line": 466,
          "content": "logger.info(f\"\ud83d\udd0a Voice call active for {user_id[:5]}***: {is_voice_call_active}\")"
        },
        {
          "line": 471,
          "content": "if is_voice_call_active:"
        },
        {
          "line": 472,
          "content": "# Special handling for voice call prescription images"
        },
        {
          "line": 473,
          "content": "await _handle_voice_call_prescription_image(message_data, user_id, contact_name, state_manager)"
        },
        {
          "line": 483,
          "content": "if is_voice_call_active:"
        },
        {
          "line": 486,
          "content": "message=\"I see you're currently on a voice call with me. Please send a prescription image if you mentioned one during our call, or continue our conversation by voice.\""
        },
        {
          "line": 499,
          "content": "# If user is in active voice call, don't process text messages through chat"
        },
        {
          "line": 500,
          "content": "if is_voice_call_active:"
        },
        {
          "line": 502,
          "content": "# The voice agent will handle all communication during the call"
        },
        {
          "line": 503,
          "content": "logger.info(f\"\ud83d\udd0a Blocked text message processing - user {user_id[:5]}*** is in active voice call\")"
        },
        {
          "line": 504,
          "content": "logger.info(f\"\ud83d\udcdd Suppressed chat reply during voice call for message: '{message_text[:50]}...'\")"
        }
      ],
      "demo/scenarios/exemption_application_scenarios.py": [
        {
          "line": 442,
          "content": "\"ai\": \"You'll need: proof of solar system installation (contractor invoices, permits), documentation showing the system's value and specifications, photos of the installed system, and the completed solar exemption application. The system must be primarily for on-site energy use, not commercial energy production.\","
        },
        {
          "line": 465,
          "content": "\"Solar installation invoices\","
        }
      ]
    },
    "total_voice_files": 5,
    "files_importing_voice": 4,
    "files_referencing_voice": 11
  },
  "image_analysis": {
    "image_analysis_files": [
      "services/image_analysis/__init__.py"
    ],
    "image_analysis_imports": {
      "scripts/detailed_usage_analyzer.py": [
        {
          "line": 90,
          "content": "if re.search(r'from.*image_analysis|import.*image_analysis', line, re.IGNORECASE):"
        },
        {
          "line": 111,
          "content": "\"files_importing_image_analysis\": len(img_imports),"
        },
        {
          "line": 281,
          "content": "\"safe\": image_analysis['files_importing_image_analysis'] <= 1,  # Only the broken import"
        },
        {
          "line": 282,
          "content": "\"reason\": f\"Image analysis imported by {image_analysis['files_importing_image_analysis']} files\","
        },
        {
          "line": 335,
          "content": "print(f\"  - Importing files: {results['image_analysis']['files_importing_image_analysis']}\")"
        }
      ],
      "agents/simplified/property_document_tools.py": [
        {
          "line": 15,
          "content": "from services.image_analysis.property_document_parser import ("
        }
      ]
    },
    "image_analysis_references": {
      "scripts/dependency_analyzer.py": [
        {
          "line": 153,
          "content": "\"voice\", \"image_analysis\", \"instagram\", \"medical\", \"krishna\""
        }
      ],
      "scripts/detailed_usage_analyzer.py": [
        {
          "line": 67,
          "content": "def analyze_image_analysis_usage(self) -> Dict[str, Any]:"
        },
        {
          "line": 71,
          "content": "img_dir = self.root_path / \"services\" / \"image_analysis\""
        },
        {
          "line": 90,
          "content": "if re.search(r'from.*image_analysis|import.*image_analysis', line, re.IGNORECASE):"
        },
        {
          "line": 97,
          "content": "if re.search(r'image_analysis|property_document_parser|analyze_property_document', line, re.IGNORECASE):"
        },
        {
          "line": 107,
          "content": "\"image_analysis_files\": [str(f.relative_to(self.root_path)) for f in img_files],"
        },
        {
          "line": 108,
          "content": "\"image_analysis_imports\": dict(img_imports),"
        },
        {
          "line": 109,
          "content": "\"image_analysis_references\": dict(img_references),"
        },
        {
          "line": 111,
          "content": "\"files_importing_image_analysis\": len(img_imports),"
        },
        {
          "line": 112,
          "content": "\"files_referencing_image_analysis\": len(img_references)"
        },
        {
          "line": 267,
          "content": "image_analysis = self.analyze_image_analysis_usage()"
        },
        {
          "line": 280,
          "content": "\"image_analysis\": {"
        },
        {
          "line": 281,
          "content": "\"safe\": image_analysis['files_importing_image_analysis'] <= 1,  # Only the broken import"
        },
        {
          "line": 282,
          "content": "\"reason\": f\"Image analysis imported by {image_analysis['files_importing_image_analysis']} files\","
        },
        {
          "line": 283,
          "content": "\"files\": image_analysis['image_analysis_files']"
        },
        {
          "line": 306,
          "content": "\"image_analysis\": image_analysis,"
        },
        {
          "line": 334,
          "content": "print(f\"  - Files: {results['image_analysis']['total_image_files']}\")"
        },
        {
          "line": 335,
          "content": "print(f\"  - Importing files: {results['image_analysis']['files_importing_image_analysis']}\")"
        },
        {
          "line": 336,
          "content": "print(f\"  - Safe to remove: {results['removal_recommendations']['safe_to_remove']['image_analysis']['safe']}\")"
        }
      ],
      "agents/simplified/property_document_tools.py": [
        {
          "line": 15,
          "content": "from services.image_analysis.property_document_parser import ("
        },
        {
          "line": 16,
          "content": "get_property_document_parser,"
        },
        {
          "line": 18,
          "content": "analyze_property_document_image"
        },
        {
          "line": 24,
          "content": "async def analyze_property_document_tool_async("
        }
      ],
      "agents/core/property_tax_assistant_v3.py": [
        {
          "line": 79,
          "content": "analyze_property_document_tool,"
        },
        {
          "line": 259,
          "content": "# This is handled automatically by the analyze_property_document_tool"
        },
        {
          "line": 295,
          "content": "analyze_property_document_tool,"
        },
        {
          "line": 339,
          "content": "- IMMEDIATELY call analyze_property_document_tool with the document data"
        },
        {
          "line": 428,
          "content": "1. **Property Document Received** \u2192 analyze_property_document_tool \u2192 format results naturally \u2192 confirm_property_assessment_booking"
        }
      ]
    },
    "total_image_files": 1,
    "files_importing_image_analysis": 2,
    "files_referencing_image_analysis": 4
  },
  "instagram_analysis": {
    "instagram_files": [
      "services/ticket_management/webhook_interceptor.py",
      "services/messaging/message_batching.py",
      "security/audit/vulnerability_scanner.py",
      "agents/simplified/ticket_tools.py",
      "agents/core/property_tax_assistant_v3.py",
      "scripts/test_intelligent_booking.py",
      "services/payments/razorpay_integration.py",
      "src/api/business_webhooks.py",
      "services/communication/message_handler.py",
      "scripts/test-workflow.py",
      "services/messaging/whatsapp_image_handler.py",
      "tests/run_tests.py",
      "services/messaging/whatsapp_client.py",
      "services/knowledge_base/legal_text_cleaner.py",
      "services/ticket_management/models.py",
      "scripts/detailed_usage_analyzer.py",
      "tests/conftest.py",
      "demo/environment/demo_reset_manager.py",
      "config/security_policies.py",
      "services/persistence/database.py",
      "services/ticket_management/ticket_service.py",
      "services/persistence/order_storage.py",
      "demo/environment/demo_configuration.py",
      "scripts/dependency_analyzer.py",
      "services/persistence/repositories.py",
      "scripts/validate-workflow.py",
      "services/messaging/modern_integrated_webhook_handler.py",
      "agents/simplified/enhanced_workflow_tools.py",
      "services/payments/mock_razorpay.py",
      "scripts/cleanup/clear-user-redis.py",
      "scripts/test-mock-payment.py",
      "services/data_acquisition/county_appraisal_scraper.py",
      "services/voice/property_tax_voice_agent.py"
    ],
    "instagram_references": {
      "scripts/validate-workflow.py": [
        {
          "line": 108,
          "content": "\"User sends message\": \"\u2705 Instagram webhook handler\","
        },
        {
          "line": 167,
          "content": "(\"CustomerProfile\", \"Customer data with Instagram ID, medical history\"),"
        },
        {
          "line": 253,
          "content": "print(\"  4. Set up Instagram webhook verification\")"
        }
      ],
      "scripts/test-workflow.py": [
        {
          "line": 79,
          "content": "instagram_id=\"test_user_workflow\","
        },
        {
          "line": 138,
          "content": "instagram_id=\"test_user_workflow\""
        },
        {
          "line": 168,
          "content": "instagram_id=\"test_user_workflow\","
        }
      ],
      "scripts/dependency_analyzer.py": [
        {
          "line": 153,
          "content": "\"voice\", \"image_analysis\", \"instagram\", \"medical\", \"krishna\""
        }
      ],
      "scripts/test-mock-payment.py": [
        {
          "line": 55,
          "content": "\"instagram_id\": \"test_user_mock\""
        },
        {
          "line": 68,
          "content": "\"instagram_id\": \"test_user_mock\""
        }
      ],
      "scripts/detailed_usage_analyzer.py": [
        {
          "line": 4,
          "content": "Focuses on voice, image analysis, Instagram code, and unused dependencies."
        },
        {
          "line": 115,
          "content": "def analyze_instagram_code(self) -> Dict[str, Any]:"
        },
        {
          "line": 116,
          "content": "\"\"\"Analyze Instagram-related code and usage patterns.\"\"\""
        },
        {
          "line": 117,
          "content": "print(\"Analyzing Instagram-related code...\")"
        },
        {
          "line": 119,
          "content": "instagram_references = defaultdict(list)"
        },
        {
          "line": 120,
          "content": "instagram_files = set()"
        },
        {
          "line": 122,
          "content": "# Search all Python files for Instagram-related code"
        },
        {
          "line": 130,
          "content": "has_instagram = False"
        },
        {
          "line": 132,
          "content": "if re.search(r'instagram|meta.*api|ig_|fb_|facebook', line, re.IGNORECASE):"
        },
        {
          "line": 133,
          "content": "instagram_references[str(py_file.relative_to(self.root_path))].append({"
        },
        {
          "line": 137,
          "content": "has_instagram = True"
        },
        {
          "line": 139,
          "content": "if has_instagram:"
        },
        {
          "line": 140,
          "content": "instagram_files.add(str(py_file.relative_to(self.root_path)))"
        },
        {
          "line": 146,
          "content": "\"instagram_files\": list(instagram_files),"
        },
        {
          "line": 147,
          "content": "\"instagram_references\": dict(instagram_references),"
        },
        {
          "line": 148,
          "content": "\"total_files_with_instagram\": len(instagram_files),"
        },
        {
          "line": 149,
          "content": "\"total_instagram_references\": sum(len(refs) for refs in instagram_references.values())"
        },
        {
          "line": 268,
          "content": "instagram_analysis = self.analyze_instagram_code()"
        },
        {
          "line": 287,
          "content": "\"instagram_code\": {"
        },
        {
          "line": 288,
          "content": "\"files_count\": len(instagram_analysis['instagram_files']),"
        },
        {
          "line": 289,
          "content": "\"references\": instagram_analysis['total_instagram_references'],"
        },
        {
          "line": 290,
          "content": "\"files\": instagram_analysis['instagram_files'][:10]  # First 10 files"
        },
        {
          "line": 307,
          "content": "\"instagram_analysis\": instagram_analysis,"
        },
        {
          "line": 338,
          "content": "print(f\"\\nInstagram References:\")"
        },
        {
          "line": 339,
          "content": "print(f\"  - Files with Instagram code: {results['instagram_analysis']['total_files_with_instagram']}\")"
        },
        {
          "line": 340,
          "content": "print(f\"  - Total references: {results['instagram_analysis']['total_instagram_references']}\")"
        }
      ],
      "scripts/test_intelligent_booking.py": [
        {
          "line": 58,
          "content": "instagram_id=\"test_user_123\","
        },
        {
          "line": 112,
          "content": "instagram_id=\"test_user_123\","
        }
      ],
      "tests/run_tests.py": [
        {
          "line": 106,
          "content": "help=\"Run specific test file (e.g., test_config_generator.py)\""
        },
        {
          "line": 120,
          "content": "help=\"Run specific test function (e.g., test_config_generator.py::TestConfigurationGenerator::test_initialization)\""
        }
      ],
      "tests/conftest.py": [
        {
          "line": 14,
          "content": "from engine.generator.config_generator import ConfigurationGenerator"
        },
        {
          "line": 106,
          "content": "\"instagram\": {"
        },
        {
          "line": 116,
          "content": "def config_generator():"
        },
        {
          "line": 137,
          "content": "platform=MessagePlatform.INSTAGRAM,"
        },
        {
          "line": 221,
          "content": "- Integrate with Instagram and WhatsApp"
        },
        {
          "line": 239,
          "content": "\"instagram\": {"
        },
        {
          "line": 278,
          "content": "def config_yaml(sample_config):"
        },
        {
          "line": 283,
          "content": "def config_json(sample_config):"
        },
        {
          "line": 322,
          "content": "platform: MessagePlatform = MessagePlatform.INSTAGRAM,"
        }
      ],
      "config/security_policies.py": [
        {
          "line": 250,
          "content": "policy_id=\"CONFIG_001\","
        },
        {
          "line": 455,
          "content": "\"identify\": [\"DATA_003\", \"CONFIG_001\", \"INFRA_001\"],"
        },
        {
          "line": 459,
          "content": "\"recover\": [\"CONFIG_001\", \"INFRA_001\"]"
        },
        {
          "line": 463,
          "content": "\"availability\": [\"INFRA_001\", \"CONFIG_001\"],"
        },
        {
          "line": 465,
          "content": "\"processing_integrity\": [\"INPUT_001\", \"CONFIG_001\"],"
        }
      ],
      "security/audit/vulnerability_scanner.py": [
        {
          "line": 128,
          "content": "INSECURE_CONFIG_PATTERNS = ["
        },
        {
          "line": 164,
          "content": "config_files = await self._find_files(directory_path, \"*.ini\", \"*.conf\", \"*.yaml\", \"*.yml\", \"*.json\")"
        },
        {
          "line": 165,
          "content": "for file_path in config_files:"
        },
        {
          "line": 166,
          "content": "file_vulns = await self._scan_config_file(file_path)"
        },
        {
          "line": 207,
          "content": "config_vulns = self._check_insecure_configurations(content, file_path)"
        },
        {
          "line": 208,
          "content": "vulnerabilities.extend(config_vulns)"
        },
        {
          "line": 236,
          "content": "async def _scan_config_file(self, file_path: str) -> List[Vulnerability]:"
        },
        {
          "line": 359,
          "content": "for pattern in self.patterns.INSECURE_CONFIG_PATTERNS:"
        },
        {
          "line": 364,
          "content": "vuln_id=f\"CONFIG_{hashlib.md5(f'{file_path}_{line_num}'.encode()).hexdigest()[:8]}\","
        }
      ],
      "agents/simplified/ticket_tools.py": [
        {
          "line": 17,
          "content": "instagram_id: str = Field(description=\"Customer's Instagram ID\")"
        },
        {
          "line": 28,
          "content": "instagram_id: str,"
        },
        {
          "line": 41,
          "content": "instagram_id: Customer's Instagram ID"
        },
        {
          "line": 73,
          "content": "instagram_id=instagram_id,"
        },
        {
          "line": 89,
          "content": "sender_id=instagram_id,"
        },
        {
          "line": 119,
          "content": "instagram_id: str,"
        },
        {
          "line": 137,
          "content": "instagram_id=instagram_id,"
        },
        {
          "line": 168,
          "content": "instagram_id: str = Field(description=\"Customer's Instagram ID\")"
        },
        {
          "line": 173,
          "content": "instagram_id: str,"
        },
        {
          "line": 180,
          "content": "instagram_id: Customer's Instagram ID"
        },
        {
          "line": 193,
          "content": "active_ticket = await ticket_service.check_active_ticket(instagram_id)"
        },
        {
          "line": 208,
          "content": "if ticket and ticket.instagram_id == instagram_id:"
        },
        {
          "line": 233,
          "content": "instagram_id: str,"
        },
        {
          "line": 245,
          "content": "instagram_id=instagram_id,"
        }
      ],
      "agents/simplified/enhanced_workflow_tools.py": [
        {
          "line": 447,
          "content": "instagram_id: str,"
        },
        {
          "line": 463,
          "content": "instagram_id: str,"
        },
        {
          "line": 640,
          "content": "instagram_id=instagram_id,"
        },
        {
          "line": 723,
          "content": "\"instagram_id\": instagram_id,"
        },
        {
          "line": 764,
          "content": "\"customer_id\": instagram_id,"
        },
        {
          "line": 795,
          "content": "\"instagram_id\": instagram_id,"
        },
        {
          "line": 846,
          "content": "instagram_id: str,"
        },
        {
          "line": 861,
          "content": "instagram_id=instagram_id,"
        },
        {
          "line": 888,
          "content": "instagram_id: str = None,"
        },
        {
          "line": 903,
          "content": "instagram_id: Customer Instagram ID for confirmation messages (optional)"
        },
        {
          "line": 954,
          "content": "\"instagram_id\": instagram_id,"
        },
        {
          "line": 1108,
          "content": "instagram_id: str"
        },
        {
          "line": 1115,
          "content": "instagram_id: Customer's Instagram ID"
        },
        {
          "line": 1125,
          "content": "customer = await customer_repo.get_by_instagram_id(instagram_id)"
        },
        {
          "line": 1183,
          "content": "instagram_id: str,"
        },
        {
          "line": 1196,
          "content": "instagram_id: Customer's Instagram ID for order verification and communication"
        },
        {
          "line": 1277,
          "content": "instagram_id: str,"
        },
        {
          "line": 1288,
          "content": "instagram_id: Customer's Instagram ID for verification"
        },
        {
          "line": 1296,
          "content": "logger.info(f\"ANTI-FRAUD CHECK: Verifying payment claim for order {order_id} from Instagram {instagram_id}\")"
        },
        {
          "line": 1302,
          "content": "instagram_id=instagram_id"
        }
      ],
      "agents/core/property_tax_assistant_v3.py": [
        {
          "line": 114,
          "content": "# Custom tool node that automatically injects Instagram ID"
        },
        {
          "line": 116,
          "content": "\"\"\"Custom tool node that automatically injects Instagram ID from config.\"\"\""
        },
        {
          "line": 122,
          "content": "\"\"\"Execute tools with automatic Instagram ID injection.\"\"\""
        },
        {
          "line": 126,
          "content": "# Get Instagram ID from config (same as customer_id)"
        },
        {
          "line": 127,
          "content": "instagram_id = config.get(\"configurable\", {}).get(\"customer_id\")"
        },
        {
          "line": 140,
          "content": "# Automatically inject instagram_id for tools that need it"
        },
        {
          "line": 142,
          "content": "if instagram_id and \"instagram_id\" not in tool_args:"
        },
        {
          "line": 143,
          "content": "tool_args[\"instagram_id\"] = instagram_id"
        },
        {
          "line": 414,
          "content": "- Customer ID: {customer_id} (use for instagram_id parameter)"
        },
        {
          "line": 879,
          "content": "instagram_id=customer_id,"
        },
        {
          "line": 916,
          "content": "instagram_id=customer_id,"
        }
      ],
      "services/ticket_management/webhook_interceptor.py": [
        {
          "line": 39,
          "content": "async def should_intercept(self, instagram_id: str) -> Dict[str, Any]:"
        },
        {
          "line": 44,
          "content": "instagram_id: Customer's Instagram ID"
        },
        {
          "line": 53,
          "content": "active_ticket = await ticket_service.check_active_ticket(instagram_id)"
        },
        {
          "line": 58,
          "content": "instagram_id=instagram_id,"
        },
        {
          "line": 76,
          "content": "instagram_id: str,"
        },
        {
          "line": 86,
          "content": "instagram_id: Customer's Instagram ID"
        },
        {
          "line": 104,
          "content": "sender_id=instagram_id,"
        },
        {
          "line": 123,
          "content": "instagram_id=instagram_id"
        },
        {
          "line": 127,
          "content": "agent_response = await self.get_agent_response(instagram_id)"
        },
        {
          "line": 132,
          "content": "instagram_id,"
        },
        {
          "line": 142,
          "content": "async def get_agent_response(self, instagram_id: str) -> Optional[Dict[str, Any]]:"
        },
        {
          "line": 147,
          "content": "instagram_id: Customer's Instagram ID"
        },
        {
          "line": 156,
          "content": "key = f\"agent_response:{instagram_id}\""
        },
        {
          "line": 172,
          "content": "instagram_id: str,"
        },
        {
          "line": 176,
          "content": "Send pending agent response to customer via Instagram."
        },
        {
          "line": 179,
          "content": "instagram_id: Customer's Instagram ID"
        },
        {
          "line": 186,
          "content": "response_data = await self.get_agent_response(instagram_id)"
        },
        {
          "line": 192,
          "content": "instagram_id,"
        },
        {
          "line": 209,
          "content": "instagram_id=instagram_id,"
        }
      ],
      "services/ticket_management/ticket_service.py": [
        {
          "line": 47,
          "content": "instagram_id: str,"
        },
        {
          "line": 66,
          "content": "instagram_id: Customer's Instagram ID"
        },
        {
          "line": 96,
          "content": "instagram_id=instagram_id,"
        },
        {
          "line": 119,
          "content": "f\"ticket_status:{instagram_id}\","
        },
        {
          "line": 134,
          "content": "instagram_id=instagram_id,"
        },
        {
          "line": 208,
          "content": "instagram_id: str,"
        },
        {
          "line": 212,
          "content": "query = select(SupportTicket).where(SupportTicket.instagram_id == instagram_id)"
        },
        {
          "line": 253,
          "content": "f\"ticket_status:{ticket.instagram_id}\","
        },
        {
          "line": 278,
          "content": "instagram_message_id: Optional[str] = None"
        },
        {
          "line": 292,
          "content": "instagram_message_id=instagram_message_id"
        },
        {
          "line": 346,
          "content": "async def check_active_ticket(self, instagram_id: str) -> Optional[Dict[str, Any]]:"
        },
        {
          "line": 352,
          "content": "ticket_data = await self.redis_client.get(f\"ticket_status:{instagram_id}\")"
        }
      ],
      "services/ticket_management/models.py": [
        {
          "line": 53,
          "content": "instagram_id = Column(String(100), index=True, nullable=False)"
        },
        {
          "line": 96,
          "content": "\"instagram_id\": self.instagram_id,"
        },
        {
          "line": 128,
          "content": "# For tracking Instagram messages"
        },
        {
          "line": 129,
          "content": "instagram_message_id = Column(String(200))"
        },
        {
          "line": 160,
          "content": "instagram_id = Column(String(100))  # Customer's Instagram ID"
        },
        {
          "line": 179,
          "content": "\"instagram_id\": self.instagram_id,"
        }
      ],
      "services/messaging/modern_integrated_webhook_handler.py": [
        {
          "line": 107,
          "content": "instagram_id=sender_id,  # Legacy field name for compatibility"
        },
        {
          "line": 113,
          "content": "instagram_id=sender_id,"
        }
      ],
      "services/messaging/whatsapp_client.py": [
        {
          "line": 34,
          "content": "self.base_url = \"https://graph.facebook.com/v20.0\""
        }
      ],
      "services/messaging/whatsapp_image_handler.py": [
        {
          "line": 74,
          "content": "url = f\"https://graph.facebook.com/v20.0/{media_id}\""
        }
      ],
      "services/messaging/message_batching.py": [
        {
          "line": 14,
          "content": "from services.messaging.instagram_types import InstagramMessage"
        },
        {
          "line": 23,
          "content": "messages: List[InstagramMessage]"
        },
        {
          "line": 27,
          "content": "def add_message(self, message: InstagramMessage) -> None:"
        },
        {
          "line": 40,
          "content": "def get_latest_message(self) -> InstagramMessage:"
        },
        {
          "line": 45,
          "content": "combined_message = InstagramMessage("
        },
        {
          "line": 106,
          "content": "async def process_message(self, message: InstagramMessage) -> bool:"
        },
        {
          "line": 123,
          "content": "async def _handle_message_internal(self, message: InstagramMessage) -> bool:"
        },
        {
          "line": 166,
          "content": "def _should_process_immediately(self, message: InstagramMessage) -> bool:"
        },
        {
          "line": 224,
          "content": "async def _process_single_message(self, message: InstagramMessage) -> None:"
        }
      ],
      "services/data_acquisition/county_appraisal_scraper.py": [
        {
          "line": 244,
          "content": "'facebook', 'twitter', 'linkedin', 'instagram', 'youtube',"
        }
      ],
      "services/knowledge_base/legal_text_cleaner.py": [
        {
          "line": 84,
          "content": "pattern=r'(?i)(?:share on|follow us|like us|facebook|twitter|linkedin)',"
        }
      ],
      "services/communication/message_handler.py": [
        {
          "line": 3,
          "content": "Handles incoming messages from various channels (Instagram, WhatsApp, Web, etc.)"
        },
        {
          "line": 22,
          "content": "async def fetch_instagram_user_info(user_id: str) -> Dict[str, Any]:"
        },
        {
          "line": 24,
          "content": "Fetch Instagram user information using Graph API."
        },
        {
          "line": 31,
          "content": "access_token = os.getenv(\"IG_TOKEN\")"
        },
        {
          "line": 33,
          "content": "logger.warning(\"Instagram access token not configured\")"
        },
        {
          "line": 36,
          "content": "# Instagram Graph API endpoint for user info"
        },
        {
          "line": 37,
          "content": "url = f\"https://graph.instagram.com/{user_id}\""
        },
        {
          "line": 47,
          "content": "logger.info(f\"\ud83d\udcf1 Fetched Instagram user info: {user_data.get('username', 'unknown')}\")"
        },
        {
          "line": 50,
          "content": "logger.warning(f\"Failed to fetch Instagram user info: {response.status}\")"
        },
        {
          "line": 54,
          "content": "logger.error(f\"Error fetching Instagram user info: {e}\")"
        },
        {
          "line": 65,
          "content": "- Multi-channel support (Instagram, WhatsApp, Web, etc.)"
        },
        {
          "line": 91,
          "content": "settings.instagram_app_secret.encode(),"
        },
        {
          "line": 100,
          "content": "async def handle_incoming_message(self, data: Dict[str, Any], source: str = \"instagram\") -> Dict[str, str]:"
        },
        {
          "line": 130,
          "content": "def _parse_messaging_event(self, event: Dict[str, Any]) -> Optional[InstagramMessage]:"
        },
        {
          "line": 165,
          "content": "return InstagramMessage("
        },
        {
          "line": 179,
          "content": "async def _handle_batched_message(self, message: InstagramMessage, batch_info: Dict[str, Any]):"
        },
        {
          "line": 198,
          "content": "instagram_id=message.sender_id,"
        },
        {
          "line": 204,
          "content": "instagram_id=message.sender_id,"
        },
        {
          "line": 212,
          "content": "# Fetch Instagram user info on first message or if not cached"
        },
        {
          "line": 213,
          "content": "if message.sender_id not in self.sessions or 'instagram_info' not in self.sessions[message.sender_id]:"
        },
        {
          "line": 214,
          "content": "instagram_info = await fetch_instagram_user_info(message.sender_id)"
        },
        {
          "line": 216,
          "content": "self.sessions[message.sender_id]['instagram_info'] = instagram_info"
        },
        {
          "line": 217,
          "content": "logger.info(f\"\ud83d\udcf1 Stored Instagram info for user: {instagram_info.get('username', 'unknown')}\")"
        },
        {
          "line": 264,
          "content": "async def _intelligent_message_preparation(self, message: InstagramMessage) -> Optional[str]:"
        },
        {
          "line": 323,
          "content": "def _prepare_message_text(self, message: InstagramMessage) -> Optional[str]:"
        }
      ],
      "services/persistence/repositories.py": [
        {
          "line": 30,
          "content": "async def get_by_instagram_id(self, instagram_id: str) -> Optional[CustomerProfile]:"
        },
        {
          "line": 31,
          "content": "\"\"\"Get customer by Instagram ID.\"\"\""
        },
        {
          "line": 35,
          "content": ".where(CustomerProfile.instagram_id == instagram_id)"
        },
        {
          "line": 40,
          "content": "self.logger.error(f\"Failed to get customer by Instagram ID: {e}\")"
        },
        {
          "line": 57,
          "content": "instagram_id: str,"
        },
        {
          "line": 63,
          "content": "existing = await self.get_by_instagram_id(instagram_id)"
        },
        {
          "line": 77,
          "content": "self.logger.info(f\"Property tax customer updated: {instagram_id}\")"
        },
        {
          "line": 83,
          "content": "instagram_id=instagram_id,"
        },
        {
          "line": 93,
          "content": "self.logger.info(f\"Property tax customer created: {instagram_id}\")"
        },
        {
          "line": 103,
          "content": "instagram_id: str,"
        },
        {
          "line": 112,
          "content": "customer = await self.get_by_instagram_id(instagram_id)"
        },
        {
          "line": 134,
          "content": "self.logger.info(f\"Property info updated for customer: {instagram_id}\")"
        },
        {
          "line": 466,
          "content": "instagram_message_id: Optional[str] = None,"
        },
        {
          "line": 487,
          "content": "instagram_message_id=instagram_message_id,"
        }
      ],
      "services/persistence/database.py": [
        {
          "line": 117,
          "content": "instagram_id: Mapped[str] = mapped_column(String(100), unique=True, index=True, nullable=False)"
        },
        {
          "line": 134,
          "content": "preferred_contact_method: Mapped[str] = mapped_column(String(20), default=\"instagram\")  # instagram, email, phone, mail"
        },
        {
          "line": 337,
          "content": "# Instagram metadata"
        },
        {
          "line": 338,
          "content": "instagram_message_id: Mapped[Optional[str]] = mapped_column(String(100))"
        },
        {
          "line": 509,
          "content": "instagram_id: Mapped[Optional[str]] = mapped_column(String(100), index=True)  # Link to CustomerProfile if they use chat"
        }
      ],
      "services/persistence/order_storage.py": [
        {
          "line": 84,
          "content": "instagram_id = order_data.get(\"instagram_id\")"
        },
        {
          "line": 85,
          "content": "if instagram_id:"
        },
        {
          "line": 86,
          "content": "customer_key = f\"customer_orders:{instagram_id}\""
        },
        {
          "line": 164,
          "content": "def get_customer_orders(self, instagram_id: str, limit: int = 10) -> list:"
        },
        {
          "line": 169,
          "content": "instagram_id: Customer's Instagram ID"
        },
        {
          "line": 179,
          "content": "customer_key = f\"customer_orders:{instagram_id}\""
        },
        {
          "line": 222,
          "content": "instagram_id=order_data.get(\"instagram_id\"),"
        }
      ],
      "services/voice/property_tax_voice_agent.py": [
        {
          "line": 389,
          "content": "instagram_id=f\"voice_customer_{phone}\","
        },
        {
          "line": 409,
          "content": "\"instagram_id\": f\"voice_customer_{phone}\","
        },
        {
          "line": 418,
          "content": "\"instagram_id\": f\"voice_customer_{phone}\","
        }
      ],
      "services/payments/mock_razorpay.py": [
        {
          "line": 291,
          "content": "instagram_id: Optional[str] = None"
        },
        {
          "line": 299,
          "content": "instagram_id: Customer's Instagram ID"
        }
      ],
      "services/payments/razorpay_integration.py": [
        {
          "line": 426,
          "content": "instagram_id: str = None"
        },
        {
          "line": 434,
          "content": "instagram_id: Customer's Instagram ID for verification"
        },
        {
          "line": 444,
          "content": "params = {\"order_id\": order_id, \"instagram_id\": instagram_id}"
        },
        {
          "line": 456,
          "content": "if instagram_id:"
        },
        {
          "line": 457,
          "content": "customer = await customer_repo.get_by_instagram_id(instagram_id)"
        }
      ],
      "src/api/business_webhooks.py": [
        {
          "line": 28,
          "content": "Supports Instagram, WhatsApp, and other messaging platforms."
        }
      ],
      "demo/environment/demo_configuration.py": [
        {
          "line": 60,
          "content": "self._config_file_path = Path(\"config/demo_config.json\")"
        },
        {
          "line": 289,
          "content": "config_data = {"
        },
        {
          "line": 297,
          "content": "self._config_file_path.parent.mkdir(exist_ok=True)"
        },
        {
          "line": 298,
          "content": "with open(self._config_file_path, 'w') as f:"
        },
        {
          "line": 299,
          "content": "json.dump(config_data, f, indent=2)"
        },
        {
          "line": 317,
          "content": "def import_demo_config(self, config_data: Dict[str, Any]) -> bool:"
        },
        {
          "line": 320,
          "content": "if \"demo_settings\" in config_data:"
        },
        {
          "line": 321,
          "content": "self.demo_settings = DemoSettings(**config_data[\"demo_settings\"])"
        },
        {
          "line": 323,
          "content": "if \"scenario_configs\" in config_data:"
        },
        {
          "line": 326,
          "content": "for scenario_id, config in config_data[\"scenario_configs\"].items()"
        },
        {
          "line": 329,
          "content": "if \"performance_targets\" in config_data:"
        },
        {
          "line": 330,
          "content": "self.performance_targets = DemoPerformanceTargets(**config_data[\"performance_targets\"])"
        }
      ],
      "demo/environment/demo_reset_manager.py": [
        {
          "line": 481,
          "content": "config_validation = self.config.validate_demo_environment()"
        },
        {
          "line": 482,
          "content": "if not config_validation[\"valid\"]:"
        },
        {
          "line": 483,
          "content": "validation[\"issues\"].extend(config_validation[\"errors\"])"
        }
      ],
      "scripts/cleanup/clear-user-redis.py": [
        {
          "line": 68,
          "content": "parser.add_argument(\"user_id\", help=\"User ID to clear (e.g., Instagram ID)\")"
        }
      ]
    },
    "total_files_with_instagram": 33,
    "total_instagram_references": 237
  },
  "medical_analysis": {
    "medical_files": [
      "services/voice/livekit_data_bridge.py",
      "src/api/whatsapp_webhooks.py",
      "mock_data/demo_customer_personas.py",
      "security/audit/vulnerability_scanner.py",
      "agents/simplified/property_document_tools.py",
      "agents/core/guardrails.py",
      "demo/scenarios/assessment_appeal_scenarios.py",
      "src/api/business_webhooks.py",
      "scripts/test-workflow.py",
      "services/messaging/whatsapp_image_handler.py",
      "services/voice/voice_chat_state.py",
      "testing/performance/stress_testing_framework.py",
      "src/main.py",
      "scripts/detailed_usage_analyzer.py",
      "services/voice/voice_setup.py",
      "services/persistence/database.py",
      "mock_data/tax_rates.py",
      "config/response_templates.py",
      "scripts/dependency_analyzer.py",
      "scripts/validate-workflow.py",
      "agents/simplified/enhanced_workflow_tools.py",
      "src/api/integrated_webhooks.py"
    ],
    "medical_references": {
      "scripts/validate-workflow.py": [
        {
          "line": 167,
          "content": "(\"CustomerProfile\", \"Customer data with Instagram ID, medical history\"),",
          "keyword": "medical"
        },
        {
          "line": 196,
          "content": "\"\u2705 Medical disclaimer in system prompts\",",
          "keyword": "medical"
        },
        {
          "line": 197,
          "content": "\"\u2705 No diagnosis or medical interpretation\",",
          "keyword": "medical"
        },
        {
          "line": 197,
          "content": "\"\u2705 No diagnosis or medical interpretation\",",
          "keyword": "diagnosis"
        }
      ],
      "scripts/test-workflow.py": [
        {
          "line": 66,
          "content": "# Test women's health",
          "keyword": "health"
        },
        {
          "line": 67,
          "content": "result = await suggest_advanced_test_panel(\"health checkup\", age=35, gender=\"female\")",
          "keyword": "health"
        },
        {
          "line": 71,
          "content": "print(f\"  \u2705 Women's health: {result['panel_name']} - \u20b9{result['discounted_price']}\")",
          "keyword": "health"
        }
      ],
      "scripts/dependency_analyzer.py": [
        {
          "line": 153,
          "content": "\"voice\", \"image_analysis\", \"instagram\", \"medical\", \"krishna\"",
          "keyword": "medical"
        },
        {
          "line": 153,
          "content": "\"voice\", \"image_analysis\", \"instagram\", \"medical\", \"krishna\"",
          "keyword": "krishna"
        }
      ],
      "scripts/detailed_usage_analyzer.py": [
        {
          "line": 153,
          "content": "\"\"\"Analyze medical/Krishna Diagnostics remnants.\"\"\"",
          "keyword": "medical"
        },
        {
          "line": 153,
          "content": "\"\"\"Analyze medical/Krishna Diagnostics remnants.\"\"\"",
          "keyword": "krishna"
        },
        {
          "line": 154,
          "content": "print(\"Analyzing medical/Krishna Diagnostics remnants...\")",
          "keyword": "medical"
        },
        {
          "line": 154,
          "content": "print(\"Analyzing medical/Krishna Diagnostics remnants...\")",
          "keyword": "krishna"
        },
        {
          "line": 160,
          "content": "'medical', 'doctor', 'patient', 'diagnosis', 'krishna', 'diagnostic',",
          "keyword": "medical"
        },
        {
          "line": 160,
          "content": "'medical', 'doctor', 'patient', 'diagnosis', 'krishna', 'diagnostic',",
          "keyword": "doctor"
        },
        {
          "line": 160,
          "content": "'medical', 'doctor', 'patient', 'diagnosis', 'krishna', 'diagnostic',",
          "keyword": "patient"
        },
        {
          "line": 160,
          "content": "'medical', 'doctor', 'patient', 'diagnosis', 'krishna', 'diagnostic',",
          "keyword": "diagnosis"
        },
        {
          "line": 160,
          "content": "'medical', 'doctor', 'patient', 'diagnosis', 'krishna', 'diagnostic',",
          "keyword": "krishna"
        },
        {
          "line": 160,
          "content": "'medical', 'doctor', 'patient', 'diagnosis', 'krishna', 'diagnostic',",
          "keyword": "diagnostic"
        },
        {
          "line": 161,
          "content": "'health', 'clinic', 'hospital', 'prescription', 'medicine'",
          "keyword": "health"
        },
        {
          "line": 161,
          "content": "'health', 'clinic', 'hospital', 'prescription', 'medicine'",
          "keyword": "clinic"
        },
        {
          "line": 161,
          "content": "'health', 'clinic', 'hospital', 'prescription', 'medicine'",
          "keyword": "hospital"
        },
        {
          "line": 161,
          "content": "'health', 'clinic', 'hospital', 'prescription', 'medicine'",
          "keyword": "prescription"
        },
        {
          "line": 161,
          "content": "'health', 'clinic', 'hospital', 'prescription', 'medicine'",
          "keyword": "medicine"
        },
        {
          "line": 164,
          "content": "# Search all Python files for medical-related code",
          "keyword": "medical"
        },
        {
          "line": 343,
          "content": "print(f\"  - Files with medical code: {results['medical_analysis']['total_files_with_medical']}\")",
          "keyword": "medical"
        }
      ],
      "config/response_templates.py": [
        {
          "line": 104,
          "content": "\"disability\": \"Disabled persons may qualify for exemptions similar to senior citizens. You'll need documentation from a qualified physician. The application process includes medical verification and annual certification.\",",
          "keyword": "medical"
        }
      ],
      "src/main.py": [
        {
          "line": 136,
          "content": "\"health_check\": \"GET /health\"",
          "keyword": "health"
        },
        {
          "line": 211,
          "content": "logger.info(\"   GET  /health - Health check with statistics\")",
          "keyword": "health"
        }
      ],
      "mock_data/tax_rates.py": [
        {
          "line": 189,
          "content": "\"central_health\": {\"name\": \"Central Health\", \"rate\": 0.007789}",
          "keyword": "health"
        }
      ],
      "mock_data/demo_customer_personas.py": [
        {
          "line": 311,
          "content": "background_story=\"Mary is a retired teacher living on a fixed income. She's lived in her home for nearly 40 years and sometimes struggles with technology. She needs patient, clear explanations and traditional service options.\",",
          "keyword": "patient"
        },
        {
          "line": 321,
          "content": "\"Appreciates patient, respectful service\",",
          "keyword": "patient"
        }
      ],
      "security/audit/vulnerability_scanner.py": [
        {
          "line": 663,
          "content": "async with session.get(f\"{self.base_url}/api/health\") as response:",
          "keyword": "health"
        }
      ],
      "agents/simplified/property_document_tools.py": [
        {
          "line": 57,
          "content": "# Analyze prescription image using Gemini-2.5-Pro",
          "keyword": "prescription"
        },
        {
          "line": 82,
          "content": "\"message\": f\"I found {len(prescription_data.prescribed_tests)} tests in your prescription. Let me help you book these tests.\",",
          "keyword": "prescription"
        },
        {
          "line": 103,
          "content": "\"message\": f\"I could identify {len(prescription_data.prescribed_tests)} tests from your prescription, but I need some additional information to complete the booking.\",",
          "keyword": "prescription"
        },
        {
          "line": 120,
          "content": "\"message\": f\"I found some tests ({', '.join(prescription_data.prescribed_tests[:3])}) in your prescription, but the image quality makes it difficult to read all details. Could you help me confirm the information?\",",
          "keyword": "prescription"
        },
        {
          "line": 131,
          "content": "\"message\": \"I couldn't identify any diagnostic tests in this prescription. This might be because the image is unclear, or it contains only medications. Could you either upload a clearer image or tell me which tests you'd like to book?\",",
          "keyword": "diagnostic"
        },
        {
          "line": 131,
          "content": "\"message\": \"I couldn't identify any diagnostic tests in this prescription. This might be because the image is unclear, or it contains only medications. Could you either upload a clearer image or tell me which tests you'd like to book?\",",
          "keyword": "prescription"
        },
        {
          "line": 132,
          "content": "\"user_friendly_error\": \"Unable to read prescription clearly\",",
          "keyword": "prescription"
        },
        {
          "line": 137,
          "content": "logger.error(\"\u274c Prescription image analysis failed\", error=str(e), customer_id=customer_id)",
          "keyword": "prescription"
        },
        {
          "line": 141,
          "content": "\"message\": \"I'm having trouble analyzing your prescription image right now. Could you please tell me which tests you'd like to book, or try uploading the image again?\",",
          "keyword": "prescription"
        },
        {
          "line": 153,
          "content": "Synchronous wrapper for prescription image analysis.",
          "keyword": "prescription"
        },
        {
          "line": 161,
          "content": "Structured prescription data with extracted information",
          "keyword": "prescription"
        },
        {
          "line": 206,
          "content": "description=\"Analyze prescription image and extract medical test information using Gemini-2.5-Pro vision model. Returns structured data with patient info, prescribed tests, doctor details, and confidence score.\"",
          "keyword": "medical"
        },
        {
          "line": 206,
          "content": "description=\"Analyze prescription image and extract medical test information using Gemini-2.5-Pro vision model. Returns structured data with patient info, prescribed tests, doctor details, and confidence score.\"",
          "keyword": "doctor"
        },
        {
          "line": 206,
          "content": "description=\"Analyze prescription image and extract medical test information using Gemini-2.5-Pro vision model. Returns structured data with patient info, prescribed tests, doctor details, and confidence score.\"",
          "keyword": "patient"
        },
        {
          "line": 206,
          "content": "description=\"Analyze prescription image and extract medical test information using Gemini-2.5-Pro vision model. Returns structured data with patient info, prescribed tests, doctor details, and confidence score.\"",
          "keyword": "prescription"
        },
        {
          "line": 217,
          "content": "Process user confirmation for prescription-based booking.",
          "keyword": "prescription"
        },
        {
          "line": 220,
          "content": "prescription_data: Extracted prescription information",
          "keyword": "prescription"
        },
        {
          "line": 228,
          "content": "logger.info(\"\ud83d\udccb Processing prescription booking confirmation\")",
          "keyword": "prescription"
        },
        {
          "line": 276,
          "content": "logger.error(\"Error processing prescription booking confirmation\", error=str(e))",
          "keyword": "prescription"
        },
        {
          "line": 286,
          "content": "# The LLM can naturally format prescription data based on the raw prescription_data dict",
          "keyword": "prescription"
        },
        {
          "line": 292,
          "content": "\"\"\"Create prescription-specific tools for the healthcare assistant workflow.\"\"\"",
          "keyword": "prescription"
        }
      ],
      "agents/simplified/enhanced_workflow_tools.py": [
        {
          "line": 300,
          "content": "search_terms = [\"blood test\", \"health checkup\", \"basic health\", \"comprehensive\"]",
          "keyword": "health"
        },
        {
          "line": 372,
          "content": "elif gender and gender.lower() in [\"female\", \"woman\", \"f\"] and any(word in condition_lower for word in [\"health check\", \"checkup\", \"screening\", \"women\", \"blood test\"]):",
          "keyword": "health"
        },
        {
          "line": 374,
          "content": "elif gender and gender.lower() in [\"male\", \"man\", \"m\"] and any(word in condition_lower for word in [\"health check\", \"checkup\", \"screening\", \"men\", \"blood test\"]):",
          "keyword": "health"
        },
        {
          "line": 376,
          "content": "elif any(word in condition_lower for word in [\"health check\", \"checkup\", \"screening\", \"blood test\", \"general\"]):",
          "keyword": "health"
        },
        {
          "line": 403,
          "content": "\"message\": \"Let me help you find the right tests. Could you provide more details about your symptoms or what specific health concerns you have?\",",
          "keyword": "health"
        },
        {
          "line": 404,
          "content": "\"suggestion\": \"You can also opt for our general health checkup packages.\"",
          "keyword": "health"
        },
        {
          "line": 526,
          "content": "# Prescription test mappings",
          "keyword": "prescription"
        },
        {
          "line": 945,
          "content": "\"description\": f\"Krsnaa Diagnostics - Medical Tests for Order {order_id}\",",
          "keyword": "medical"
        },
        {
          "line": 1017,
          "content": "patient_name: Patient name (optional for verification)",
          "keyword": "patient"
        },
        {
          "line": 1187,
          "content": "Schedule home sample collection appointment for confirmed medical test orders.",
          "keyword": "medical"
        }
      ],
      "agents/core/guardrails.py": [
        {
          "line": 93,
          "content": "r'\\b(medical|health|diagnosis|treatment)\\b',",
          "keyword": "medical"
        },
        {
          "line": 93,
          "content": "r'\\b(medical|health|diagnosis|treatment)\\b',",
          "keyword": "diagnosis"
        },
        {
          "line": 93,
          "content": "r'\\b(medical|health|diagnosis|treatment)\\b',",
          "keyword": "health"
        }
      ],
      "services/messaging/whatsapp_image_handler.py": [
        {
          "line": 16,
          "content": "\"\"\"Handle WhatsApp image messages for prescription analysis.\"\"\"",
          "keyword": "prescription"
        },
        {
          "line": 114,
          "content": "# Basic validation - ensure it's a reasonable size for prescription",
          "keyword": "prescription"
        },
        {
          "line": 150,
          "content": "Process WhatsApp image message and return image data if it's likely a prescription.",
          "keyword": "prescription"
        },
        {
          "line": 156,
          "content": "Tuple of (image_bytes, image_format) for prescription analysis",
          "keyword": "prescription"
        },
        {
          "line": 163,
          "content": "# Process any image - let the AI determine if it's a prescription",
          "keyword": "prescription"
        },
        {
          "line": 176,
          "content": "Basic heuristic to determine if image might be a prescription.",
          "keyword": "prescription"
        },
        {
          "line": 181,
          "content": "if len(image_data) < 10000:  # Less than 10KB probably not a prescription",
          "keyword": "prescription"
        },
        {
          "line": 207,
          "content": "logger.info(\"\ud83d\udcf7 Created WhatsApp image handler for prescription processing\")",
          "keyword": "prescription"
        }
      ],
      "services/persistence/database.py": [
        {
          "line": 879,
          "content": "self.logger.error(f\"Database health check failed: {e}\")",
          "keyword": "health"
        }
      ],
      "services/voice/voice_setup.py": [
        {
          "line": 2,
          "content": "Krishna Diagnostics Voice Agent Setup and Deployment Script",
          "keyword": "krishna"
        },
        {
          "line": 25,
          "content": "Setup and management utilities for Krishna Diagnostics voice integration.",
          "keyword": "krishna"
        },
        {
          "line": 48,
          "content": "room_name = f\"krishna-{room_type}-{customer_phone}-{timestamp}\"",
          "keyword": "krishna"
        },
        {
          "line": 56,
          "content": "max_participants=10,  # Support for family/doctor consultations",
          "keyword": "doctor"
        },
        {
          "line": 119,
          "content": "'sip_endpoint': f\"sip:krishna-voice@{voice_config.LIVEKIT_URL}\",",
          "keyword": "krishna"
        },
        {
          "line": 143,
          "content": "if room.name.startswith('krishna-'):",
          "keyword": "krishna"
        },
        {
          "line": 221,
          "content": "response = model.generate_content(\"Say 'Krishna Diagnostics voice agent test successful'\")",
          "keyword": "krishna"
        },
        {
          "line": 249,
          "content": "\"\"\"Deploy the Krishna Diagnostics voice agent.\"\"\"",
          "keyword": "krishna"
        },
        {
          "line": 251,
          "content": "logger.info(\"Deploying Krishna Diagnostics Voice Agent...\")",
          "keyword": "krishna"
        },
        {
          "line": 264,
          "content": "# 3. Setup monitoring and health checks",
          "keyword": "health"
        },
        {
          "line": 284,
          "content": "'health_check': '/api/voice/health'",
          "keyword": "health"
        },
        {
          "line": 300,
          "content": "parser = argparse.ArgumentParser(description='Krishna Diagnostics Voice Agent Setup')",
          "keyword": "krishna"
        }
      ],
      "services/voice/livekit_data_bridge.py": [
        {
          "line": 24,
          "content": "\"\"\"Structured message for prescription data\"\"\"",
          "keyword": "prescription"
        },
        {
          "line": 78,
          "content": "Send prescription analysis results directly to voice agent via LiveKit data stream.",
          "keyword": "prescription"
        },
        {
          "line": 112,
          "content": "# Create prescription message",
          "keyword": "prescription"
        },
        {
          "line": 128,
          "content": "logger.info(f\"\u2705 Sent prescription data to voice room {room_name} for {phone_number[:5]}***\")",
          "keyword": "prescription"
        },
        {
          "line": 132,
          "content": "logger.error(f\"\u274c Failed to send prescription data via LiveKit: {e}\")",
          "keyword": "prescription"
        },
        {
          "line": 141,
          "content": "\"\"\"Send prescription analysis failure to voice agent\"\"\"",
          "keyword": "prescription"
        },
        {
          "line": 161,
          "content": "logger.info(f\"\u2705 Sent prescription failure to voice room {room_name} for {phone_number[:5]}***\")",
          "keyword": "prescription"
        },
        {
          "line": 165,
          "content": "logger.error(f\"\u274c Failed to send prescription failure via LiveKit: {e}\")",
          "keyword": "prescription"
        },
        {
          "line": 174,
          "content": "\"\"\"Send prescription processing status update to voice agent\"\"\"",
          "keyword": "prescription"
        },
        {
          "line": 253,
          "content": "Convenience function to notify voice agent that prescription is ready.",
          "keyword": "prescription"
        },
        {
          "line": 266,
          "content": "\"\"\"Convenience function to notify voice agent of prescription analysis failure\"\"\"",
          "keyword": "prescription"
        }
      ],
      "services/voice/voice_chat_state.py": [
        {
          "line": 3,
          "content": "Manages shared state between voice calls and chat system for prescription image processing.",
          "keyword": "prescription"
        },
        {
          "line": 25,
          "content": "# Prescription data TTL (Time To Live) - expires after 2 hours",
          "keyword": "prescription"
        },
        {
          "line": 95,
          "content": "\"\"\"Request prescription image via WhatsApp and update state.\"\"\"",
          "keyword": "prescription"
        },
        {
          "line": 117,
          "content": "prescription_message = \"\"\"\ud83d\udccb Hi! I'm Maya from Krishna Diagnostics.",
          "keyword": "krishna"
        },
        {
          "line": 119,
          "content": "You requested help with a prescription during our voice call. Please send me a clear photo of your prescription here, and I'll analyze it for you.",
          "keyword": "prescription"
        },
        {
          "line": 121,
          "content": "Make sure the prescription is clearly visible with:",
          "keyword": "prescription"
        },
        {
          "line": 122,
          "content": "\u2705 Doctor's name and signature",
          "keyword": "doctor"
        },
        {
          "line": 123,
          "content": "\u2705 Patient details",
          "keyword": "patient"
        },
        {
          "line": 125,
          "content": "\u2705 Date of prescription",
          "keyword": "prescription"
        },
        {
          "line": 136,
          "content": "logger.info(f\"\ud83d\udcf1 Prescription request sent via WhatsApp to {customer_phone[:5]}***\")",
          "keyword": "prescription"
        },
        {
          "line": 139,
          "content": "\"message\": \"I've sent you a WhatsApp message. Please check your phone and send me the prescription image there. I'll wait here while you do that.\",",
          "keyword": "prescription"
        },
        {
          "line": 151,
          "content": "\"message\": \"Your phone number isn't set up for WhatsApp messaging in our test system yet. No worries! Please describe your prescription details to me verbally instead - I can help you just as well.\",",
          "keyword": "prescription"
        },
        {
          "line": 159,
          "content": "\"message\": \"I'm having trouble sending the WhatsApp message right now. Could you please tell me the prescription details verbally instead?\",",
          "keyword": "prescription"
        },
        {
          "line": 167,
          "content": "\"message\": \"I'm unable to send WhatsApp messages right now. Could you please describe the prescription details to me verbally?\",",
          "keyword": "prescription"
        },
        {
          "line": 172,
          "content": "logger.error(f\"Failed to request prescription via WhatsApp: {e}\")",
          "keyword": "prescription"
        },
        {
          "line": 175,
          "content": "\"message\": \"I'm having technical difficulties. Could you please describe the prescription details verbally instead?\",",
          "keyword": "prescription"
        },
        {
          "line": 186,
          "content": "\"\"\"Set prescription processing status (pending, processing, completed, failed).\"\"\"",
          "keyword": "prescription"
        },
        {
          "line": 194,
          "content": "# Always overwrite previous prescription status",
          "keyword": "prescription"
        },
        {
          "line": 201,
          "content": "# Store prescription data with TTL if provided (overwrites previous data)",
          "keyword": "prescription"
        },
        {
          "line": 206,
          "content": "# Log prescription overwrite if there was previous data",
          "keyword": "prescription"
        },
        {
          "line": 210,
          "content": "logger.info(f\"\ud83d\udd04 Overwriting prescription data for {customer_phone[:5]}***: {old_patient} \u2192 {new_patient}\")",
          "keyword": "prescription"
        },
        {
          "line": 212,
          "content": "# Set TTL based on prescription data presence",
          "keyword": "prescription"
        },
        {
          "line": 221,
          "content": "logger.info(f\"\ud83d\udcca Prescription status updated for {customer_phone[:5]}***: {status} (TTL: {ttl}s)\")",
          "keyword": "prescription"
        },
        {
          "line": 225,
          "content": "logger.error(f\"Failed to set prescription status: {e}\")",
          "keyword": "prescription"
        },
        {
          "line": 229,
          "content": "\"\"\"Get current prescription processing status with TTL expiry check from actual Redis schema.\"\"\"",
          "keyword": "prescription"
        },
        {
          "line": 237,
          "content": "logger.info(f\"\ud83d\udd0d Looking for prescription in Redis key: {context_key}\")",
          "keyword": "prescription"
        },
        {
          "line": 248,
          "content": "logger.info(f\"\u2705 Found prescription data for {prescription_data.get('patient_name', 'Unknown')} in Redis\")",
          "keyword": "prescription"
        },
        {
          "line": 250,
          "content": "# Check if prescription data has expired (TTL check)",
          "keyword": "prescription"
        },
        {
          "line": 260,
          "content": "# Prescription data expired",
          "keyword": "prescription"
        },
        {
          "line": 261,
          "content": "logger.info(f\"\u23f0 Prescription data expired for {customer_phone[:5]}*** (age: {age_seconds:.0f}s > {self.prescription_ttl_seconds}s)\")",
          "keyword": "prescription"
        },
        {
          "line": 268,
          "content": "\"message\": \"Prescription data has expired. Please send a new prescription.\",",
          "keyword": "prescription"
        },
        {
          "line": 274,
          "content": "logger.error(f\"Error checking prescription TTL: {e}\")",
          "keyword": "prescription"
        },
        {
          "line": 295,
          "content": "logger.info(f\"\u2705 Found prescription data in voice call state for {prescription_data.get('patient_name', 'Unknown')}\")",
          "keyword": "prescription"
        },
        {
          "line": 304,
          "content": "logger.info(f\"\u274c No prescription data found for {customer_phone[:5]}*** in Redis\")",
          "keyword": "prescription"
        },
        {
          "line": 308,
          "content": "logger.error(f\"Failed to get prescription status: {e}\")",
          "keyword": "prescription"
        },
        {
          "line": 316,
          "content": "\"\"\"Save prescription analysis results for voice call with overwriting and TTL.\"\"\"",
          "keyword": "prescription"
        },
        {
          "line": 320,
          "content": "# Update voice call state with prescription context",
          "keyword": "prescription"
        },
        {
          "line": 325,
          "content": "# Check if overwriting existing prescription data",
          "keyword": "prescription"
        },
        {
          "line": 330,
          "content": "logger.info(f\"\ud83d\udd04 Overwriting prescription context for {customer_phone[:5]}***: {old_patient} \u2192 {new_patient}\")",
          "keyword": "prescription"
        },
        {
          "line": 332,
          "content": "# Save new prescription data (overwrites any existing data)",
          "keyword": "prescription"
        },
        {
          "line": 342,
          "content": "# Set prescription TTL",
          "keyword": "prescription"
        },
        {
          "line": 350,
          "content": "logger.info(f\"\ud83d\udcbe Prescription context saved for voice call {customer_phone[:5]}*** ({patient_name}, TTL: {self.prescription_ttl_seconds}s)\")",
          "keyword": "prescription"
        },
        {
          "line": 355,
          "content": "logger.error(f\"Failed to save prescription context: {e}\")",
          "keyword": "prescription"
        },
        {
          "line": 359,
          "content": "\"\"\"Get prescription analysis results for voice call.\"\"\"",
          "keyword": "prescription"
        },
        {
          "line": 369,
          "content": "logger.error(f\"Failed to get prescription context: {e}\")",
          "keyword": "prescription"
        }
      ],
      "src/api/integrated_webhooks.py": [
        {
          "line": 72,
          "content": "@router.get(\"/health\")",
          "keyword": "health"
        },
        {
          "line": 74,
          "content": "\"\"\"Comprehensive health check endpoint with database and system monitoring.\"\"\"",
          "keyword": "health"
        },
        {
          "line": 109,
          "content": "# Database health check",
          "keyword": "health"
        },
        {
          "line": 158,
          "content": "# Redis health check",
          "keyword": "health"
        },
        {
          "line": 169,
          "content": "raise Exception(\"Redis health check failed\")",
          "keyword": "health"
        }
      ],
      "src/api/whatsapp_webhooks.py": [
        {
          "line": 156,
          "content": "\"\"\"Handle prescription image during active voice call.\"\"\"",
          "keyword": "prescription"
        },
        {
          "line": 158,
          "content": "logger.info(f\"\ud83d\udd0a\ud83d\udccb Processing voice call prescription image from {user_id[:5]}***\")",
          "keyword": "prescription"
        },
        {
          "line": 162,
          "content": "user_id, \"processing\", \"Analyzing prescription image...\"",
          "keyword": "prescription"
        },
        {
          "line": 179,
          "content": "user_id, \"failed\", \"Could not download prescription image\"",
          "keyword": "prescription"
        },
        {
          "line": 183,
          "content": "logger.error(f\"\u274c Failed to download prescription image for voice call {user_id[:5]}***\")",
          "keyword": "prescription"
        },
        {
          "line": 192,
          "content": "# Analyze prescription image",
          "keyword": "prescription"
        },
        {
          "line": 207,
          "content": "# Send prescription data instantly to voice agent via LiveKit",
          "keyword": "prescription"
        },
        {
          "line": 215,
          "content": "logger.info(f\"\ud83d\ude80 REAL-TIME SUCCESS: Sent prescription data via LiveKit to voice agent for {user_id[:5]}***\")",
          "keyword": "prescription"
        },
        {
          "line": 224,
          "content": "# Create prescription context in same format as regular handler",
          "keyword": "prescription"
        },
        {
          "line": 238,
          "content": "logger.info(f\"\ud83d\udcbe FALLBACK: Saved prescription context to Redis for voice call: {whatsapp_session_id}\")",
          "keyword": "prescription"
        },
        {
          "line": 248,
          "content": "logger.info(f\"\u2705 Voice call prescription analysis complete for {user_id[:5]}*** - sent via LiveKit!\")",
          "keyword": "prescription"
        },
        {
          "line": 252,
          "content": "error_message = analysis_result.get(\"message\", \"Prescription analysis failed\")",
          "keyword": "prescription"
        },
        {
          "line": 266,
          "content": "logger.info(f\"\ud83d\ude80 REAL-TIME FAILURE: Sent prescription failure via LiveKit for {user_id[:5]}***\")",
          "keyword": "prescription"
        },
        {
          "line": 276,
          "content": "logger.warning(f\"\u274c Voice call prescription analysis failed for {user_id[:5]}*** - sent via LiveKit!\")",
          "keyword": "prescription"
        },
        {
          "line": 279,
          "content": "logger.error(f\"Error processing voice call prescription image: {e}\")",
          "keyword": "prescription"
        },
        {
          "line": 295,
          "content": "\"\"\"Handle WhatsApp image message for prescription analysis.\"\"\"",
          "keyword": "prescription"
        },
        {
          "line": 297,
          "content": "logger.info(f\"\ud83d\uddbc\ufe0f Processing prescription image from WhatsApp user {user_id[:5]}***\")",
          "keyword": "prescription"
        },
        {
          "line": 318,
          "content": "logger.info(f\"\ud83d\udcf7 Downloaded prescription image ({len(image_bytes)} bytes, {image_format})\")",
          "keyword": "prescription"
        },
        {
          "line": 323,
          "content": "# Analyze prescription image",
          "keyword": "prescription"
        },
        {
          "line": 324,
          "content": "logger.info(\"\ud83d\udd0d Starting prescription image analysis...\")",
          "keyword": "prescription"
        },
        {
          "line": 341,
          "content": "summary_parts.append(f\"**Patient:** {prescription_data['patient_name']}\")",
          "keyword": "patient"
        },
        {
          "line": 346,
          "content": "summary_parts.append(f\"**Patient Info:** {', '.join(age_gender)}\")",
          "keyword": "patient"
        },
        {
          "line": 364,
          "content": "summary = \"\\n\".join(summary_parts) + \"\\n\\nIs this information correct?\" if summary_parts else \"I found some prescription information but need clarification on the details.\"",
          "keyword": "prescription"
        },
        {
          "line": 375,
          "content": "response_message = f\"\"\"\ud83d\udccb **Prescription Analysis Complete**",
          "keyword": "prescription"
        },
        {
          "line": 385,
          "content": "error_message = analysis_result.get(\"message\", \"Could not analyze prescription\")",
          "keyword": "prescription"
        },
        {
          "line": 388,
          "content": "response_message = f\"\"\"\ud83d\udd0d **Prescription Analysis**",
          "keyword": "prescription"
        },
        {
          "line": 399,
          "content": "# Save prescription data to session context for follow-up confirmation",
          "keyword": "prescription"
        },
        {
          "line": 406,
          "content": "# Save prescription data for confirmation workflow",
          "keyword": "prescription"
        },
        {
          "line": 420,
          "content": "logger.info(f\"\ud83d\udcbe Saved prescription context for session {whatsapp_session_id}\")",
          "keyword": "prescription"
        },
        {
          "line": 423,
          "content": "logger.warning(f\"Failed to save prescription context: {ctx_error}\")",
          "keyword": "prescription"
        },
        {
          "line": 432,
          "content": "logger.info(f\"\u2705 Prescription analysis response sent to {user_id[:5]}***\")",
          "keyword": "prescription"
        },
        {
          "line": 434,
          "content": "logger.error(f\"\u274c Failed to send prescription analysis: {send_result}\")",
          "keyword": "prescription"
        },
        {
          "line": 443,
          "content": "message=\"I had trouble analyzing your prescription image. Please try again or tell me which tests you'd like to book.\"",
          "keyword": "prescription"
        },
        {
          "line": 470,
          "content": "# Process image message for prescription analysis",
          "keyword": "prescription"
        },
        {
          "line": 472,
          "content": "# Special handling for voice call prescription images",
          "keyword": "prescription"
        },
        {
          "line": 486,
          "content": "message=\"I see you're currently on a voice call with me. Please send a prescription image if you mentioned one during our call, or continue our conversation by voice.\"",
          "keyword": "prescription"
        },
        {
          "line": 491,
          "content": "message=\"I can process text messages and prescription images. Please send your message as text or upload a prescription image.\"",
          "keyword": "prescription"
        },
        {
          "line": 563,
          "content": "@router.get(\"/health\")",
          "keyword": "health"
        },
        {
          "line": 565,
          "content": "\"\"\"WhatsApp Business API integration health check.\"\"\"",
          "keyword": "health"
        },
        {
          "line": 597,
          "content": "logger.error(f\"WhatsApp health check error: {e}\")",
          "keyword": "health"
        }
      ],
      "src/api/business_webhooks.py": [
        {
          "line": 83,
          "content": "@router.get(\"/health\")",
          "keyword": "health"
        },
        {
          "line": 85,
          "content": "\"\"\"Comprehensive health check for business systems.\"\"\"",
          "keyword": "health"
        },
        {
          "line": 117,
          "content": "# Database health check",
          "keyword": "health"
        },
        {
          "line": 166,
          "content": "# Redis health check",
          "keyword": "health"
        }
      ],
      "testing/performance/stress_testing_framework.py": [
        {
          "line": 426,
          "content": "async with session.get(f\"{self.base_url}/health\") as response:",
          "keyword": "health"
        }
      ],
      "demo/scenarios/assessment_appeal_scenarios.py": [
        {
          "line": 228,
          "content": "\"ai\": \"You'll need to file a 'Motion for Late Appeal' with the Appraisal Review Board, explaining your circumstances and providing supporting documentation (like divorce papers, medical records, etc.). You'll also need to file your regular appeal documents. I'd recommend acting quickly since the late appeal deadline is also firm. Would you like help starting this process?\",",
          "keyword": "medical"
        }
      ]
    },
    "total_files_with_medical": 22,
    "total_medical_references": 195
  },
  "package_analysis": {
    "required_packages": [
      "fastapi",
      "uvicorn",
      "pydantic",
      "pydantic-settings",
      "langgraph",
      "langchain-core",
      "langchain-google-genai",
      "google-generativeai",
      "requests",
      "aiohttp",
      "cryptography",
      "sqlalchemy",
      "alembic",
      "asyncpg",
      "aiosqlite",
      "redis",
      "aiofiles",
      "mcp",
      "razorpay",
      "python-jose",
      "passlib",
      "python-multipart",
      "prometheus-client",
      "structlog",
      "langfuse",
      "pytest",
      "pytest-asyncio",
      "pytest-mock",
      "pytest-cov",
      "httpx",
      "black",
      "isort",
      "flake8",
      "mypy",
      "gspread",
      "google-auth",
      "python-dotenv"
    ],
    "unused_packages": [
      "requests",
      "cryptography",
      "alembic",
      "asyncpg",
      "aiosqlite",
      "mcp",
      "python-jose",
      "passlib",
      "python-multipart",
      "prometheus-client",
      "langfuse",
      "httpx",
      "black",
      "isort",
      "flake8",
      "mypy",
      "gspread",
      "python-dotenv"
    ],
    "actual_imports": {
      "setuptools": 1,
      "sys": 12,
      "os": 42,
      "agents": 41,
      "services": 89,
      "asyncio": 53,
      "traceback": 7,
      "datetime": 81,
      "ast": 1,
      "json": 38,
      "re": 26,
      "collections": 5,
      "pathlib": 16,
      "typing": 85,
      "subprocess": 2,
      "argparse": 4,
      "pytest": 5,
      "tempfile": 1,
      "yaml": 1,
      "engine": 7,
      "enum": 27,
      "logging": 22,
      "dataclasses": 39,
      "dotenv": 7,
      "fastapi": 13,
      "uvicorn": 1,
      "structlog": 45,
      "src": 3,
      "app": 3,
      "random": 17,
      "decimal": 12,
      "calendar": 1,
      "hashlib": 10,
      "uuid": 4,
      "config": 23,
      "csv": 1,
      "io": 2,
      "aiohttp": 8,
      "ssl": 1,
      "socket": 1,
      "urllib": 3,
      "glob": 1,
      "base64": 6,
      "langchain_core": 25,
      "threading": 2,
      "concurrent": 3,
      "langchain": 2,
      "pydantic": 9,
      "string": 2,
      "integrations": 1,
      "typing_extensions": 1,
      "langchain_google_genai": 5,
      "langgraph": 3,
      "sqlalchemy": 17,
      "mock_data": 25,
      "pytz": 1,
      "redis": 12,
      "hmac": 4,
      "time": 8,
      "schedule": 1,
      "bs4": 3,
      "aiofiles": 1,
      "mimetypes": 1,
      "PyPDF2": 2,
      "html": 1,
      "numpy": 1,
      "langchain_chroma": 1,
      "contextlib": 1,
      "functools": 2,
      "livekit": 8,
      "voice_config": 1,
      "google": 1,
      "razorpay": 1,
      "psutil": 1,
      "statistics": 1,
      "unittest": 3,
      "matplotlib": 1,
      "seaborn": 1,
      "psycopg2": 1,
      "demo": 1
    },
    "import_locations": {
      "setuptools": [
        {
          "file": "setup.py",
          "line": 3
        }
      ],
      "sys": [
        {
          "file": "scripts/validate-workflow.py",
          "line": 7
        },
        {
          "file": "scripts/test-workflow.py",
          "line": 8
        },
        {
          "file": "scripts/test_date_intelligence.py",
          "line": 6
        },
        {
          "file": "scripts/dependency_analyzer.py",
          "line": 14
        },
        {
          "file": "scripts/test-mock-payment.py",
          "line": 8
        },
        {
          "file": "scripts/test_intelligent_booking.py",
          "line": 6
        },
        {
          "file": "tests/run_tests.py",
          "line": 7
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 19
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 9
        },
        {
          "file": "scripts/cleanup/clear-user-redis.py",
          "line": 8
        },
        {
          "file": "scripts/cleanup/clear-all-data.py",
          "line": 14
        },
        {
          "file": "scripts/cleanup/clear-sessions-only.py",
          "line": 13
        }
      ],
      "os": [
        {
          "file": "scripts/validate-workflow.py",
          "line": 8
        },
        {
          "file": "scripts/test-workflow.py",
          "line": 9
        },
        {
          "file": "scripts/test_date_intelligence.py",
          "line": 7
        },
        {
          "file": "scripts/dependency_analyzer.py",
          "line": 8
        },
        {
          "file": "scripts/test-mock-payment.py",
          "line": 9
        },
        {
          "file": "scripts/test-mock-payment.py",
          "line": 82
        },
        {
          "file": "scripts/test-mock-payment.py",
          "line": 143
        },
        {
          "file": "scripts/test-mock-payment.py",
          "line": 161
        },
        {
          "file": "scripts/detailed_usage_analyzer.py",
          "line": 8
        },
        {
          "file": "scripts/test_intelligent_booking.py",
          "line": 7
        },
        {
          "file": "tests/run_tests.py",
          "line": 8
        },
        {
          "file": "tests/conftest.py",
          "line": 8
        },
        {
          "file": "config/ai_configuration.py",
          "line": 6
        },
        {
          "file": "config/compliance_settings.py",
          "line": 3
        },
        {
          "file": "config/settings.py",
          "line": 3
        },
        {
          "file": "config/performance_thresholds.py",
          "line": 3
        },
        {
          "file": "config/security_policies.py",
          "line": 3
        },
        {
          "file": "src/main.py",
          "line": 3
        },
        {
          "file": "compliance/tdlr/record_retention_manager.py",
          "line": 10
        },
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 177
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 8
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 249
        },
        {
          "file": "services/messaging/whatsapp_client.py",
          "line": 6
        },
        {
          "file": "services/messaging/whatsapp_image_handler.py",
          "line": 10
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 29
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 276
        },
        {
          "file": "services/vector_store/property_tax_embeddings.py",
          "line": 44
        },
        {
          "file": "services/vector_store/legal_document_indexer.py",
          "line": 35
        },
        {
          "file": "services/persistence/redis_conversation_store.py",
          "line": 247
        },
        {
          "file": "services/voice/voice_setup.py",
          "line": 6
        },
        {
          "file": "services/voice/livekit_data_bridge.py",
          "line": 12
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 6
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 20
        },
        {
          "file": "services/voice/voice_config.py",
          "line": 6
        },
        {
          "file": "services/payments/mock_razorpay.py",
          "line": 6
        },
        {
          "file": "services/payments/razorpay_integration.py",
          "line": 6
        },
        {
          "file": "src/api/integrated_webhooks.py",
          "line": 6
        },
        {
          "file": "src/api/integrated_webhooks.py",
          "line": 184
        },
        {
          "file": "src/api/business_webhooks.py",
          "line": 12
        },
        {
          "file": "demo/environment/demo_configuration.py",
          "line": 6
        },
        {
          "file": "scripts/cleanup/clear-all-data.py",
          "line": 13
        },
        {
          "file": "scripts/cleanup/clear-sessions-only.py",
          "line": 12
        }
      ],
      "agents": [
        {
          "file": "scripts/validate-workflow.py",
          "line": 18
        },
        {
          "file": "scripts/validate-workflow.py",
          "line": 30
        },
        {
          "file": "scripts/validate-workflow.py",
          "line": 42
        },
        {
          "file": "scripts/validate-workflow.py",
          "line": 178
        },
        {
          "file": "scripts/test-workflow.py",
          "line": 12
        },
        {
          "file": "scripts/test_intelligent_booking.py",
          "line": 20
        },
        {
          "file": "agents/simplified/__init__.py",
          "line": 7
        },
        {
          "file": "agents/simplified/__init__.py",
          "line": 8
        },
        {
          "file": "agents/simplified/__init__.py",
          "line": 9
        },
        {
          "file": "agents/simplified/simplified_agent_v2.py",
          "line": 11
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 34
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 38
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 71
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 75
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 78
        },
        {
          "file": "agents/tools/consultation_scheduling_tool.py",
          "line": 28
        },
        {
          "file": "services/messaging/modern_integrated_webhook_handler.py",
          "line": 13
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 16
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 24
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 25
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 210
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 349
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 385
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 167
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 301
        },
        {
          "file": "tests/tools/test_lead_qualification_tool.py",
          "line": 12
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 90
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 91
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 92
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 93
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 94
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 95
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 229
        },
        {
          "file": "tests/tools/test_property_validation_tool.py",
          "line": 13
        },
        {
          "file": "tests/tools/test_savings_calculator_tool.py",
          "line": 13
        },
        {
          "file": "demo/scenarios/escalation_scenarios.py",
          "line": 12
        },
        {
          "file": "demo/scenarios/assessment_appeal_scenarios.py",
          "line": 12
        },
        {
          "file": "demo/scenarios/payment_processing_scenarios.py",
          "line": 12
        },
        {
          "file": "demo/scenarios/exemption_application_scenarios.py",
          "line": 12
        },
        {
          "file": "demo/scenarios/multi_property_scenarios.py",
          "line": 12
        },
        {
          "file": "demo/scenarios/basic_inquiry_scenarios.py",
          "line": 12
        }
      ],
      "services": [
        {
          "file": "scripts/validate-workflow.py",
          "line": 164
        },
        {
          "file": "scripts/test_date_intelligence.py",
          "line": 15
        },
        {
          "file": "scripts/test_date_intelligence.py",
          "line": 118
        },
        {
          "file": "scripts/test-mock-payment.py",
          "line": 12
        },
        {
          "file": "scripts/test-mock-payment.py",
          "line": 81
        },
        {
          "file": "scripts/test-mock-payment.py",
          "line": 104
        },
        {
          "file": "scripts/test-mock-payment.py",
          "line": 127
        },
        {
          "file": "src/main.py",
          "line": 108
        },
        {
          "file": "src/main.py",
          "line": 177
        },
        {
          "file": "agents/simplified/property_document_tools.py",
          "line": 15
        },
        {
          "file": "agents/simplified/property_tax_rag_tool.py",
          "line": 45
        },
        {
          "file": "agents/simplified/property_tax_rag_tool.py",
          "line": 46
        },
        {
          "file": "agents/simplified/ticket_tools.py",
          "line": 54
        },
        {
          "file": "agents/simplified/ticket_tools.py",
          "line": 55
        },
        {
          "file": "agents/simplified/ticket_tools.py",
          "line": 56
        },
        {
          "file": "agents/simplified/ticket_tools.py",
          "line": 187
        },
        {
          "file": "agents/simplified/ticket_tools.py",
          "line": 188
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 20
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 21
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 26
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 27
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 28
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 508
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 655
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 739
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 933
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 29
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 870
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 871
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 901
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 902
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 903
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 907
        },
        {
          "file": "services/ticket_management/webhook_interceptor.py",
          "line": 11
        },
        {
          "file": "services/ticket_management/webhook_interceptor.py",
          "line": 12
        },
        {
          "file": "services/ticket_management/webhook_interceptor.py",
          "line": 13
        },
        {
          "file": "services/ticket_management/models.py",
          "line": 9
        },
        {
          "file": "services/messaging/modern_integrated_webhook_handler.py",
          "line": 11
        },
        {
          "file": "services/messaging/modern_integrated_webhook_handler.py",
          "line": 12
        },
        {
          "file": "services/messaging/modern_integrated_webhook_handler.py",
          "line": 100
        },
        {
          "file": "services/messaging/modern_integrated_webhook_handler.py",
          "line": 157
        },
        {
          "file": "services/messaging/modern_integrated_webhook_handler.py",
          "line": 295
        },
        {
          "file": "services/messaging/property_tax_templates.py",
          "line": 9
        },
        {
          "file": "services/messaging/integrated_webhook_handler.py",
          "line": 11
        },
        {
          "file": "services/messaging/message_batching.py",
          "line": 14
        },
        {
          "file": "services/knowledge_base/quality_validator.py",
          "line": 16
        },
        {
          "file": "services/knowledge_base/content_processor.py",
          "line": 14
        },
        {
          "file": "services/knowledge_base/content_processor.py",
          "line": 15
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 13
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 14
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 189
        },
        {
          "file": "services/vector_store/legal_document_indexer.py",
          "line": 17
        },
        {
          "file": "services/persistence/order_storage.py",
          "line": 213
        },
        {
          "file": "services/persistence/order_storage.py",
          "line": 214
        },
        {
          "file": "services/voice/voice_chat_state.py",
          "line": 114
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 31
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 250
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 449
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 546
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 633
        },
        {
          "file": "services/payments/razorpay_integration.py",
          "line": 25
        },
        {
          "file": "services/payments/razorpay_integration.py",
          "line": 26
        },
        {
          "file": "services/payments/razorpay_integration.py",
          "line": 33
        },
        {
          "file": "src/api/integrated_webhooks.py",
          "line": 11
        },
        {
          "file": "src/api/integrated_webhooks.py",
          "line": 111
        },
        {
          "file": "src/api/integrated_webhooks.py",
          "line": 131
        },
        {
          "file": "src/api/integrated_webhooks.py",
          "line": 160
        },
        {
          "file": "src/api/integrated_webhooks.py",
          "line": 205
        },
        {
          "file": "src/api/integrated_webhooks.py",
          "line": 247
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 11
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 12
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 166
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 204
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 220
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 256
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 300
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 401
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 462
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 608
        },
        {
          "file": "src/api/business_webhooks.py",
          "line": 17
        },
        {
          "file": "src/api/business_webhooks.py",
          "line": 119
        },
        {
          "file": "src/api/business_webhooks.py",
          "line": 139
        },
        {
          "file": "src/api/business_webhooks.py",
          "line": 209
        },
        {
          "file": "src/api/business_webhooks.py",
          "line": 249
        },
        {
          "file": "src/api/report_management.py",
          "line": 14
        },
        {
          "file": "src/api/report_management.py",
          "line": 15
        },
        {
          "file": "demo/environment/demo_reset_manager.py",
          "line": 17
        },
        {
          "file": "demo/environment/demo_reset_manager.py",
          "line": 18
        },
        {
          "file": "scripts/cleanup/clear-all-data.py",
          "line": 32
        }
      ],
      "asyncio": [
        {
          "file": "scripts/test-workflow.py",
          "line": 7
        },
        {
          "file": "scripts/test_date_intelligence.py",
          "line": 8
        },
        {
          "file": "scripts/test-mock-payment.py",
          "line": 7
        },
        {
          "file": "scripts/test_intelligent_booking.py",
          "line": 8
        },
        {
          "file": "tests/conftest.py",
          "line": 6
        },
        {
          "file": "compliance/tdlr/audit_trail_generator.py",
          "line": 11
        },
        {
          "file": "compliance/tdlr/record_retention_manager.py",
          "line": 4
        },
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 3
        },
        {
          "file": "agents/simplified/property_document_tools.py",
          "line": 6
        },
        {
          "file": "agents/simplified/property_document_tools.py",
          "line": 163
        },
        {
          "file": "agents/simplified/property_tax_rag_tool.py",
          "line": 6
        },
        {
          "file": "agents/simplified/ticket_tools.py",
          "line": 9
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 6
        },
        {
          "file": "agents/tools/document_processing_tool.py",
          "line": 8
        },
        {
          "file": "agents/tools/savings_calculator_tool.py",
          "line": 8
        },
        {
          "file": "agents/tools/lead_qualification_tool.py",
          "line": 8
        },
        {
          "file": "agents/tools/property_validation_tool.py",
          "line": 8
        },
        {
          "file": "agents/tools/consultation_scheduling_tool.py",
          "line": 8
        },
        {
          "file": "agents/tools/deadline_tracking_tool.py",
          "line": 8
        },
        {
          "file": "services/messaging/whatsapp_client.py",
          "line": 7
        },
        {
          "file": "services/messaging/whatsapp_image_handler.py",
          "line": 6
        },
        {
          "file": "services/messaging/message_batching.py",
          "line": 7
        },
        {
          "file": "services/data_acquisition/scheduler.py",
          "line": 6
        },
        {
          "file": "services/data_acquisition/county_appraisal_scraper.py",
          "line": 6
        },
        {
          "file": "services/data_acquisition/texas_comptroller_scraper.py",
          "line": 6
        },
        {
          "file": "services/data_acquisition/document_processor.py",
          "line": 6
        },
        {
          "file": "services/knowledge_base/legal_text_cleaner.py",
          "line": 6
        },
        {
          "file": "services/knowledge_base/quality_validator.py",
          "line": 6
        },
        {
          "file": "services/knowledge_base/content_processor.py",
          "line": 6
        },
        {
          "file": "services/knowledge_base/taxonomy_builder.py",
          "line": 6
        },
        {
          "file": "services/vector_store/semantic_search.py",
          "line": 6
        },
        {
          "file": "services/vector_store/citation_tracker.py",
          "line": 6
        },
        {
          "file": "services/vector_store/property_tax_embeddings.py",
          "line": 6
        },
        {
          "file": "services/vector_store/legal_document_indexer.py",
          "line": 6
        },
        {
          "file": "services/persistence/database.py",
          "line": 6
        },
        {
          "file": "services/persistence/order_storage.py",
          "line": 11
        },
        {
          "file": "services/voice/voice_setup.py",
          "line": 7
        },
        {
          "file": "services/voice/livekit_data_bridge.py",
          "line": 6
        },
        {
          "file": "services/voice/voice_chat_state.py",
          "line": 6
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 7
        },
        {
          "file": "services/utils/retry_handler.py",
          "line": 6
        },
        {
          "file": "src/api/integrated_webhooks.py",
          "line": 76
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 110
        },
        {
          "file": "testing/performance/stress_testing_framework.py",
          "line": 3
        },
        {
          "file": "testing/performance/load_testing_suite.py",
          "line": 3
        },
        {
          "file": "tests/tools/test_lead_qualification_tool.py",
          "line": 9
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 8
        },
        {
          "file": "tests/tools/test_property_validation_tool.py",
          "line": 9
        },
        {
          "file": "tests/tools/test_savings_calculator_tool.py",
          "line": 9
        },
        {
          "file": "demo/monitoring/demo_performance_tracker.py",
          "line": 7
        },
        {
          "file": "demo/environment/demo_reset_manager.py",
          "line": 6
        },
        {
          "file": "scripts/cleanup/clear-all-data.py",
          "line": 12
        },
        {
          "file": "scripts/cleanup/clear-sessions-only.py",
          "line": 11
        }
      ],
      "traceback": [
        {
          "file": "scripts/test-workflow.py",
          "line": 261
        },
        {
          "file": "scripts/test_date_intelligence.py",
          "line": 162
        },
        {
          "file": "scripts/test-mock-payment.py",
          "line": 213
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 224
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 410
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 824
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 995
        }
      ],
      "datetime": [
        {
          "file": "scripts/test_date_intelligence.py",
          "line": 9
        },
        {
          "file": "scripts/test_intelligent_booking.py",
          "line": 9
        },
        {
          "file": "config/compliance_settings.py",
          "line": 4
        },
        {
          "file": "services/date_intelligence.py",
          "line": 7
        },
        {
          "file": "mock_data/consultant_schedules.py",
          "line": 9
        },
        {
          "file": "mock_data/tax_rates.py",
          "line": 10
        },
        {
          "file": "mock_data/demo_customer_personas.py",
          "line": 9
        },
        {
          "file": "mock_data/tax_calendars.py",
          "line": 9
        },
        {
          "file": "mock_data/property_records.py",
          "line": 9
        },
        {
          "file": "mock_data/document_templates.py",
          "line": 9
        },
        {
          "file": "mock_data/assessment_patterns.py",
          "line": 9
        },
        {
          "file": "compliance/tdlr/audit_trail_generator.py",
          "line": 7
        },
        {
          "file": "compliance/tdlr/privacy_compliance_validator.py",
          "line": 6
        },
        {
          "file": "compliance/tdlr/public_records_handler.py",
          "line": 5
        },
        {
          "file": "compliance/tdlr/record_retention_manager.py",
          "line": 6
        },
        {
          "file": "approval/workflows/stakeholder_approval_manager.py",
          "line": 6
        },
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 12
        },
        {
          "file": "agents/simplified/ticket_tools.py",
          "line": 10
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 12
        },
        {
          "file": "agents/core/conversation_flows.py",
          "line": 9
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 21
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 905
        },
        {
          "file": "agents/tools/document_processing_tool.py",
          "line": 12
        },
        {
          "file": "agents/tools/savings_calculator_tool.py",
          "line": 11
        },
        {
          "file": "agents/tools/lead_qualification_tool.py",
          "line": 10
        },
        {
          "file": "agents/tools/property_validation_tool.py",
          "line": 12
        },
        {
          "file": "agents/tools/consultation_scheduling_tool.py",
          "line": 10
        },
        {
          "file": "agents/tools/deadline_tracking_tool.py",
          "line": 10
        },
        {
          "file": "services/ticket_management/webhook_interceptor.py",
          "line": 9
        },
        {
          "file": "services/ticket_management/ticket_service.py",
          "line": 9
        },
        {
          "file": "services/ticket_management/models.py",
          "line": 7
        },
        {
          "file": "services/messaging/modern_integrated_webhook_handler.py",
          "line": 9
        },
        {
          "file": "services/messaging/whatsapp_client.py",
          "line": 12
        },
        {
          "file": "services/messaging/property_tax_templates.py",
          "line": 8
        },
        {
          "file": "services/messaging/message_batching.py",
          "line": 11
        },
        {
          "file": "services/data_acquisition/scheduler.py",
          "line": 10
        },
        {
          "file": "services/data_acquisition/county_appraisal_scraper.py",
          "line": 14
        },
        {
          "file": "services/data_acquisition/texas_comptroller_scraper.py",
          "line": 15
        },
        {
          "file": "services/data_acquisition/document_processor.py",
          "line": 13
        },
        {
          "file": "services/knowledge_base/legal_text_cleaner.py",
          "line": 11
        },
        {
          "file": "services/knowledge_base/quality_validator.py",
          "line": 9
        },
        {
          "file": "services/knowledge_base/content_processor.py",
          "line": 9
        },
        {
          "file": "services/knowledge_base/taxonomy_builder.py",
          "line": 9
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 11
        },
        {
          "file": "services/vector_store/semantic_search.py",
          "line": 9
        },
        {
          "file": "services/vector_store/citation_tracker.py",
          "line": 9
        },
        {
          "file": "services/vector_store/legal_document_indexer.py",
          "line": 8
        },
        {
          "file": "services/persistence/redis_conversation_store.py",
          "line": 9
        },
        {
          "file": "services/persistence/repositories.py",
          "line": 6
        },
        {
          "file": "services/persistence/analytics_repository.py",
          "line": 7
        },
        {
          "file": "services/persistence/database.py",
          "line": 7
        },
        {
          "file": "services/persistence/order_storage.py",
          "line": 9
        },
        {
          "file": "services/persistence/order_storage.py",
          "line": 229
        },
        {
          "file": "services/voice/voice_setup.py",
          "line": 10
        },
        {
          "file": "services/voice/livekit_data_bridge.py",
          "line": 9
        },
        {
          "file": "services/voice/voice_chat_state.py",
          "line": 11
        },
        {
          "file": "services/voice/voice_chat_state.py",
          "line": 253
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 10
        },
        {
          "file": "services/voice/voice_config.py",
          "line": 155
        },
        {
          "file": "services/utils/date_parser.py",
          "line": 5
        },
        {
          "file": "services/utils/retry_handler.py",
          "line": 10
        },
        {
          "file": "services/payments/mock_razorpay.py",
          "line": 11
        },
        {
          "file": "services/payments/razorpay_integration.py",
          "line": 11
        },
        {
          "file": "src/api/integrated_webhooks.py",
          "line": 75
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 10
        },
        {
          "file": "src/api/business_webhooks.py",
          "line": 86
        },
        {
          "file": "src/api/report_management.py",
          "line": 6
        },
        {
          "file": "testing/performance/stress_testing_framework.py",
          "line": 10
        },
        {
          "file": "testing/performance/load_testing_suite.py",
          "line": 9
        },
        {
          "file": "tests/tools/test_property_validation_tool.py",
          "line": 11
        },
        {
          "file": "tests/tools/test_savings_calculator_tool.py",
          "line": 11
        },
        {
          "file": "demo/monitoring/demo_performance_tracker.py",
          "line": 10
        },
        {
          "file": "demo/scenarios/escalation_scenarios.py",
          "line": 10
        },
        {
          "file": "demo/scenarios/assessment_appeal_scenarios.py",
          "line": 10
        },
        {
          "file": "demo/scenarios/payment_processing_scenarios.py",
          "line": 10
        },
        {
          "file": "demo/scenarios/exemption_application_scenarios.py",
          "line": 10
        },
        {
          "file": "demo/scenarios/multi_property_scenarios.py",
          "line": 10
        },
        {
          "file": "demo/scenarios/basic_inquiry_scenarios.py",
          "line": 10
        },
        {
          "file": "demo/presentations/executive_summary_generator.py",
          "line": 6
        },
        {
          "file": "demo/environment/demo_configuration.py",
          "line": 10
        },
        {
          "file": "demo/environment/demo_reset_manager.py",
          "line": 9
        }
      ],
      "ast": [
        {
          "file": "scripts/dependency_analyzer.py",
          "line": 7
        }
      ],
      "json": [
        {
          "file": "scripts/dependency_analyzer.py",
          "line": 9
        },
        {
          "file": "scripts/detailed_usage_analyzer.py",
          "line": 7
        },
        {
          "file": "tests/conftest.py",
          "line": 11
        },
        {
          "file": "compliance/tdlr/audit_trail_generator.py",
          "line": 5
        },
        {
          "file": "compliance/tdlr/privacy_compliance_validator.py",
          "line": 10
        },
        {
          "file": "compliance/tdlr/record_retention_manager.py",
          "line": 9
        },
        {
          "file": "approval/workflows/stakeholder_approval_manager.py",
          "line": 4
        },
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 15
        },
        {
          "file": "agents/simplified/property_document_tools.py",
          "line": 7
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 7
        },
        {
          "file": "services/ticket_management/webhook_interceptor.py",
          "line": 5
        },
        {
          "file": "services/ticket_management/ticket_service.py",
          "line": 5
        },
        {
          "file": "services/messaging/modern_integrated_webhook_handler.py",
          "line": 6
        },
        {
          "file": "services/messaging/whatsapp_client.py",
          "line": 8
        },
        {
          "file": "services/data_acquisition/scheduler.py",
          "line": 13
        },
        {
          "file": "services/knowledge_base/quality_validator.py",
          "line": 13
        },
        {
          "file": "services/knowledge_base/content_processor.py",
          "line": 11
        },
        {
          "file": "services/knowledge_base/taxonomy_builder.py",
          "line": 11
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 6
        },
        {
          "file": "services/vector_store/semantic_search.py",
          "line": 11
        },
        {
          "file": "services/vector_store/citation_tracker.py",
          "line": 12
        },
        {
          "file": "services/vector_store/property_tax_embeddings.py",
          "line": 11
        },
        {
          "file": "services/persistence/redis_conversation_store.py",
          "line": 6
        },
        {
          "file": "services/persistence/order_storage.py",
          "line": 6
        },
        {
          "file": "services/voice/voice_setup.py",
          "line": 147
        },
        {
          "file": "services/voice/livekit_data_bridge.py",
          "line": 7
        },
        {
          "file": "services/voice/voice_chat_state.py",
          "line": 7
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 9
        },
        {
          "file": "services/payments/mock_razorpay.py",
          "line": 7
        },
        {
          "file": "services/payments/razorpay_integration.py",
          "line": 7
        },
        {
          "file": "src/api/integrated_webhooks.py",
          "line": 230
        },
        {
          "file": "src/api/report_management.py",
          "line": 8
        },
        {
          "file": "testing/performance/stress_testing_framework.py",
          "line": 13
        },
        {
          "file": "testing/performance/load_testing_suite.py",
          "line": 13
        },
        {
          "file": "demo/monitoring/demo_performance_tracker.py",
          "line": 11
        },
        {
          "file": "demo/presentations/executive_summary_generator.py",
          "line": 3
        },
        {
          "file": "demo/environment/demo_configuration.py",
          "line": 7
        },
        {
          "file": "demo/environment/demo_reset_manager.py",
          "line": 11
        }
      ],
      "re": [
        {
          "file": "scripts/dependency_analyzer.py",
          "line": 10
        },
        {
          "file": "scripts/detailed_usage_analyzer.py",
          "line": 9
        },
        {
          "file": "services/date_intelligence.py",
          "line": 6
        },
        {
          "file": "mock_data/document_templates.py",
          "line": 11
        },
        {
          "file": "compliance/tdlr/privacy_compliance_validator.py",
          "line": 3
        },
        {
          "file": "compliance/tdlr/public_records_handler.py",
          "line": 8
        },
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 5
        },
        {
          "file": "agents/core/guardrails.py",
          "line": 6
        },
        {
          "file": "agents/core/conversation_flows.py",
          "line": 304
        },
        {
          "file": "agents/core/conversation_flows.py",
          "line": 329
        },
        {
          "file": "agents/tools/document_processing_tool.py",
          "line": 14
        },
        {
          "file": "agents/tools/property_validation_tool.py",
          "line": 9
        },
        {
          "file": "services/data_acquisition/county_appraisal_scraper.py",
          "line": 13
        },
        {
          "file": "services/data_acquisition/texas_comptroller_scraper.py",
          "line": 14
        },
        {
          "file": "services/data_acquisition/document_processor.py",
          "line": 12
        },
        {
          "file": "services/knowledge_base/legal_text_cleaner.py",
          "line": 7
        },
        {
          "file": "services/knowledge_base/quality_validator.py",
          "line": 11
        },
        {
          "file": "services/knowledge_base/content_processor.py",
          "line": 326
        },
        {
          "file": "services/knowledge_base/content_processor.py",
          "line": 348
        },
        {
          "file": "services/knowledge_base/content_processor.py",
          "line": 386
        },
        {
          "file": "services/knowledge_base/content_processor.py",
          "line": 432
        },
        {
          "file": "services/knowledge_base/taxonomy_builder.py",
          "line": 14
        },
        {
          "file": "services/vector_store/citation_tracker.py",
          "line": 11
        },
        {
          "file": "services/vector_store/property_tax_embeddings.py",
          "line": 275
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 18
        },
        {
          "file": "services/utils/date_parser.py",
          "line": 6
        }
      ],
      "collections": [
        {
          "file": "scripts/dependency_analyzer.py",
          "line": 11
        },
        {
          "file": "scripts/detailed_usage_analyzer.py",
          "line": 11
        },
        {
          "file": "services/knowledge_base/taxonomy_builder.py",
          "line": 13
        },
        {
          "file": "services/vector_store/citation_tracker.py",
          "line": 14
        },
        {
          "file": "demo/monitoring/demo_performance_tracker.py",
          "line": 13
        }
      ],
      "pathlib": [
        {
          "file": "scripts/dependency_analyzer.py",
          "line": 12
        },
        {
          "file": "scripts/detailed_usage_analyzer.py",
          "line": 10
        },
        {
          "file": "tests/run_tests.py",
          "line": 10
        },
        {
          "file": "services/data_acquisition/scheduler.py",
          "line": 12
        },
        {
          "file": "services/data_acquisition/texas_comptroller_scraper.py",
          "line": 10
        },
        {
          "file": "services/data_acquisition/document_processor.py",
          "line": 10
        },
        {
          "file": "services/knowledge_base/content_processor.py",
          "line": 12
        },
        {
          "file": "services/knowledge_base/taxonomy_builder.py",
          "line": 12
        },
        {
          "file": "services/vector_store/citation_tracker.py",
          "line": 13
        },
        {
          "file": "services/vector_store/property_tax_embeddings.py",
          "line": 12
        },
        {
          "file": "services/vector_store/legal_document_indexer.py",
          "line": 10
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 11
        },
        {
          "file": "demo/environment/demo_configuration.py",
          "line": 11
        },
        {
          "file": "demo/environment/demo_reset_manager.py",
          "line": 14
        },
        {
          "file": "scripts/cleanup/clear-all-data.py",
          "line": 15
        },
        {
          "file": "scripts/cleanup/clear-sessions-only.py",
          "line": 14
        }
      ],
      "typing": [
        {
          "file": "scripts/dependency_analyzer.py",
          "line": 13
        },
        {
          "file": "scripts/detailed_usage_analyzer.py",
          "line": 12
        },
        {
          "file": "tests/conftest.py",
          "line": 9
        },
        {
          "file": "config/response_templates.py",
          "line": 6
        },
        {
          "file": "config/ai_configuration.py",
          "line": 7
        },
        {
          "file": "config/compliance_settings.py",
          "line": 5
        },
        {
          "file": "config/settings.py",
          "line": 5
        },
        {
          "file": "config/performance_thresholds.py",
          "line": 5
        },
        {
          "file": "config/security_policies.py",
          "line": 4
        },
        {
          "file": "services/date_intelligence.py",
          "line": 8
        },
        {
          "file": "mock_data/consultant_schedules.py",
          "line": 8
        },
        {
          "file": "mock_data/tax_rates.py",
          "line": 8
        },
        {
          "file": "mock_data/demo_customer_personas.py",
          "line": 6
        },
        {
          "file": "mock_data/tax_calendars.py",
          "line": 8
        },
        {
          "file": "mock_data/property_records.py",
          "line": 8
        },
        {
          "file": "mock_data/document_templates.py",
          "line": 8
        },
        {
          "file": "mock_data/assessment_patterns.py",
          "line": 8
        },
        {
          "file": "compliance/tdlr/audit_trail_generator.py",
          "line": 6
        },
        {
          "file": "compliance/tdlr/privacy_compliance_validator.py",
          "line": 5
        },
        {
          "file": "compliance/tdlr/public_records_handler.py",
          "line": 4
        },
        {
          "file": "compliance/tdlr/record_retention_manager.py",
          "line": 5
        },
        {
          "file": "approval/workflows/stakeholder_approval_manager.py",
          "line": 5
        },
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 11
        },
        {
          "file": "agents/simplified/property_document_tools.py",
          "line": 9
        },
        {
          "file": "agents/simplified/property_tax_rag_tool.py",
          "line": 7
        },
        {
          "file": "agents/simplified/ticket_tools.py",
          "line": 5
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 13
        },
        {
          "file": "agents/core/guardrails.py",
          "line": 8
        },
        {
          "file": "agents/core/conversation_flows.py",
          "line": 6
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 18
        },
        {
          "file": "agents/tools/document_processing_tool.py",
          "line": 11
        },
        {
          "file": "agents/tools/savings_calculator_tool.py",
          "line": 9
        },
        {
          "file": "agents/tools/lead_qualification_tool.py",
          "line": 9
        },
        {
          "file": "agents/tools/property_validation_tool.py",
          "line": 10
        },
        {
          "file": "agents/tools/consultation_scheduling_tool.py",
          "line": 9
        },
        {
          "file": "agents/tools/deadline_tracking_tool.py",
          "line": 9
        },
        {
          "file": "services/ticket_management/webhook_interceptor.py",
          "line": 6
        },
        {
          "file": "services/ticket_management/ticket_service.py",
          "line": 8
        },
        {
          "file": "services/messaging/modern_integrated_webhook_handler.py",
          "line": 8
        },
        {
          "file": "services/messaging/whatsapp_client.py",
          "line": 9
        },
        {
          "file": "services/messaging/whatsapp_image_handler.py",
          "line": 9
        },
        {
          "file": "services/messaging/property_tax_templates.py",
          "line": 7
        },
        {
          "file": "services/messaging/message_batching.py",
          "line": 9
        },
        {
          "file": "services/data_acquisition/scheduler.py",
          "line": 8
        },
        {
          "file": "services/data_acquisition/county_appraisal_scraper.py",
          "line": 8
        },
        {
          "file": "services/data_acquisition/texas_comptroller_scraper.py",
          "line": 8
        },
        {
          "file": "services/data_acquisition/document_processor.py",
          "line": 8
        },
        {
          "file": "services/knowledge_base/legal_text_cleaner.py",
          "line": 8
        },
        {
          "file": "services/knowledge_base/quality_validator.py",
          "line": 7
        },
        {
          "file": "services/knowledge_base/content_processor.py",
          "line": 7
        },
        {
          "file": "services/knowledge_base/taxonomy_builder.py",
          "line": 7
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 10
        },
        {
          "file": "services/vector_store/semantic_search.py",
          "line": 7
        },
        {
          "file": "services/vector_store/citation_tracker.py",
          "line": 7
        },
        {
          "file": "services/vector_store/property_tax_embeddings.py",
          "line": 7
        },
        {
          "file": "services/vector_store/legal_document_indexer.py",
          "line": 7
        },
        {
          "file": "services/persistence/redis_conversation_store.py",
          "line": 8
        },
        {
          "file": "services/persistence/repositories.py",
          "line": 7
        },
        {
          "file": "services/persistence/analytics_repository.py",
          "line": 6
        },
        {
          "file": "services/persistence/database.py",
          "line": 8
        },
        {
          "file": "services/persistence/order_storage.py",
          "line": 8
        },
        {
          "file": "services/voice/voice_setup.py",
          "line": 9
        },
        {
          "file": "services/voice/livekit_data_bridge.py",
          "line": 10
        },
        {
          "file": "services/voice/voice_chat_state.py",
          "line": 10
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 12
        },
        {
          "file": "services/voice/voice_config.py",
          "line": 7
        },
        {
          "file": "services/utils/date_parser.py",
          "line": 7
        },
        {
          "file": "services/utils/retry_handler.py",
          "line": 9
        },
        {
          "file": "services/payments/mock_razorpay.py",
          "line": 12
        },
        {
          "file": "services/payments/razorpay_integration.py",
          "line": 10
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 8
        },
        {
          "file": "src/api/report_management.py",
          "line": 7
        },
        {
          "file": "testing/performance/stress_testing_framework.py",
          "line": 9
        },
        {
          "file": "testing/performance/load_testing_suite.py",
          "line": 8
        },
        {
          "file": "demo/monitoring/demo_performance_tracker.py",
          "line": 8
        },
        {
          "file": "demo/scenarios/escalation_scenarios.py",
          "line": 6
        },
        {
          "file": "demo/scenarios/__init__.py",
          "line": 6
        },
        {
          "file": "demo/scenarios/assessment_appeal_scenarios.py",
          "line": 6
        },
        {
          "file": "demo/scenarios/payment_processing_scenarios.py",
          "line": 6
        },
        {
          "file": "demo/scenarios/exemption_application_scenarios.py",
          "line": 6
        },
        {
          "file": "demo/scenarios/multi_property_scenarios.py",
          "line": 6
        },
        {
          "file": "demo/scenarios/basic_inquiry_scenarios.py",
          "line": 6
        },
        {
          "file": "demo/presentations/executive_summary_generator.py",
          "line": 5
        },
        {
          "file": "demo/environment/demo_configuration.py",
          "line": 8
        },
        {
          "file": "demo/environment/demo_reset_manager.py",
          "line": 8
        }
      ],
      "subprocess": [
        {
          "file": "tests/run_tests.py",
          "line": 6
        },
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 9
        }
      ],
      "argparse": [
        {
          "file": "tests/run_tests.py",
          "line": 9
        },
        {
          "file": "services/voice/voice_setup.py",
          "line": 298
        },
        {
          "file": "scripts/cleanup/clear-user-redis.py",
          "line": 9
        },
        {
          "file": "scripts/cleanup/clear-all-sessions.py",
          "line": 7
        }
      ],
      "pytest": [
        {
          "file": "tests/conftest.py",
          "line": 5
        },
        {
          "file": "tests/tools/test_lead_qualification_tool.py",
          "line": 8
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 17
        },
        {
          "file": "tests/tools/test_property_validation_tool.py",
          "line": 8
        },
        {
          "file": "tests/tools/test_savings_calculator_tool.py",
          "line": 8
        }
      ],
      "tempfile": [
        {
          "file": "tests/conftest.py",
          "line": 7
        }
      ],
      "yaml": [
        {
          "file": "tests/conftest.py",
          "line": 10
        }
      ],
      "engine": [
        {
          "file": "tests/conftest.py",
          "line": 13
        },
        {
          "file": "tests/conftest.py",
          "line": 14
        },
        {
          "file": "tests/conftest.py",
          "line": 15
        },
        {
          "file": "tests/conftest.py",
          "line": 16
        },
        {
          "file": "tests/conftest.py",
          "line": 17
        },
        {
          "file": "tests/conftest.py",
          "line": 18
        },
        {
          "file": "tests/conftest.py",
          "line": 19
        }
      ],
      "enum": [
        {
          "file": "config/response_templates.py",
          "line": 7
        },
        {
          "file": "config/ai_configuration.py",
          "line": 8
        },
        {
          "file": "config/compliance_settings.py",
          "line": 6
        },
        {
          "file": "config/performance_thresholds.py",
          "line": 6
        },
        {
          "file": "config/security_policies.py",
          "line": 6
        },
        {
          "file": "mock_data/demo_customer_personas.py",
          "line": 8
        },
        {
          "file": "compliance/tdlr/audit_trail_generator.py",
          "line": 9
        },
        {
          "file": "compliance/tdlr/privacy_compliance_validator.py",
          "line": 8
        },
        {
          "file": "compliance/tdlr/public_records_handler.py",
          "line": 7
        },
        {
          "file": "compliance/tdlr/record_retention_manager.py",
          "line": 8
        },
        {
          "file": "approval/workflows/stakeholder_approval_manager.py",
          "line": 8
        },
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 14
        },
        {
          "file": "agents/core/guardrails.py",
          "line": 9
        },
        {
          "file": "agents/core/conversation_flows.py",
          "line": 7
        },
        {
          "file": "services/ticket_management/models.py",
          "line": 8
        },
        {
          "file": "services/knowledge_base/quality_validator.py",
          "line": 12
        },
        {
          "file": "services/vector_store/semantic_search.py",
          "line": 12
        },
        {
          "file": "services/persistence/database.py",
          "line": 10
        },
        {
          "file": "testing/performance/stress_testing_framework.py",
          "line": 12
        },
        {
          "file": "demo/scenarios/escalation_scenarios.py",
          "line": 8
        },
        {
          "file": "demo/scenarios/__init__.py",
          "line": 8
        },
        {
          "file": "demo/scenarios/assessment_appeal_scenarios.py",
          "line": 8
        },
        {
          "file": "demo/scenarios/payment_processing_scenarios.py",
          "line": 8
        },
        {
          "file": "demo/scenarios/exemption_application_scenarios.py",
          "line": 8
        },
        {
          "file": "demo/scenarios/multi_property_scenarios.py",
          "line": 8
        },
        {
          "file": "demo/scenarios/basic_inquiry_scenarios.py",
          "line": 8
        },
        {
          "file": "demo/presentations/executive_summary_generator.py",
          "line": 8
        }
      ],
      "logging": [
        {
          "file": "config/response_templates.py",
          "line": 8
        },
        {
          "file": "config/ai_configuration.py",
          "line": 10
        },
        {
          "file": "src/main.py",
          "line": 4
        },
        {
          "file": "compliance/tdlr/audit_trail_generator.py",
          "line": 3
        },
        {
          "file": "compliance/tdlr/privacy_compliance_validator.py",
          "line": 4
        },
        {
          "file": "compliance/tdlr/public_records_handler.py",
          "line": 3
        },
        {
          "file": "compliance/tdlr/record_retention_manager.py",
          "line": 3
        },
        {
          "file": "approval/workflows/stakeholder_approval_manager.py",
          "line": 3
        },
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 10
        },
        {
          "file": "agents/core/guardrails.py",
          "line": 7
        },
        {
          "file": "agents/core/conversation_flows.py",
          "line": 10
        },
        {
          "file": "services/voice/voice_setup.py",
          "line": 8
        },
        {
          "file": "services/voice/livekit_data_bridge.py",
          "line": 8
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 8
        },
        {
          "file": "src/api/integrated_webhooks.py",
          "line": 7
        },
        {
          "file": "src/api/business_webhooks.py",
          "line": 13
        },
        {
          "file": "testing/performance/stress_testing_framework.py",
          "line": 6
        },
        {
          "file": "testing/performance/load_testing_suite.py",
          "line": 6
        },
        {
          "file": "demo/monitoring/demo_performance_tracker.py",
          "line": 12
        },
        {
          "file": "demo/presentations/executive_summary_generator.py",
          "line": 4
        },
        {
          "file": "demo/environment/demo_configuration.py",
          "line": 12
        },
        {
          "file": "demo/environment/demo_reset_manager.py",
          "line": 7
        }
      ],
      "dataclasses": [
        {
          "file": "config/ai_configuration.py",
          "line": 9
        },
        {
          "file": "config/performance_thresholds.py",
          "line": 4
        },
        {
          "file": "config/security_policies.py",
          "line": 5
        },
        {
          "file": "mock_data/consultant_schedules.py",
          "line": 11
        },
        {
          "file": "mock_data/demo_customer_personas.py",
          "line": 7
        },
        {
          "file": "compliance/tdlr/audit_trail_generator.py",
          "line": 8
        },
        {
          "file": "compliance/tdlr/privacy_compliance_validator.py",
          "line": 7
        },
        {
          "file": "compliance/tdlr/public_records_handler.py",
          "line": 6
        },
        {
          "file": "compliance/tdlr/record_retention_manager.py",
          "line": 7
        },
        {
          "file": "approval/workflows/stakeholder_approval_manager.py",
          "line": 7
        },
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 13
        },
        {
          "file": "agents/core/guardrails.py",
          "line": 10
        },
        {
          "file": "agents/core/conversation_flows.py",
          "line": 8
        },
        {
          "file": "services/messaging/message_batching.py",
          "line": 10
        },
        {
          "file": "services/data_acquisition/scheduler.py",
          "line": 9
        },
        {
          "file": "services/data_acquisition/county_appraisal_scraper.py",
          "line": 9
        },
        {
          "file": "services/data_acquisition/texas_comptroller_scraper.py",
          "line": 9
        },
        {
          "file": "services/data_acquisition/document_processor.py",
          "line": 9
        },
        {
          "file": "services/knowledge_base/legal_text_cleaner.py",
          "line": 9
        },
        {
          "file": "services/knowledge_base/quality_validator.py",
          "line": 8
        },
        {
          "file": "services/knowledge_base/content_processor.py",
          "line": 8
        },
        {
          "file": "services/knowledge_base/taxonomy_builder.py",
          "line": 8
        },
        {
          "file": "services/vector_store/semantic_search.py",
          "line": 8
        },
        {
          "file": "services/vector_store/citation_tracker.py",
          "line": 8
        },
        {
          "file": "services/vector_store/property_tax_embeddings.py",
          "line": 10
        },
        {
          "file": "services/voice/livekit_data_bridge.py",
          "line": 11
        },
        {
          "file": "services/voice/voice_config.py",
          "line": 8
        },
        {
          "file": "testing/performance/stress_testing_framework.py",
          "line": 11
        },
        {
          "file": "testing/performance/load_testing_suite.py",
          "line": 10
        },
        {
          "file": "demo/monitoring/demo_performance_tracker.py",
          "line": 9
        },
        {
          "file": "demo/scenarios/escalation_scenarios.py",
          "line": 7
        },
        {
          "file": "demo/scenarios/assessment_appeal_scenarios.py",
          "line": 7
        },
        {
          "file": "demo/scenarios/payment_processing_scenarios.py",
          "line": 7
        },
        {
          "file": "demo/scenarios/exemption_application_scenarios.py",
          "line": 7
        },
        {
          "file": "demo/scenarios/multi_property_scenarios.py",
          "line": 7
        },
        {
          "file": "demo/scenarios/basic_inquiry_scenarios.py",
          "line": 7
        },
        {
          "file": "demo/presentations/executive_summary_generator.py",
          "line": 7
        },
        {
          "file": "demo/environment/demo_configuration.py",
          "line": 9
        },
        {
          "file": "demo/environment/demo_reset_manager.py",
          "line": 10
        }
      ],
      "dotenv": [
        {
          "file": "config/compliance_settings.py",
          "line": 7
        },
        {
          "file": "config/settings.py",
          "line": 4
        },
        {
          "file": "config/performance_thresholds.py",
          "line": 7
        },
        {
          "file": "config/security_policies.py",
          "line": 7
        },
        {
          "file": "src/main.py",
          "line": 8
        },
        {
          "file": "services/voice/livekit_data_bridge.py",
          "line": 13
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 11
        }
      ],
      "fastapi": [
        {
          "file": "src/main.py",
          "line": 5
        },
        {
          "file": "src/main.py",
          "line": 6
        },
        {
          "file": "src/main.py",
          "line": 7
        },
        {
          "file": "src/api/integrated_webhooks.py",
          "line": 8
        },
        {
          "file": "src/api/integrated_webhooks.py",
          "line": 9
        },
        {
          "file": "src/api/integrated_webhooks.py",
          "line": 229
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 6
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 7
        },
        {
          "file": "src/api/business_webhooks.py",
          "line": 14
        },
        {
          "file": "src/api/business_webhooks.py",
          "line": 15
        },
        {
          "file": "src/api/business_webhooks.py",
          "line": 233
        },
        {
          "file": "src/api/report_management.py",
          "line": 10
        },
        {
          "file": "src/api/report_management.py",
          "line": 11
        }
      ],
      "uvicorn": [
        {
          "file": "src/main.py",
          "line": 9
        }
      ],
      "structlog": [
        {
          "file": "src/main.py",
          "line": 10
        },
        {
          "file": "services/date_intelligence.py",
          "line": 9
        },
        {
          "file": "agents/simplified/property_document_tools.py",
          "line": 12
        },
        {
          "file": "agents/simplified/property_tax_rag_tool.py",
          "line": 9
        },
        {
          "file": "agents/simplified/ticket_tools.py",
          "line": 8
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 16
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 20
        },
        {
          "file": "agents/tools/document_processing_tool.py",
          "line": 16
        },
        {
          "file": "agents/tools/savings_calculator_tool.py",
          "line": 13
        },
        {
          "file": "agents/tools/lead_qualification_tool.py",
          "line": 13
        },
        {
          "file": "agents/tools/property_validation_tool.py",
          "line": 14
        },
        {
          "file": "agents/tools/consultation_scheduling_tool.py",
          "line": 14
        },
        {
          "file": "agents/tools/deadline_tracking_tool.py",
          "line": 13
        },
        {
          "file": "services/ticket_management/webhook_interceptor.py",
          "line": 8
        },
        {
          "file": "services/ticket_management/ticket_service.py",
          "line": 12
        },
        {
          "file": "services/messaging/modern_integrated_webhook_handler.py",
          "line": 7
        },
        {
          "file": "services/messaging/whatsapp_client.py",
          "line": 11
        },
        {
          "file": "services/messaging/whatsapp_image_handler.py",
          "line": 8
        },
        {
          "file": "services/messaging/property_tax_templates.py",
          "line": 6
        },
        {
          "file": "services/messaging/message_batching.py",
          "line": 12
        },
        {
          "file": "services/data_acquisition/scheduler.py",
          "line": 11
        },
        {
          "file": "services/data_acquisition/county_appraisal_scraper.py",
          "line": 10
        },
        {
          "file": "services/data_acquisition/texas_comptroller_scraper.py",
          "line": 11
        },
        {
          "file": "services/data_acquisition/document_processor.py",
          "line": 11
        },
        {
          "file": "services/knowledge_base/legal_text_cleaner.py",
          "line": 10
        },
        {
          "file": "services/knowledge_base/quality_validator.py",
          "line": 10
        },
        {
          "file": "services/knowledge_base/content_processor.py",
          "line": 10
        },
        {
          "file": "services/knowledge_base/taxonomy_builder.py",
          "line": 10
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 9
        },
        {
          "file": "services/vector_store/semantic_search.py",
          "line": 10
        },
        {
          "file": "services/vector_store/citation_tracker.py",
          "line": 10
        },
        {
          "file": "services/vector_store/property_tax_embeddings.py",
          "line": 8
        },
        {
          "file": "services/vector_store/legal_document_indexer.py",
          "line": 9
        },
        {
          "file": "services/persistence/redis_conversation_store.py",
          "line": 10
        },
        {
          "file": "services/persistence/repositories.py",
          "line": 10
        },
        {
          "file": "services/persistence/analytics_repository.py",
          "line": 12
        },
        {
          "file": "services/persistence/database.py",
          "line": 12
        },
        {
          "file": "services/persistence/order_storage.py",
          "line": 10
        },
        {
          "file": "services/voice/voice_chat_state.py",
          "line": 9
        },
        {
          "file": "services/utils/retry_handler.py",
          "line": 11
        },
        {
          "file": "services/payments/mock_razorpay.py",
          "line": 13
        },
        {
          "file": "services/payments/razorpay_integration.py",
          "line": 12
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 9
        },
        {
          "file": "scripts/cleanup/clear-all-data.py",
          "line": 21
        },
        {
          "file": "scripts/cleanup/clear-sessions-only.py",
          "line": 21
        }
      ],
      "src": [
        {
          "file": "src/main.py",
          "line": 42
        },
        {
          "file": "src/main.py",
          "line": 43
        },
        {
          "file": "src/main.py",
          "line": 92
        }
      ],
      "app": [
        {
          "file": "src/main.py",
          "line": 47
        },
        {
          "file": "src/main.py",
          "line": 48
        },
        {
          "file": "src/main.py",
          "line": 84
        }
      ],
      "random": [
        {
          "file": "mock_data/consultant_schedules.py",
          "line": 10
        },
        {
          "file": "mock_data/demo_customer_personas.py",
          "line": 10
        },
        {
          "file": "mock_data/property_records.py",
          "line": 10
        },
        {
          "file": "mock_data/document_templates.py",
          "line": 10
        },
        {
          "file": "mock_data/assessment_patterns.py",
          "line": 10
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 10
        },
        {
          "file": "services/ticket_management/ticket_service.py",
          "line": 6
        },
        {
          "file": "services/utils/retry_handler.py",
          "line": 7
        },
        {
          "file": "testing/performance/stress_testing_framework.py",
          "line": 8
        },
        {
          "file": "testing/performance/load_testing_suite.py",
          "line": 12
        },
        {
          "file": "demo/scenarios/escalation_scenarios.py",
          "line": 9
        },
        {
          "file": "demo/scenarios/__init__.py",
          "line": 7
        },
        {
          "file": "demo/scenarios/assessment_appeal_scenarios.py",
          "line": 9
        },
        {
          "file": "demo/scenarios/payment_processing_scenarios.py",
          "line": 9
        },
        {
          "file": "demo/scenarios/exemption_application_scenarios.py",
          "line": 9
        },
        {
          "file": "demo/scenarios/multi_property_scenarios.py",
          "line": 9
        },
        {
          "file": "demo/scenarios/basic_inquiry_scenarios.py",
          "line": 9
        }
      ],
      "decimal": [
        {
          "file": "mock_data/tax_rates.py",
          "line": 9
        },
        {
          "file": "mock_data/assessment_patterns.py",
          "line": 11
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 14
        },
        {
          "file": "agents/tools/document_processing_tool.py",
          "line": 13
        },
        {
          "file": "agents/tools/savings_calculator_tool.py",
          "line": 10
        },
        {
          "file": "agents/tools/lead_qualification_tool.py",
          "line": 11
        },
        {
          "file": "agents/tools/property_validation_tool.py",
          "line": 11
        },
        {
          "file": "agents/tools/consultation_scheduling_tool.py",
          "line": 12
        },
        {
          "file": "agents/tools/deadline_tracking_tool.py",
          "line": 11
        },
        {
          "file": "services/persistence/repositories.py",
          "line": 8
        },
        {
          "file": "services/persistence/analytics_repository.py",
          "line": 8
        },
        {
          "file": "services/persistence/database.py",
          "line": 9
        }
      ],
      "calendar": [
        {
          "file": "mock_data/tax_calendars.py",
          "line": 10
        }
      ],
      "hashlib": [
        {
          "file": "compliance/tdlr/audit_trail_generator.py",
          "line": 4
        },
        {
          "file": "compliance/tdlr/privacy_compliance_validator.py",
          "line": 9
        },
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 6
        },
        {
          "file": "agents/tools/document_processing_tool.py",
          "line": 10
        },
        {
          "file": "services/messaging/whatsapp_client.py",
          "line": 545
        },
        {
          "file": "services/data_acquisition/texas_comptroller_scraper.py",
          "line": 16
        },
        {
          "file": "services/data_acquisition/document_processor.py",
          "line": 14
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 8
        },
        {
          "file": "services/payments/mock_razorpay.py",
          "line": 10
        },
        {
          "file": "services/payments/razorpay_integration.py",
          "line": 9
        }
      ],
      "uuid": [
        {
          "file": "compliance/tdlr/audit_trail_generator.py",
          "line": 10
        },
        {
          "file": "approval/workflows/stakeholder_approval_manager.py",
          "line": 9
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 9
        },
        {
          "file": "services/payments/mock_razorpay.py",
          "line": 8
        }
      ],
      "config": [
        {
          "file": "compliance/tdlr/audit_trail_generator.py",
          "line": 13
        },
        {
          "file": "compliance/tdlr/privacy_compliance_validator.py",
          "line": 12
        },
        {
          "file": "compliance/tdlr/public_records_handler.py",
          "line": 10
        },
        {
          "file": "compliance/tdlr/record_retention_manager.py",
          "line": 12
        },
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 18
        },
        {
          "file": "agents/core/guardrails.py",
          "line": 12
        },
        {
          "file": "agents/core/conversation_flows.py",
          "line": 12
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 33
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 35
        },
        {
          "file": "services/ticket_management/webhook_interceptor.py",
          "line": 231
        },
        {
          "file": "services/ticket_management/ticket_service.py",
          "line": 393
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 17
        },
        {
          "file": "services/persistence/database.py",
          "line": 892
        },
        {
          "file": "services/persistence/order_storage.py",
          "line": 278
        },
        {
          "file": "testing/performance/stress_testing_framework.py",
          "line": 15
        },
        {
          "file": "testing/performance/load_testing_suite.py",
          "line": 15
        },
        {
          "file": "demo/presentations/executive_summary_generator.py",
          "line": 15
        },
        {
          "file": "demo/presentations/executive_summary_generator.py",
          "line": 16
        },
        {
          "file": "demo/presentations/executive_summary_generator.py",
          "line": 17
        },
        {
          "file": "demo/environment/demo_configuration.py",
          "line": 14
        },
        {
          "file": "scripts/cleanup/clear-all-data.py",
          "line": 49
        },
        {
          "file": "scripts/cleanup/clear-all-data.py",
          "line": 152
        },
        {
          "file": "scripts/cleanup/clear-sessions-only.py",
          "line": 33
        }
      ],
      "csv": [
        {
          "file": "compliance/tdlr/audit_trail_generator.py",
          "line": 475
        }
      ],
      "io": [
        {
          "file": "compliance/tdlr/audit_trail_generator.py",
          "line": 476
        },
        {
          "file": "demo/presentations/executive_summary_generator.py",
          "line": 11
        }
      ],
      "aiohttp": [
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 4
        },
        {
          "file": "services/messaging/whatsapp_client.py",
          "line": 10
        },
        {
          "file": "services/messaging/whatsapp_image_handler.py",
          "line": 7
        },
        {
          "file": "services/data_acquisition/county_appraisal_scraper.py",
          "line": 7
        },
        {
          "file": "services/data_acquisition/texas_comptroller_scraper.py",
          "line": 7
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 28
        },
        {
          "file": "testing/performance/stress_testing_framework.py",
          "line": 4
        },
        {
          "file": "testing/performance/load_testing_suite.py",
          "line": 4
        }
      ],
      "ssl": [
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 7
        }
      ],
      "socket": [
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 8
        }
      ],
      "urllib": [
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 16
        },
        {
          "file": "services/data_acquisition/county_appraisal_scraper.py",
          "line": 11
        },
        {
          "file": "services/data_acquisition/texas_comptroller_scraper.py",
          "line": 12
        }
      ],
      "glob": [
        {
          "file": "security/audit/vulnerability_scanner.py",
          "line": 176
        }
      ],
      "base64": [
        {
          "file": "agents/simplified/property_document_tools.py",
          "line": 8
        },
        {
          "file": "agents/tools/document_processing_tool.py",
          "line": 9
        },
        {
          "file": "services/messaging/whatsapp_image_handler.py",
          "line": 11
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 168
        },
        {
          "file": "src/api/whatsapp_webhooks.py",
          "line": 302
        },
        {
          "file": "demo/presentations/executive_summary_generator.py",
          "line": 12
        }
      ],
      "langchain_core": [
        {
          "file": "agents/simplified/property_document_tools.py",
          "line": 10
        },
        {
          "file": "agents/simplified/property_document_tools.py",
          "line": 200
        },
        {
          "file": "agents/simplified/property_tax_rag_tool.py",
          "line": 8
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 17
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 23
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 24
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 30
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 72
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 240
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 623
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 654
        },
        {
          "file": "agents/tools/document_processing_tool.py",
          "line": 17
        },
        {
          "file": "agents/tools/savings_calculator_tool.py",
          "line": 14
        },
        {
          "file": "agents/tools/lead_qualification_tool.py",
          "line": 14
        },
        {
          "file": "agents/tools/property_validation_tool.py",
          "line": 15
        },
        {
          "file": "agents/tools/consultation_scheduling_tool.py",
          "line": 15
        },
        {
          "file": "agents/tools/deadline_tracking_tool.py",
          "line": 14
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 275
        },
        {
          "file": "services/vector_store/semantic_search.py",
          "line": 14
        },
        {
          "file": "services/vector_store/property_tax_embeddings.py",
          "line": 21
        },
        {
          "file": "services/vector_store/legal_document_indexer.py",
          "line": 12
        },
        {
          "file": "services/vector_store/legal_document_indexer.py",
          "line": 14
        },
        {
          "file": "services/voice/voice_config.py",
          "line": 116
        },
        {
          "file": "services/payments/mock_razorpay.py",
          "line": 15
        },
        {
          "file": "services/payments/razorpay_integration.py",
          "line": 14
        }
      ],
      "threading": [
        {
          "file": "agents/simplified/property_document_tools.py",
          "line": 164
        },
        {
          "file": "agents/simplified/property_tax_rag_tool.py",
          "line": 179
        }
      ],
      "concurrent": [
        {
          "file": "agents/simplified/property_document_tools.py",
          "line": 182
        },
        {
          "file": "agents/simplified/property_tax_rag_tool.py",
          "line": 180
        },
        {
          "file": "testing/performance/load_testing_suite.py",
          "line": 11
        }
      ],
      "langchain": [
        {
          "file": "agents/simplified/ticket_tools.py",
          "line": 6
        },
        {
          "file": "services/vector_store/legal_document_indexer.py",
          "line": 15
        }
      ],
      "pydantic": [
        {
          "file": "agents/simplified/ticket_tools.py",
          "line": 7
        },
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 18
        },
        {
          "file": "agents/tools/document_processing_tool.py",
          "line": 18
        },
        {
          "file": "agents/tools/savings_calculator_tool.py",
          "line": 15
        },
        {
          "file": "agents/tools/lead_qualification_tool.py",
          "line": 15
        },
        {
          "file": "agents/tools/property_validation_tool.py",
          "line": 16
        },
        {
          "file": "agents/tools/consultation_scheduling_tool.py",
          "line": 16
        },
        {
          "file": "agents/tools/deadline_tracking_tool.py",
          "line": 15
        },
        {
          "file": "src/api/report_management.py",
          "line": 12
        }
      ],
      "string": [
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 11
        },
        {
          "file": "services/ticket_management/ticket_service.py",
          "line": 7
        }
      ],
      "integrations": [
        {
          "file": "agents/simplified/enhanced_workflow_tools.py",
          "line": 755
        }
      ],
      "typing_extensions": [
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 19
        }
      ],
      "langchain_google_genai": [
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 25
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 274
        },
        {
          "file": "services/vector_store/property_tax_embeddings.py",
          "line": 16
        },
        {
          "file": "services/vector_store/legal_document_indexer.py",
          "line": 34
        },
        {
          "file": "services/voice/voice_config.py",
          "line": 115
        }
      ],
      "langgraph": [
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 26
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 27
        },
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 28
        }
      ],
      "sqlalchemy": [
        {
          "file": "agents/core/property_tax_assistant_v3.py",
          "line": 904
        },
        {
          "file": "services/ticket_management/ticket_service.py",
          "line": 10
        },
        {
          "file": "services/ticket_management/ticket_service.py",
          "line": 11
        },
        {
          "file": "services/ticket_management/models.py",
          "line": 5
        },
        {
          "file": "services/ticket_management/models.py",
          "line": 6
        },
        {
          "file": "services/persistence/repositories.py",
          "line": 11
        },
        {
          "file": "services/persistence/repositories.py",
          "line": 12
        },
        {
          "file": "services/persistence/repositories.py",
          "line": 13
        },
        {
          "file": "services/persistence/analytics_repository.py",
          "line": 9
        },
        {
          "file": "services/persistence/analytics_repository.py",
          "line": 10
        },
        {
          "file": "services/persistence/analytics_repository.py",
          "line": 11
        },
        {
          "file": "services/persistence/database.py",
          "line": 13
        },
        {
          "file": "services/persistence/database.py",
          "line": 18
        },
        {
          "file": "services/persistence/database.py",
          "line": 21
        },
        {
          "file": "services/persistence/database.py",
          "line": 22
        },
        {
          "file": "services/persistence/database.py",
          "line": 874
        },
        {
          "file": "scripts/cleanup/clear-all-data.py",
          "line": 31
        }
      ],
      "mock_data": [
        {
          "file": "agents/tools/document_processing_tool.py",
          "line": 20
        },
        {
          "file": "agents/tools/savings_calculator_tool.py",
          "line": 17
        },
        {
          "file": "agents/tools/lead_qualification_tool.py",
          "line": 17
        },
        {
          "file": "agents/tools/lead_qualification_tool.py",
          "line": 28
        },
        {
          "file": "agents/tools/lead_qualification_tool.py",
          "line": 274
        },
        {
          "file": "agents/tools/property_validation_tool.py",
          "line": 18
        },
        {
          "file": "agents/tools/consultation_scheduling_tool.py",
          "line": 18
        },
        {
          "file": "agents/tools/deadline_tracking_tool.py",
          "line": 17
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 191
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 195
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 199
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 203
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 207
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 211
        },
        {
          "file": "demo/scenarios/assessment_appeal_scenarios.py",
          "line": 13
        },
        {
          "file": "demo/scenarios/assessment_appeal_scenarios.py",
          "line": 14
        },
        {
          "file": "demo/scenarios/payment_processing_scenarios.py",
          "line": 13
        },
        {
          "file": "demo/scenarios/payment_processing_scenarios.py",
          "line": 14
        },
        {
          "file": "demo/scenarios/exemption_application_scenarios.py",
          "line": 13
        },
        {
          "file": "demo/scenarios/multi_property_scenarios.py",
          "line": 13
        },
        {
          "file": "demo/scenarios/basic_inquiry_scenarios.py",
          "line": 13
        },
        {
          "file": "demo/scenarios/basic_inquiry_scenarios.py",
          "line": 14
        },
        {
          "file": "demo/scenarios/basic_inquiry_scenarios.py",
          "line": 15
        },
        {
          "file": "demo/environment/demo_reset_manager.py",
          "line": 330
        },
        {
          "file": "demo/environment/demo_reset_manager.py",
          "line": 334
        }
      ],
      "pytz": [
        {
          "file": "agents/tools/consultation_scheduling_tool.py",
          "line": 11
        }
      ],
      "redis": [
        {
          "file": "services/ticket_management/webhook_interceptor.py",
          "line": 7
        },
        {
          "file": "services/ticket_management/ticket_service.py",
          "line": 13
        },
        {
          "file": "services/persistence/redis_conversation_store.py",
          "line": 7
        },
        {
          "file": "services/persistence/order_storage.py",
          "line": 7
        },
        {
          "file": "services/voice/voice_chat_state.py",
          "line": 8
        },
        {
          "file": "services/voice/voice_chat_state.py",
          "line": 31
        },
        {
          "file": "src/api/business_webhooks.py",
          "line": 168
        },
        {
          "file": "demo/environment/demo_reset_manager.py",
          "line": 13
        },
        {
          "file": "scripts/cleanup/clear-user-redis.py",
          "line": 7
        },
        {
          "file": "scripts/cleanup/clear-all-sessions.py",
          "line": 6
        },
        {
          "file": "scripts/cleanup/clear-all-data.py",
          "line": 25
        },
        {
          "file": "scripts/cleanup/clear-sessions-only.py",
          "line": 20
        }
      ],
      "hmac": [
        {
          "file": "services/messaging/whatsapp_client.py",
          "line": 544
        },
        {
          "file": "services/communication/message_handler.py",
          "line": 7
        },
        {
          "file": "services/payments/mock_razorpay.py",
          "line": 9
        },
        {
          "file": "services/payments/razorpay_integration.py",
          "line": 8
        }
      ],
      "time": [
        {
          "file": "services/messaging/message_batching.py",
          "line": 8
        },
        {
          "file": "services/utils/retry_handler.py",
          "line": 205
        },
        {
          "file": "testing/performance/stress_testing_framework.py",
          "line": 5
        },
        {
          "file": "testing/performance/load_testing_suite.py",
          "line": 5
        },
        {
          "file": "tests/tools/test_runner.py",
          "line": 10
        },
        {
          "file": "tests/tools/test_property_validation_tool.py",
          "line": 288
        },
        {
          "file": "tests/tools/test_savings_calculator_tool.py",
          "line": 339
        },
        {
          "file": "demo/monitoring/demo_performance_tracker.py",
          "line": 6
        }
      ],
      "schedule": [
        {
          "file": "services/data_acquisition/scheduler.py",
          "line": 7
        }
      ],
      "bs4": [
        {
          "file": "services/data_acquisition/county_appraisal_scraper.py",
          "line": 12
        },
        {
          "file": "services/data_acquisition/texas_comptroller_scraper.py",
          "line": 13
        },
        {
          "file": "services/data_acquisition/document_processor.py",
          "line": 26
        }
      ],
      "aiofiles": [
        {
          "file": "services/data_acquisition/document_processor.py",
          "line": 7
        }
      ],
      "mimetypes": [
        {
          "file": "services/data_acquisition/document_processor.py",
          "line": 15
        }
      ],
      "PyPDF2": [
        {
          "file": "services/data_acquisition/document_processor.py",
          "line": 19
        },
        {
          "file": "services/data_acquisition/document_processor.py",
          "line": 20
        }
      ],
      "html": [
        {
          "file": "services/data_acquisition/document_processor.py",
          "line": 27
        }
      ],
      "numpy": [
        {
          "file": "services/vector_store/property_tax_embeddings.py",
          "line": 9
        }
      ],
      "langchain_chroma": [
        {
          "file": "services/vector_store/legal_document_indexer.py",
          "line": 13
        }
      ],
      "contextlib": [
        {
          "file": "services/persistence/database.py",
          "line": 901
        }
      ],
      "functools": [
        {
          "file": "services/persistence/order_storage.py",
          "line": 12
        },
        {
          "file": "services/utils/retry_handler.py",
          "line": 8
        }
      ],
      "livekit": [
        {
          "file": "services/voice/voice_setup.py",
          "line": 12
        },
        {
          "file": "services/voice/voice_setup.py",
          "line": 13
        },
        {
          "file": "services/voice/livekit_data_bridge.py",
          "line": 15
        },
        {
          "file": "services/voice/livekit_data_bridge.py",
          "line": 16
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 14
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 15
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 16
        },
        {
          "file": "services/voice/property_tax_voice_agent.py",
          "line": 17
        }
      ],
      "voice_config": [
        {
          "file": "services/voice/voice_setup.py",
          "line": 14
        }
      ],
      "google": [
        {
          "file": "services/voice/voice_setup.py",
          "line": 216
        }
      ],
      "razorpay": [
        {
          "file": "services/payments/razorpay_integration.py",
          "line": 18
        }
      ],
      "psutil": [
        {
          "file": "testing/performance/stress_testing_framework.py",
          "line": 7
        }
      ],
      "statistics": [
        {
          "file": "testing/performance/load_testing_suite.py",
          "line": 7
        }
      ],
      "unittest": [
        {
          "file": "tests/tools/test_lead_qualification_tool.py",
          "line": 10
        },
        {
          "file": "tests/tools/test_property_validation_tool.py",
          "line": 10
        },
        {
          "file": "tests/tools/test_savings_calculator_tool.py",
          "line": 10
        }
      ],
      "matplotlib": [
        {
          "file": "demo/presentations/executive_summary_generator.py",
          "line": 9
        }
      ],
      "seaborn": [
        {
          "file": "demo/presentations/executive_summary_generator.py",
          "line": 10
        }
      ],
      "psycopg2": [
        {
          "file": "demo/environment/demo_reset_manager.py",
          "line": 12
        }
      ],
      "demo": [
        {
          "file": "demo/environment/demo_reset_manager.py",
          "line": 16
        }
      ]
    },
    "total_required": 37,
    "total_unused": 18
  },
  "removal_recommendations": {
    "safe_to_remove": {
      "voice_services": {
        "safe": false,
        "reason": "Voice services imported by 4 files",
        "files": [
          "services/voice/voice_setup.py",
          "services/voice/livekit_data_bridge.py",
          "services/voice/voice_chat_state.py",
          "services/voice/property_tax_voice_agent.py",
          "services/voice/voice_config.py"
        ]
      },
      "image_analysis": {
        "safe": false,
        "reason": "Image analysis imported by 2 files",
        "files": [
          "services/image_analysis/__init__.py"
        ]
      }
    },
    "requires_caution": {
      "instagram_code": {
        "files_count": 33,
        "references": 237,
        "files": [
          "services/ticket_management/webhook_interceptor.py",
          "services/messaging/message_batching.py",
          "security/audit/vulnerability_scanner.py",
          "agents/simplified/ticket_tools.py",
          "agents/core/property_tax_assistant_v3.py",
          "scripts/test_intelligent_booking.py",
          "services/payments/razorpay_integration.py",
          "src/api/business_webhooks.py",
          "services/communication/message_handler.py",
          "scripts/test-workflow.py"
        ]
      },
      "medical_remnants": {
        "files_count": 22,
        "references": 195,
        "files": [
          "services/voice/livekit_data_bridge.py",
          "src/api/whatsapp_webhooks.py",
          "mock_data/demo_customer_personas.py",
          "security/audit/vulnerability_scanner.py",
          "agents/simplified/property_document_tools.py",
          "agents/core/guardrails.py",
          "demo/scenarios/assessment_appeal_scenarios.py",
          "src/api/business_webhooks.py",
          "scripts/test-workflow.py",
          "services/messaging/whatsapp_image_handler.py"
        ]
      }
    },
    "package_cleanup": {
      "unused_packages": [
        "requests",
        "cryptography",
        "alembic",
        "asyncpg",
        "aiosqlite",
        "mcp",
        "python-jose",
        "passlib",
        "python-multipart",
        "prometheus-client",
        "langfuse",
        "httpx",
        "black",
        "isort",
        "flake8",
        "mypy",
        "gspread",
        "python-dotenv"
      ],
      "total_unused": 18
    }
  }
}